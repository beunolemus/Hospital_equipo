{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\r\n * Defines Percent Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Series, SeriesDataItem } from \"./Series\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { Label } from \"../../core/elements/Label\";\nimport { Color } from \"../../core/utils/Color\";\nimport { Tick } from \"../elements/Tick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Container } from \"../../core/Container\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PercentSeriesDataItem = /** @class */function (_super) {\n  __extends(PercentSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PercentSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PercentSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Adds an `id` attribute the the slice element and returns its id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PercentSeriesDataItem.prototype.uidAttr = function () {\n    return this.slice.uidAttr();\n  };\n  /**\r\n   * Hide the data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param toValue   Target value for animation\r\n   * @param fields    Fields to animate while hiding\r\n   */\n  PercentSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n    return _super.prototype.hide.call(this, duration, delay, 0, fields);\n  };\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n  PercentSeriesDataItem.prototype.setVisibility = function (value, noChangeValues) {\n    if (!noChangeValues) {\n      if (value) {\n        this.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\n      } else {\n        this.setWorkingValue(\"value\", 0, 0, 0);\n      }\n    }\n    _super.prototype.setVisibility.call(this, value, noChangeValues);\n  };\n  /**\r\n   * Show hidden data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param fields    Fields to animate while hiding\r\n   */\n  PercentSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"category\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function get() {\n      return this.properties.category;\n    },\n    /**\r\n     * Category.\r\n     *\r\n     * @param value  Category\r\n     */\n    set: function set(value) {\n      this.setProperty(\"category\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a marker used in the legend for this slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Marker container\r\n   */\n  PercentSeriesDataItem.prototype.createLegendMarker = function (marker) {\n    this.component.createLegendMarker(marker, this);\n  };\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function get() {\n      return this._legendDataItem;\n    },\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function set(value) {\n      this._legendDataItem = value;\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"tick\", {\n    /**\r\n     * A Tick element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Tick element\r\n     */\n    get: function get() {\n      var _this = this;\n      if (!this._tick) {\n        var tick_1 = this.component.ticks.create();\n        this._tick = tick_1;\n        this.addSprite(tick_1);\n        this._disposers.push(tick_1);\n        tick_1.parent = this.component.ticksContainer;\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.ticks.removeValue(tick_1);\n          }\n        }));\n        tick_1.visible = this.visible;\n      }\n      return this._tick;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"label\", {\n    /**\r\n     * A Label element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Label element\r\n     */\n    get: function get() {\n      var _this = this;\n      if (!this._label) {\n        var label_1 = this.component.labels.create();\n        this.addSprite(label_1);\n        this._label = label_1;\n        this._disposers.push(label_1);\n        label_1.parent = this.component.labelsContainer;\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.labels.removeValue(label_1);\n          }\n        }));\n        label_1.visible = this.visible;\n      }\n      return this._label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"slice\", {\n    /**\r\n     * An element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Slice element\r\n     */\n    get: function get() {\n      var _this = this;\n      if (!this._slice) {\n        var component_1 = this.component;\n        var slice_1 = component_1.slices.create();\n        this.addSprite(slice_1);\n        this._slice = slice_1;\n        this._disposers.push(slice_1);\n        slice_1.parent = component_1.slicesContainer;\n        this._disposers.push(new Disposer(function () {\n          component_1.slices.removeValue(slice_1);\n        }));\n        slice_1.visible = this.visible;\n        // Apply accessibility\n        if (component_1.itemsFocusable()) {\n          if (!$type.hasValue(this.component.role)) {\n            this.component.role = \"menu\";\n          }\n          if (!$type.hasValue(slice_1.role)) {\n            slice_1.role = \"menuitem\";\n          }\n          slice_1.focusable = true;\n        } else {\n          if (!$type.hasValue(this.component.role)) {\n            this.component.role = \"list\";\n          }\n          if (!$type.hasValue(slice_1.role)) {\n            slice_1.role = \"listitem\";\n          }\n          slice_1.focusable = false;\n        }\n        // Apply screen reader label\n        if (slice_1.focusable) {\n          slice_1.events.on(\"focus\", function (ev) {\n            slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          slice_1.events.on(\"blur\", function (ev) {\n            slice_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n        if (slice_1.hoverable) {\n          slice_1.events.on(\"over\", function (ev) {\n            slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          slice_1.events.on(\"out\", function (ev) {\n            slice_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n      }\n      return this._slice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Disabled in legend?\r\n     */\n    get: function get() {\n      return this.properties.hiddenInLegend;\n    },\n    /**\r\n     * Should dataItem (slice) be hidden in legend?\r\n     *\r\n     * @param value Visible in legend?\r\n     */\n    set: function set(value) {\n      this.setProperty(\"hiddenInLegend\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PercentSeriesDataItem;\n}(SeriesDataItem);\nexport { PercentSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\nvar PercentSeries = /** @class */function (_super) {\n  __extends(PercentSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PercentSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PercentSeries\";\n    _this._addAllDataItems = false;\n    _this.colors = new ColorSet();\n    _this.colors.step = 1;\n    _this.isMeasured = true;\n    _this.calculatePercent = true;\n    var slicesContainer = _this.createChild(Container);\n    slicesContainer.shouldClone = false;\n    slicesContainer.isMeasured = false;\n    _this.slicesContainer = slicesContainer;\n    var ticksContainer = _this.createChild(Container);\n    ticksContainer.shouldClone = false;\n    ticksContainer.isMeasured = false;\n    ticksContainer.layout = \"none\";\n    _this.ticksContainer = ticksContainer;\n    var labelsContainer = _this.createChild(Container);\n    labelsContainer.shouldClone = false;\n    labelsContainer.isMeasured = false;\n    labelsContainer.layout = \"none\";\n    _this.labelsContainer = labelsContainer;\n    _this.alignLabels = false;\n    _this.bulletsContainer.toFront();\n    // Make all slices focusable\n    _this.skipFocusThreshold = 50;\n    var defaultState = _this.defaultState;\n    defaultState.transitionEasing = $ease.sinOut;\n    // Accessibility\n    _this.itemReaderText = \"{category}: {value.percent.formatNumber('#.#p')}\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creates a slice element.\r\n   *\r\n   * @return Slice\r\n   */\n  PercentSeries.prototype.createSlice = function () {\n    return new Sprite();\n  };\n  /**\r\n   * Creates a tick element.\r\n   *\r\n   * @return Tick\r\n   */\n  PercentSeries.prototype.createTick = function () {\n    return new Tick();\n  };\n  /**\r\n   * Sreates label element.\r\n   *\r\n   * @return label\r\n   */\n  PercentSeries.prototype.createLabel = function () {\n    return new Label();\n  };\n  Object.defineProperty(PercentSeries.prototype, \"slices\", {\n    /**\r\n     * A list of slice elements for the series.\r\n     *\r\n     * Use its `template` to configure look and behavior of the slices. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.stroke = am4core.color(\"#fff\");\r\n     * series.slices.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.stroke = am4core.color(\"#fff\");\r\n     * series.slices.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"stroke\": \"#fff\",\r\n     *       \"strokeWidth\": 2\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Slices\r\n     */\n    get: function get() {\n      if (!this._slices) {\n        var slice = this.createSlice();\n        slice.applyOnClones = true;\n        this._disposers.push(slice);\n        this.initSlice(slice);\n        this._slices = new ListTemplate(slice);\n        this._disposers.push(new ListDisposer(this._slices));\n      }\n      return this._slices;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"ticks\", {\n    /**\r\n     * A list of tick elements for the series. Ticks connect slice to its label.\r\n     *\r\n     * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.ticks.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.ticks.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"ticks\": {\r\n     *       \"strokeWidth\": 2\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Ticks\r\n     */\n    get: function get() {\n      if (!this._ticks) {\n        var tick = this.createTick();\n        tick.applyOnClones = true;\n        this._disposers.push(tick);\n        this.initTick(tick);\n        this._ticks = new ListTemplate(tick);\n        this._disposers.push(new ListDisposer(this._ticks));\n      }\n      return this._ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"labels\", {\n    /**\r\n     * A list of slice label elements for the series.\r\n     *\r\n     * Use its `template` to configure look and behavior of the labels. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.labels.template.fill = am4core.color(\"#c00\");\r\n     * series.labels.template.fontSize = 20;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.labels.template.fill = am4core.color(\"#c00\");\r\n     * series.labels.template.fontSize = 20;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"labels\": {\r\n     *       \"stroke\": \"#c00\",\r\n     *       \"fontSize\": 20\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Labels\r\n     */\n    get: function get() {\n      if (!this._labels) {\n        var label = this.createLabel();\n        label.applyOnClones = true;\n        this._disposers.push(label);\n        this.initLabel(label);\n        this._labels = new ListTemplate(label);\n        this._disposers.push(new ListDisposer(this._labels));\n      }\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PercentSeries.prototype.createDataItem = function () {\n    return new PercentSeriesDataItem();\n  };\n  /**\r\n   * Creates and returns a new slice element.\r\n   *\r\n   * @param sliceType  Type of the slice element\r\n   * @return Slice\r\n   */\n  PercentSeries.prototype.initSlice = function (slice) {};\n  PercentSeries.prototype.initLabel = function (label) {\n    label.text = \"{category}: {value.percent.formatNumber('#.0p')}\";\n    label.isMeasured = false;\n    label.padding(5, 5, 5, 5);\n  };\n  PercentSeries.prototype.initTick = function (label) {};\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PercentSeries.prototype.validateDataItems = function () {\n    this.colors.reset();\n    if (this.patterns) {\n      this.patterns.reset();\n    }\n    _super.prototype.validateDataItems.call(this);\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  PercentSeries.prototype.validateDataElement = function (dataItem) {\n    var slice = dataItem.slice;\n    if (slice) {\n      if (slice.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(slice.stroke)) {\n            slice.stroke = this.colors.next();\n          }\n          slice.fill = this.patterns.next();\n          if ($type.hasValue(slice.fillOpacity)) {\n            slice.fill.backgroundOpacity = slice.fillOpacity;\n          }\n          if (slice.stroke instanceof Color) {\n            slice.fill.stroke = slice.stroke;\n            slice.fill.fill = slice.stroke;\n          }\n        } else {\n          slice.fill = this.colors.next();\n        }\n      } else {\n        this.colors.currentStep += this.colors.step;\n      }\n      if (slice.stroke == undefined) {\n        slice.stroke = slice.fill;\n      }\n    }\n    // do this at the end, otherwise bullets won't be positioned properly\n    _super.prototype.validateDataElement.call(this, dataItem);\n    if (slice) {\n      dataItem.bullets.each(function (key, bullet) {\n        if (bullet.fill == undefined) {\n          bullet.fill = slice.fill;\n        }\n        if (bullet.stroke == undefined) {\n          bullet.stroke = slice.stroke;\n        }\n      });\n    }\n    this.updateLegendValue(dataItem);\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PercentSeries.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n    if (this.chart) {\n      this.chart.feedLegend();\n    }\n  };\n  /**\r\n   * Arranges slice labels according to position settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItems  Data items\r\n   */\n  PercentSeries.prototype.arrangeLabels = function (dataItems) {\n    for (var i = 0, len = dataItems.length; i < len; i++) {\n      var dataItem = dataItems[i];\n      var label = dataItem.label;\n      if (label) {\n        if (label.invalid) {\n          label.validate();\n        }\n        var lh = label.measuredHeight;\n        if (!label.visible) {\n          lh = 0;\n        }\n        if (label.pixelY - lh / 2 < -this.maxHeight / 2) {\n          label.y = -this.maxHeight / 2 + lh / 2;\n        }\n        var nextLabel = this.getNextLabel(i + 1, dataItems);\n        var bottom = label.pixelY + lh / 2;\n        if (nextLabel) {\n          if (nextLabel.invalid) {\n            nextLabel.validate();\n          }\n          var nextLabelHeight = nextLabel.measuredHeight;\n          if (!nextLabel.visible) {\n            nextLabelHeight = 0;\n          }\n          var nextLabelY = nextLabel.pixelY;\n          if (nextLabelY == null) {\n            nextLabelY = 0;\n          }\n          if (nextLabelY - nextLabelHeight / 2 < bottom) {\n            nextLabel.y = bottom + nextLabelHeight / 2;\n          }\n        }\n      }\n    }\n  };\n  PercentSeries.prototype.arrangeLabels2 = function (dataItems) {\n    var previousTop = this.maxHeight / 2;\n    for (var i = dataItems.length - 1; i >= 0; i--) {\n      var dataItem = dataItems[i];\n      var label = dataItem.label;\n      if (label) {\n        if (label.invalid) {\n          label.validate();\n        }\n        var lh = label.measuredHeight;\n        if (!label.visible) {\n          lh = 0;\n        }\n        //if (i == dataItems.length - 1) {\n        //previousTop += lh / 2;\n        //}\n        if (label.pixelY + lh / 2 > previousTop) {\n          label.y = previousTop - lh / 2;\n          previousTop = label.y - lh / 2;\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns the next label according to `index`.\r\n   *\r\n   * @param index      Current index\r\n   * @param dataItems  Data items\r\n   * @return Label element\r\n   */\n  PercentSeries.prototype.getNextLabel = function (index, dataItems) {\n    if (dataItems.length >= index) {\n      var nextDataItem = dataItems[index];\n      if (nextDataItem) {\n        if (nextDataItem.label) {\n          if (nextDataItem.visible) {\n            return nextDataItem.label;\n          } else {\n            return this.getNextLabel(index + 1, dataItems);\n          }\n        } else {\n          return this.getNextLabel(index + 1, dataItems);\n        }\n      }\n    }\n  };\n  Object.defineProperty(PercentSeries.prototype, \"colors\", {\n    /**\r\n     * @return Color set\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"colors\");\n    },\n    /**\r\n     * A color set to be used for slices.\r\n     *\r\n     * For each new subsequent slice, the chart will assign the next color in\r\n     * this set.\r\n     *\r\n     * @param value  Color set\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"patterns\", {\n    /**\r\n     * @return Pattern set\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"patterns\");\n    },\n    /**\r\n     * A [[PatternSet]] to use when creating patterned fills for slices.\r\n     *\r\n     * @since 4.7.5\r\n     * @param value  Pattern set\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"patterns\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker    Container\r\n   * @param dataItem  Data item\r\n   */\n  PercentSeries.prototype.createLegendMarker = function (marker, dataItem) {\n    $iter.each(marker.children.iterator(), function (child) {\n      var slice = dataItem.slice;\n      child.defaultState.properties.fill = slice.fill;\n      child.defaultState.properties.stroke = slice.stroke;\n      child.defaultState.properties.fillOpacity = slice.fillOpacity;\n      child.defaultState.properties.strokeOpacity = slice.strokeOpacity;\n      child.fill = slice.fill;\n      child.stroke = slice.stroke;\n      child.fillOpacity = slice.fillOpacity;\n      child.strokeOpacity = slice.strokeOpacity;\n      if (child.fill == undefined) {\n        child.__disabled = true;\n      }\n      var legendDataItem = marker.dataItem;\n      legendDataItem.color = slice.fill;\n      legendDataItem.colorOrig = slice.fill;\n      child.addDisposer(slice.events.on(\"propertychanged\", function (ev) {\n        if (ev.property == \"fill\") {\n          child.__disabled = false;\n          if (!child.isActive) {\n            child.fill = slice.fill;\n          }\n          child.defaultState.properties.fill = slice.fill;\n          legendDataItem.color = slice.fill;\n          legendDataItem.colorOrig = slice.fill;\n        }\n        if (ev.property == \"stroke\") {\n          if (!child.isActive) {\n            child.stroke = slice.stroke;\n          }\n          child.defaultState.properties.stroke = slice.stroke;\n        }\n        if (ev.property == \"strokeOpacity\") {\n          if (!child.isActive) {\n            child.strokeOpacity = slice.strokeOpacity;\n          }\n          child.defaultState.properties.strokeOpacity = slice.strokeOpacity;\n        }\n      }, undefined, false));\n    });\n  };\n  /**\r\n   * Repositions bullets when slice's size changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  PercentSeries.prototype.handleSliceScale = function (event) {\n    var _this = this;\n    var slice = event.target;\n    var dataItem = slice.dataItem;\n    if (dataItem && dataItem.bullets) {\n      $iter.each(dataItem.bullets.iterator(), function (a) {\n        var value = a[1];\n        _this.positionBullet(value);\n      });\n    }\n  };\n  /**\r\n   * Repositions bullet and labels when slice moves.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  PercentSeries.prototype.handleSliceMove = function (event) {};\n  /**\r\n   * Copies all properties from another instance of [[PercentSeries]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  PercentSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.slices.template.copyFrom(source.slices.template);\n    this.labels.template.copyFrom(source.labels.template);\n    this.ticks.template.copyFrom(source.ticks.template);\n    this.colors = source.colors.clone();\n  };\n  Object.defineProperty(PercentSeries.prototype, \"alignLabels\", {\n    /**\r\n     * @return Align labels?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"alignLabels\");\n    },\n    /**\r\n     * Align labels into nice vertical columns?\r\n     *\r\n     * This will ensure that labels never overlap with each other.\r\n     *\r\n     * Arranging labels into columns makes them more readble, and better user\r\n     * experience.\r\n     *\r\n     * If set to `false` labels will be positioned at `label.radius` distance,\r\n     * and may, in some cases, overlap.\r\n     *\r\n     * @default true\r\n     * @param value  Align labels?\r\n     */\n    set: function set(value) {\n      this.setAlignLabels(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  PercentSeries.prototype.setAlignLabels = function (value) {\n    this.setPropertyValue(\"alignLabels\", value, true);\n  };\n  Object.defineProperty(PercentSeries.prototype, \"ignoreZeroValues\", {\n    /**\r\n     * @return Ignore zero values\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"ignoreZeroValues\");\n    },\n    /**\r\n     * If set to `true` the chart will not show slices with zero values.\r\n     *\r\n     * @default false\r\n     * @since 4.7.9\r\n     * @param  value  Ignore zero values\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"ignoreZeroValues\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  PercentSeries.prototype.updateLegendValue = function (dataItem) {\n    if (dataItem) {\n      var legendDataItem = dataItem.legendDataItem;\n      var legendSettings = dataItem.legendSettings;\n      if (legendDataItem && legendSettings) {\n        if (legendSettings) {\n          if (legendSettings.labelText) {\n            legendDataItem.label.text = legendSettings.labelText;\n          }\n          if (legendSettings.itemLabelText) {\n            legendDataItem.label.text = legendSettings.itemLabelText;\n          }\n          if (legendSettings.valueText) {\n            legendDataItem.valueLabel.text = legendSettings.valueText;\n          }\n          if (legendSettings.itemValueText) {\n            legendDataItem.valueLabel.text = legendSettings.itemValueText;\n          }\n        }\n      }\n    }\n  };\n  return PercentSeries;\n}(Series);\nexport { PercentSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Disable labels and ticks.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof PercentSeries) {\n      var state = target.states.create(stateId);\n      var labelState = target.labels.template.states.create(stateId);\n      labelState.properties.disabled = true;\n      var tickState = target.ticks.template.states.create(stateId);\n      tickState.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"names":["Series","SeriesDataItem","Sprite","Label","Color","Tick","ListTemplate","ListDisposer","Container","ColorSet","registry","$iter","$ease","$type","Disposer","defaultRules","ResponsiveBreakpoints","PercentSeriesDataItem","_super","__extends","_this","call","className","applyTheme","prototype","uidAttr","slice","hide","duration","delay","toValue","fields","setVisibility","value","noChangeValues","setWorkingValue","values","show","Object","defineProperty","get","properties","category","set","setProperty","createLegendMarker","marker","component","_legendDataItem","label","dataItem","valueLabel","_tick","tick_1","ticks","create","addSprite","_disposers","push","parent","ticksContainer","removeValue","visible","_label","label_1","labels","labelsContainer","_slice","component_1","slice_1","slices","slicesContainer","itemsFocusable","hasValue","role","focusable","events","on","ev","readerTitle","populateString","itemReaderText","undefined","hoverable","hiddenInLegend","PercentSeries","_addAllDataItems","colors","step","isMeasured","calculatePercent","createChild","shouldClone","layout","alignLabels","bulletsContainer","toFront","skipFocusThreshold","defaultState","transitionEasing","sinOut","createSlice","createTick","createLabel","_slices","applyOnClones","initSlice","_ticks","tick","initTick","_labels","initLabel","createDataItem","text","padding","validateDataItems","reset","patterns","validateDataElement","fill","stroke","next","fillOpacity","backgroundOpacity","currentStep","bullets","each","key","bullet","updateLegendValue","validateData","chart","feedLegend","arrangeLabels","dataItems","i","len","length","invalid","validate","lh","measuredHeight","pixelY","maxHeight","y","nextLabel","getNextLabel","bottom","nextLabelHeight","nextLabelY","arrangeLabels2","previousTop","index","nextDataItem","getPropertyValue","setPropertyValue","children","iterator","child","strokeOpacity","__disabled","legendDataItem","color","colorOrig","addDisposer","property","isActive","handleSliceScale","event","target","a","positionBullet","handleSliceMove","copyFrom","source","template","clone","setAlignLabels","legendSettings","labelText","itemLabelText","valueText","itemValueText","registeredClasses","relevant","maybeXS","state","stateId","states","labelState","disabled","tickState"],"sources":["../../../../../src/.internal/charts/series/PercentSeries.ts"],"sourcesContent":["/**\r\n * Defines Percent Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PercentChart } from \"../types/PercentChart\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): this[\"_tick\"] {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet tick = this.component.ticks.create();\r\n\t\t\tthis._tick = tick;\r\n\t\t\tthis.addSprite(tick);\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\ttick.parent = this.component.ticksContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.ticks.removeValue(tick);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\r\n\t\t\ttick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet slice = component.slices.create();\r\n\t\t\tthis.addSprite(slice);\r\n\r\n\t\t\tthis._slice = slice;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tslice.parent = component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.slices.removeValue(slice);\r\n\t\t\t}));\r\n\r\n\r\n\t\t\tslice.visible = this.visible;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesProperties extends ISeriesProperties {\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Pattern set to apply to fills.\r\n\t * \r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\talignLabels?: boolean;\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t */\r\n\tignoreZeroValues?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentSeriesAdapters extends ISeriesAdapters, IPercentSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class PercentSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the slice elements for the series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * Defines type of the tick elements for the series.\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: PercentChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPercentSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PercentSeriesDataItem;\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _slices: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tick\"]>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PercentSeries\";\r\n\r\n\t\tthis._addAllDataItems = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.alignLabels = false;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#p')}\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a slice element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Sprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a tick element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new Tick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the slices. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"stroke\": \"#fff\",\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Slices\r\n\t */\r\n\tpublic get slices(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._slices) {\r\n\t\t\tlet slice = this.createSlice();\r\n\r\n\t\t\tslice.applyOnClones = true;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tthis.initSlice(slice);\r\n\r\n\t\t\tthis._slices = new ListTemplate(slice);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._slices));\r\n\t\t}\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of tick elements for the series. Ticks connect slice to its label.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"ticks\": {\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Ticks\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tick\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\tthis.initTick(tick);\r\n\r\n\t\t\tthis._ticks = new ListTemplate(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice label elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the labels. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"stroke\": \"#c00\",\r\n\t *       \"fontSize\": 20\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Labels\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tthis.initLabel(label);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PercentSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param sliceType  Type of the slice element\r\n\t * @return Slice\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\r\n\t}\r\n\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0p')}\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\tprotected initTick(label: this[\"_tick\"]) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\tthis.colors.reset();\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.reset();\r\n\t\t}\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tif (slice) {\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(slice.stroke)) {\r\n\t\t\t\t\t\tslice.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tslice.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(slice.fillOpacity)) {\r\n\t\t\t\t\t\tslice.fill.backgroundOpacity = slice.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (slice.stroke instanceof Color) {\r\n\t\t\t\t\t\tslice.fill.stroke = slice.stroke;\r\n\t\t\t\t\t\tslice.fill.fill = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.colors.currentStep += this.colors.step;\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = slice.fill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (slice) {\r\n\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\tif (bullet.fill == undefined) {\r\n\t\t\t\t\tbullet.fill = slice.fill;\r\n\t\t\t\t}\r\n\t\t\t\tif (bullet.stroke == undefined) {\r\n\t\t\t\t\tbullet.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i = 0, len = dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n\t\t\t\t\tlabel.y = -this.maxHeight / 2 + lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nextLabel = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\tlet bottom: number = label.pixelY + lh / 2;\r\n\r\n\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\tif (nextLabel.invalid) {\r\n\t\t\t\t\t\tnextLabel.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nextLabelHeight = nextLabel.measuredHeight;\r\n\t\t\t\t\tif (!nextLabel.visible) {\r\n\t\t\t\t\t\tnextLabelHeight = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nextLabelY = nextLabel.pixelY;\r\n\t\t\t\t\tif (nextLabelY == null) {\r\n\t\t\t\t\t\tnextLabelY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (nextLabelY - nextLabelHeight / 2 < bottom) {\r\n\t\t\t\t\t\tnextLabel.y = bottom + nextLabelHeight / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected arrangeLabels2(dataItems: this[\"_dataItem\"][]): void {\r\n\r\n\t\tlet previousTop = this.maxHeight / 2;\r\n\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (i == dataItems.length - 1) {\r\n\t\t\t\t//previousTop += lh / 2;\r\n\t\t\t\t//}\r\n\r\n\t\t\t\tif (label.pixelY + lh / 2 > previousTop) {\r\n\t\t\t\t\tlabel.y = previousTop - lh / 2;\r\n\t\t\t\t\tpreviousTop = label.y - lh / 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param index      Current index\r\n\t * @param dataItems  Data items\r\n\t * @return Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): this[\"_label\"] {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\tif (nextDataItem.visible) {\r\n\t\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: this[\"_slice\"] = dataItem.slice;\r\n\r\n\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tchild.fill = slice.fill;\r\n\t\t\tchild.stroke = slice.stroke;\r\n\t\t\tchild.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\r\n\t\t\tchild.addDisposer(slice.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"strokeOpacity\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: this[\"_slice\"] = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\tif (dataItem && dataItem.bullets) {\r\n\t\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\t\tlet value = a[1];\r\n\t\t\t\tthis.positionBullet(value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PercentSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.colors = source.colors.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setAlignLabels(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t * @param  value  Ignore zero values\r\n\t */\r\n\tpublic set ignoreZeroValues(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore zero values\r\n\t */\r\n\tpublic get ignoreZeroValues(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreZeroValues\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tif (dataItem) {\r\n\t\t\tlet legendDataItem = dataItem.legendDataItem;\r\n\t\t\tlet legendSettings = dataItem.legendSettings;\r\n\r\n\t\t\tif (legendDataItem && legendSettings) {\r\n\r\n\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof PercentSeries) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\r\n\t\t\tlet labelState = target.labels.template.states.create(stateId);\r\n\t\t\tlabelState.properties.disabled = true;\r\n\r\n\t\t\tlet tickState = target.ticks.template.states.create(stateId);\r\n\t\t\ttickState.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,EAAEC,cAAc,QAA8E,UAAU;AAEvH,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,KAAK,QAAQ,2BAA2B;AACjD,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,YAAY,EAAEC,YAAY,QAAQ,uBAAuB;AAClE,SAASC,SAAS,QAAQ,sBAAsB;AAGhD,SAASC,QAAQ,QAAQ,2BAA2B;AAEpD,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,YAAY,EAAEC,qBAAqB,QAAQ,6BAA6B;AAIjF;;;;;;AAOA;AAEA;;;;;AAKA,IAAAC,qBAAA,0BAAAC,MAAA;EAA2CC,SAAA,CAAAF,qBAAA,EAAAC,MAAA;EAsC1C;;;EAGA,SAAAD,sBAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,uBAAuB;IAExCF,KAAI,CAACG,UAAU,EAAE;;EAClB;EAGA;;;;;EAKON,qBAAA,CAAAO,SAAA,CAAAC,OAAO,GAAd;IACC,OAAO,IAAI,CAACC,KAAK,CAACD,OAAO,EAAE;EAC5B,CAAC;EAED;;;;;;;;EAQOR,qBAAA,CAAAO,SAAA,CAAAG,IAAI,GAAX,UAAYC,QAAiB,EAAEC,KAAc,EAAEC,OAAgB,EAAEC,MAAiB;IACjF,IAAI,CAACA,MAAM,EAAE;MACZA,MAAM,GAAG,CAAC,OAAO,CAAC;;IAGnB,OAAOb,MAAA,CAAAM,SAAA,CAAMG,IAAI,CAAAN,IAAA,OAACO,QAAQ,EAAEC,KAAK,EAAE,CAAC,EAAEE,MAAM,CAAC;EAC9C,CAAC;EAED;;;;;EAKOd,qBAAA,CAAAO,SAAA,CAAAQ,aAAa,GAApB,UAAqBC,KAAc,EAAEC,cAAwB;IAC5D,IAAI,CAACA,cAAc,EAAE;MACpB,IAAID,KAAK,EAAE;QACV,IAAI,CAACE,eAAe,CAAC,OAAO,EAAE,IAAI,CAACC,MAAM,CAAC,OAAO,CAAC,CAACH,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;OAC/D,MACI;QACJ,IAAI,CAACE,eAAe,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;;IAIxCjB,MAAA,CAAAM,SAAA,CAAMQ,aAAa,CAAAX,IAAA,OAACY,KAAK,EAAEC,cAAc,CAAC;EAC3C,CAAC;EAED;;;;;;;EAOOjB,qBAAA,CAAAO,SAAA,CAAAa,IAAI,GAAX,UAAYT,QAAiB,EAAEC,KAAc,EAAEE,MAAiB;IAC/D,IAAI,CAACA,MAAM,EAAE;MACZA,MAAM,GAAG,CAAC,OAAO,CAAC;;IAEnB,OAAOb,MAAA,CAAAM,SAAA,CAAMa,IAAI,CAAAhB,IAAA,OAACO,QAAQ,EAAEC,KAAK,EAAEE,MAAM,CAAC;EAC3C,CAAC;EAODO,MAAA,CAAAC,cAAA,CAAWtB,qBAAA,CAAAO,SAAA,YAAQ;IAInB;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACC,UAAU,CAACC,QAAQ;IAChC,CAAC;IAdD;;;;;SAKA,SAAAC,IAAoBV,KAAa;MAChC,IAAI,CAACW,WAAW,CAAC,UAAU,EAAEX,KAAK,CAAC;IACpC,CAAC;;;;EAUD;;;;;;EAMOhB,qBAAA,CAAAO,SAAA,CAAAqB,kBAAkB,GAAzB,UAA0BC,MAAiB;IAC1C,IAAI,CAACC,SAAS,CAACF,kBAAkB,CAACC,MAAM,EAAE,IAAI,CAAC;EAChD,CAAC;EAODR,MAAA,CAAAC,cAAA,CAAWtB,qBAAA,CAAAO,SAAA,kBAAc;IAUzB;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACQ,eAAe;IAC5B,CAAC;IApBD;;;;;SAKA,SAAAL,IAA0BV,KAAqB;MAC9C,IAAI,CAACe,eAAe,GAAGf,KAAK;MAC5B,IAAIA,KAAK,CAACgB,KAAK,EAAE;QAChBhB,KAAK,CAACgB,KAAK,CAACC,QAAQ,GAAG,IAAI;;MAE5B,IAAIjB,KAAK,CAACkB,UAAU,EAAE;QACrBlB,KAAK,CAACkB,UAAU,CAACD,QAAQ,GAAG,IAAI;;IAElC,CAAC;;;;EAeDZ,MAAA,CAAAC,cAAA,CAAWtB,qBAAA,CAAAO,SAAA,QAAI;IANf;;;;;;SAMA,SAAAgB,IAAA;MAAA,IAAApB,KAAA;MACC,IAAI,CAAC,IAAI,CAACgC,KAAK,EAAE;QAChB,IAAIC,MAAI,GAAG,IAAI,CAACN,SAAS,CAACO,KAAK,CAACC,MAAM,EAAE;QACxC,IAAI,CAACH,KAAK,GAAGC,MAAI;QACjB,IAAI,CAACG,SAAS,CAACH,MAAI,CAAC;QACpB,IAAI,CAACI,UAAU,CAACC,IAAI,CAACL,MAAI,CAAC;QAC1BA,MAAI,CAACM,MAAM,GAAG,IAAI,CAACZ,SAAS,CAACa,cAAc;QAE3C,IAAI,CAACH,UAAU,CAACC,IAAI,CAAC,IAAI5C,QAAQ,CAAC;UACjC,IAAIM,KAAI,CAAC2B,SAAS,EAAE;YACnB3B,KAAI,CAAC2B,SAAS,CAACO,KAAK,CAACO,WAAW,CAACR,MAAI,CAAC;;QAExC,CAAC,CAAC,CAAC;QAGHA,MAAI,CAACS,OAAO,GAAG,IAAI,CAACA,OAAO;;MAE5B,OAAO,IAAI,CAACV,KAAK;IAClB,CAAC;;;;EAQDd,MAAA,CAAAC,cAAA,CAAWtB,qBAAA,CAAAO,SAAA,SAAK;IANhB;;;;;;SAMA,SAAAgB,IAAA;MAAA,IAAApB,KAAA;MACC,IAAI,CAAC,IAAI,CAAC2C,MAAM,EAAE;QACjB,IAAIC,OAAK,GAAG,IAAI,CAACjB,SAAS,CAACkB,MAAM,CAACV,MAAM,EAAE;QAC1C,IAAI,CAACC,SAAS,CAACQ,OAAK,CAAC;QACrB,IAAI,CAACD,MAAM,GAAGC,OAAK;QAEnB,IAAI,CAACP,UAAU,CAACC,IAAI,CAACM,OAAK,CAAC;QAC3BA,OAAK,CAACL,MAAM,GAAG,IAAI,CAACZ,SAAS,CAACmB,eAAe;QAE7C,IAAI,CAACT,UAAU,CAACC,IAAI,CAAC,IAAI5C,QAAQ,CAAC;UACjC,IAAIM,KAAI,CAAC2B,SAAS,EAAE;YACnB3B,KAAI,CAAC2B,SAAS,CAACkB,MAAM,CAACJ,WAAW,CAACG,OAAK,CAAC;;QAE1C,CAAC,CAAC,CAAC;QAEHA,OAAK,CAACF,OAAO,GAAG,IAAI,CAACA,OAAO;;MAE7B,OAAO,IAAI,CAACC,MAAM;IACnB,CAAC;;;;EAQDzB,MAAA,CAAAC,cAAA,CAAWtB,qBAAA,CAAAO,SAAA,SAAK;IANhB;;;;;;SAMA,SAAAgB,IAAA;MAAA,IAAApB,KAAA;MACC,IAAI,CAAC,IAAI,CAAC+C,MAAM,EAAE;QAEjB,IAAIC,WAAS,GAAG,IAAI,CAACrB,SAAS;QAE9B,IAAIsB,OAAK,GAAGD,WAAS,CAACE,MAAM,CAACf,MAAM,EAAE;QACrC,IAAI,CAACC,SAAS,CAACa,OAAK,CAAC;QAErB,IAAI,CAACF,MAAM,GAAGE,OAAK;QACnB,IAAI,CAACZ,UAAU,CAACC,IAAI,CAACW,OAAK,CAAC;QAC3BA,OAAK,CAACV,MAAM,GAAGS,WAAS,CAACG,eAAe;QAExC,IAAI,CAACd,UAAU,CAACC,IAAI,CAAC,IAAI5C,QAAQ,CAAC;UACjCsD,WAAS,CAACE,MAAM,CAACT,WAAW,CAACQ,OAAK,CAAC;QACpC,CAAC,CAAC,CAAC;QAGHA,OAAK,CAACP,OAAO,GAAG,IAAI,CAACA,OAAO;QAE5B;QACA,IAAIM,WAAS,CAACI,cAAc,EAAE,EAAE;UAC/B,IAAI,CAAC3D,KAAK,CAAC4D,QAAQ,CAAC,IAAI,CAAC1B,SAAS,CAAC2B,IAAI,CAAC,EAAE;YACzC,IAAI,CAAC3B,SAAS,CAAC2B,IAAI,GAAG,MAAM;;UAE7B,IAAI,CAAC7D,KAAK,CAAC4D,QAAQ,CAACJ,OAAK,CAACK,IAAI,CAAC,EAAE;YAChCL,OAAK,CAACK,IAAI,GAAG,UAAU;;UAExBL,OAAK,CAACM,SAAS,GAAG,IAAI;SACtB,MACI;UACJ,IAAI,CAAC9D,KAAK,CAAC4D,QAAQ,CAAC,IAAI,CAAC1B,SAAS,CAAC2B,IAAI,CAAC,EAAE;YACzC,IAAI,CAAC3B,SAAS,CAAC2B,IAAI,GAAG,MAAM;;UAE7B,IAAI,CAAC7D,KAAK,CAAC4D,QAAQ,CAACJ,OAAK,CAACK,IAAI,CAAC,EAAE;YAChCL,OAAK,CAACK,IAAI,GAAG,UAAU;;UAExBL,OAAK,CAACM,SAAS,GAAG,KAAK;;QAGxB;QACA,IAAIN,OAAK,CAACM,SAAS,EAAE;UACpBN,OAAK,CAACO,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,UAACC,EAAE;YAC3BT,OAAK,CAACU,WAAW,GAAGX,WAAS,CAACY,cAAc,CAACZ,WAAS,CAACa,cAAc,EAAE7D,KAAI,CAAC;UAC7E,CAAC,EAAE8D,SAAS,EAAE,KAAK,CAAC;UACpBb,OAAK,CAACO,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAACC,EAAE;YAC1BT,OAAK,CAACU,WAAW,GAAG,EAAE;UACvB,CAAC,EAAEG,SAAS,EAAE,KAAK,CAAC;;QAErB,IAAIb,OAAK,CAACc,SAAS,EAAE;UACpBd,OAAK,CAACO,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAACC,EAAE;YAC1BT,OAAK,CAACU,WAAW,GAAGX,WAAS,CAACY,cAAc,CAACZ,WAAS,CAACa,cAAc,EAAE7D,KAAI,CAAC;UAC7E,CAAC,EAAE8D,SAAS,EAAE,KAAK,CAAC;UACpBb,OAAK,CAACO,MAAM,CAACC,EAAE,CAAC,KAAK,EAAE,UAACC,EAAE;YACzBT,OAAK,CAACU,WAAW,GAAG,EAAE;UACvB,CAAC,EAAEG,SAAS,EAAE,KAAK,CAAC;;;MAGtB,OAAO,IAAI,CAACf,MAAM;IACnB,CAAC;;;;EAOD7B,MAAA,CAAAC,cAAA,CAAWtB,qBAAA,CAAAO,SAAA,kBAAc;IAIzB;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACC,UAAU,CAAC2C,cAAc;IACtC,CAAC;IAdD;;;;;SAKA,SAAAzC,IAA0BV,KAAc;MACvC,IAAI,CAACW,WAAW,CAAC,gBAAgB,EAAEX,KAAK,CAAC;IAC1C,CAAC;;;;EAQF,OAAAhB,qBAAC;AAAD,CAAC,CAhS0ChB,cAAc;;AA4WzD;;;;;;AAOA;;;;;;;AAOA,IAAAoF,aAAA,0BAAAnE,MAAA;EAAmCC,SAAA,CAAAkE,aAAA,EAAAnE,MAAA;EAgFlC;;;EAGA,SAAAmE,cAAA;IAAA,IAAAjE,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IAEPD,KAAI,CAACE,SAAS,GAAG,eAAe;IAEhCF,KAAI,CAACkE,gBAAgB,GAAG,KAAK;IAE7BlE,KAAI,CAACmE,MAAM,GAAG,IAAI9E,QAAQ,EAAE;IAC5BW,KAAI,CAACmE,MAAM,CAACC,IAAI,GAAG,CAAC;IACpBpE,KAAI,CAACqE,UAAU,GAAG,IAAI;IACtBrE,KAAI,CAACsE,gBAAgB,GAAG,IAAI;IAE5B,IAAInB,eAAe,GAAGnD,KAAI,CAACuE,WAAW,CAACnF,SAAS,CAAC;IACjD+D,eAAe,CAACqB,WAAW,GAAG,KAAK;IACnCrB,eAAe,CAACkB,UAAU,GAAG,KAAK;IAClCrE,KAAI,CAACmD,eAAe,GAAGA,eAAe;IAEtC,IAAIX,cAAc,GAAGxC,KAAI,CAACuE,WAAW,CAACnF,SAAS,CAAC;IAChDoD,cAAc,CAACgC,WAAW,GAAG,KAAK;IAClChC,cAAc,CAAC6B,UAAU,GAAG,KAAK;IACjC7B,cAAc,CAACiC,MAAM,GAAG,MAAM;IAC9BzE,KAAI,CAACwC,cAAc,GAAGA,cAAc;IAEpC,IAAIM,eAAe,GAAG9C,KAAI,CAACuE,WAAW,CAACnF,SAAS,CAAC;IACjD0D,eAAe,CAAC0B,WAAW,GAAG,KAAK;IACnC1B,eAAe,CAACuB,UAAU,GAAG,KAAK;IAClCvB,eAAe,CAAC2B,MAAM,GAAG,MAAM;IAC/BzE,KAAI,CAAC8C,eAAe,GAAGA,eAAe;IAEtC9C,KAAI,CAAC0E,WAAW,GAAG,KAAK;IAExB1E,KAAI,CAAC2E,gBAAgB,CAACC,OAAO,EAAE;IAE/B;IACA5E,KAAI,CAAC6E,kBAAkB,GAAG,EAAE;IAE5B,IAAIC,YAAY,GAAG9E,KAAI,CAAC8E,YAAY;IACpCA,YAAY,CAACC,gBAAgB,GAAGvF,KAAK,CAACwF,MAAM;IAE5C;IACAhF,KAAI,CAAC6D,cAAc,GAAG,kDAAkD;IAExE7D,KAAI,CAACG,UAAU,EAAE;;EAClB;EAEA;;;;;EAKU8D,aAAA,CAAA7D,SAAA,CAAA6E,WAAW,GAArB;IACC,OAAO,IAAInG,MAAM,EAAE;EACpB,CAAC;EAED;;;;;EAKUmF,aAAA,CAAA7D,SAAA,CAAA8E,UAAU,GAApB;IACC,OAAO,IAAIjG,IAAI,EAAE;EAClB,CAAC;EAED;;;;;EAKUgF,aAAA,CAAA7D,SAAA,CAAA+E,WAAW,GAArB;IACC,OAAO,IAAIpG,KAAK,EAAE;EACnB,CAAC;EA+BDmC,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,UAAM;IA7BjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6BA,SAAAgB,IAAA;MACC,IAAI,CAAC,IAAI,CAACgE,OAAO,EAAE;QAClB,IAAI9E,KAAK,GAAG,IAAI,CAAC2E,WAAW,EAAE;QAE9B3E,KAAK,CAAC+E,aAAa,GAAG,IAAI;QAC1B,IAAI,CAAChD,UAAU,CAACC,IAAI,CAAChC,KAAK,CAAC;QAC3B,IAAI,CAACgF,SAAS,CAAChF,KAAK,CAAC;QAErB,IAAI,CAAC8E,OAAO,GAAG,IAAIlG,YAAY,CAACoB,KAAK,CAAC;QACtC,IAAI,CAAC+B,UAAU,CAACC,IAAI,CAAC,IAAInD,YAAY,CAAC,IAAI,CAACiG,OAAO,CAAC,CAAC;;MAErD,OAAO,IAAI,CAACA,OAAO;IACpB,CAAC;;;;EA4BDlE,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,SAAK;IA1BhB;;;;;;;;;;;;;;;;;;;;;;;;;;SA0BA,SAAAgB,IAAA;MACC,IAAI,CAAC,IAAI,CAACmE,MAAM,EAAE;QACjB,IAAIC,IAAI,GAAG,IAAI,CAACN,UAAU,EAAE;QAC5BM,IAAI,CAACH,aAAa,GAAG,IAAI;QACzB,IAAI,CAAChD,UAAU,CAACC,IAAI,CAACkD,IAAI,CAAC;QAC1B,IAAI,CAACC,QAAQ,CAACD,IAAI,CAAC;QAEnB,IAAI,CAACD,MAAM,GAAG,IAAIrG,YAAY,CAACsG,IAAI,CAAC;QACpC,IAAI,CAACnD,UAAU,CAACC,IAAI,CAAC,IAAInD,YAAY,CAAC,IAAI,CAACoG,MAAM,CAAC,CAAC;;MAEpD,OAAO,IAAI,CAACA,MAAM;IACnB,CAAC;;;;EA+BDrE,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,UAAM;IA7BjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6BA,SAAAgB,IAAA;MACC,IAAI,CAAC,IAAI,CAACsE,OAAO,EAAE;QAClB,IAAI7D,KAAK,GAAG,IAAI,CAACsD,WAAW,EAAE;QAC9BtD,KAAK,CAACwD,aAAa,GAAG,IAAI;QAC1B,IAAI,CAAChD,UAAU,CAACC,IAAI,CAACT,KAAK,CAAC;QAC3B,IAAI,CAAC8D,SAAS,CAAC9D,KAAK,CAAC;QAErB,IAAI,CAAC6D,OAAO,GAAG,IAAIxG,YAAY,CAAC2C,KAAK,CAAC;QACtC,IAAI,CAACQ,UAAU,CAACC,IAAI,CAAC,IAAInD,YAAY,CAAC,IAAI,CAACuG,OAAO,CAAC,CAAC;;MAErD,OAAO,IAAI,CAACA,OAAO;IACpB,CAAC;;;;EAED;;;;;;EAMUzB,aAAA,CAAA7D,SAAA,CAAAwF,cAAc,GAAxB;IACC,OAAO,IAAI/F,qBAAqB,EAAE;EACnC,CAAC;EAED;;;;;;EAMUoE,aAAA,CAAA7D,SAAA,CAAAkF,SAAS,GAAnB,UAAoBhF,KAAqB,GAEzC,CAAC;EAES2D,aAAA,CAAA7D,SAAA,CAAAuF,SAAS,GAAnB,UAAoB9D,KAAqB;IACxCA,KAAK,CAACgE,IAAI,GAAG,kDAAkD;IAC/DhE,KAAK,CAACwC,UAAU,GAAG,KAAK;IACxBxC,KAAK,CAACiE,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1B,CAAC;EAES7B,aAAA,CAAA7D,SAAA,CAAAqF,QAAQ,GAAlB,UAAmB5D,KAAoB,GAEvC,CAAC;EAED;;;;;EAKOoC,aAAA,CAAA7D,SAAA,CAAA2F,iBAAiB,GAAxB;IACC,IAAI,CAAC5B,MAAM,CAAC6B,KAAK,EAAE;IACnB,IAAI,IAAI,CAACC,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,CAACD,KAAK,EAAE;;IAEtBlG,MAAA,CAAAM,SAAA,CAAM2F,iBAAiB,CAAA9F,IAAA,MAAE;EAC1B,CAAC;EAED;;;;;;EAMOgE,aAAA,CAAA7D,SAAA,CAAA8F,mBAAmB,GAA1B,UAA2BpE,QAA2B;IAErD,IAAIxB,KAAK,GAAGwB,QAAQ,CAACxB,KAAK;IAE1B,IAAIA,KAAK,EAAE;MACV,IAAIA,KAAK,CAAC6F,IAAI,IAAIrC,SAAS,EAAE;QAC5B,IAAI,IAAI,CAACmC,QAAQ,EAAE;UAClB,IAAI,CAACxG,KAAK,CAAC4D,QAAQ,CAAC/C,KAAK,CAAC8F,MAAM,CAAC,EAAE;YAClC9F,KAAK,CAAC8F,MAAM,GAAG,IAAI,CAACjC,MAAM,CAACkC,IAAI,EAAE;;UAElC/F,KAAK,CAAC6F,IAAI,GAAG,IAAI,CAACF,QAAQ,CAACI,IAAI,EAAE;UACjC,IAAI5G,KAAK,CAAC4D,QAAQ,CAAC/C,KAAK,CAACgG,WAAW,CAAC,EAAE;YACtChG,KAAK,CAAC6F,IAAI,CAACI,iBAAiB,GAAGjG,KAAK,CAACgG,WAAW;;UAEjD,IAAIhG,KAAK,CAAC8F,MAAM,YAAYpH,KAAK,EAAE;YAClCsB,KAAK,CAAC6F,IAAI,CAACC,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;YAChC9F,KAAK,CAAC6F,IAAI,CAACA,IAAI,GAAG7F,KAAK,CAAC8F,MAAM;;SAE/B,MACI;UACJ9F,KAAK,CAAC6F,IAAI,GAAG,IAAI,CAAChC,MAAM,CAACkC,IAAI,EAAE;;OAEhC,MACI;QACJ,IAAI,CAAClC,MAAM,CAACqC,WAAW,IAAI,IAAI,CAACrC,MAAM,CAACC,IAAI;;MAG5C,IAAI9D,KAAK,CAAC8F,MAAM,IAAItC,SAAS,EAAE;QAC9BxD,KAAK,CAAC8F,MAAM,GAAG9F,KAAK,CAAC6F,IAAI;;;IAI3B;IACArG,MAAA,CAAAM,SAAA,CAAM8F,mBAAmB,CAAAjG,IAAA,OAAC6B,QAAQ,CAAC;IAEnC,IAAIxB,KAAK,EAAE;MACVwB,QAAQ,CAAC2E,OAAO,CAACC,IAAI,CAAC,UAACC,GAAG,EAAEC,MAAM;QACjC,IAAIA,MAAM,CAACT,IAAI,IAAIrC,SAAS,EAAE;UAC7B8C,MAAM,CAACT,IAAI,GAAG7F,KAAK,CAAC6F,IAAI;;QAEzB,IAAIS,MAAM,CAACR,MAAM,IAAItC,SAAS,EAAE;UAC/B8C,MAAM,CAACR,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;;MAE9B,CAAC,CAAC;;IAGH,IAAI,CAACS,iBAAiB,CAAC/E,QAAQ,CAAC;EACjC,CAAC;EAED;;;;;EAKOmC,aAAA,CAAA7D,SAAA,CAAA0G,YAAY,GAAnB;IACChH,MAAA,CAAAM,SAAA,CAAM0G,YAAY,CAAA7G,IAAA,MAAE;IACpB,IAAI,IAAI,CAAC8G,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAACC,UAAU,EAAE;;EAEzB,CAAC;EAED;;;;;;EAMU/C,aAAA,CAAA7D,SAAA,CAAA6G,aAAa,GAAvB,UAAwBC,SAA8B;IACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGF,SAAS,CAACG,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACrD,IAAIrF,QAAQ,GAAsBoF,SAAS,CAACC,CAAC,CAAC;MAE9C,IAAItF,KAAK,GAAGC,QAAQ,CAACD,KAAK;MAE1B,IAAIA,KAAK,EAAE;QAEV,IAAIA,KAAK,CAACyF,OAAO,EAAE;UAClBzF,KAAK,CAAC0F,QAAQ,EAAE;;QAGjB,IAAIC,EAAE,GAAG3F,KAAK,CAAC4F,cAAc;QAC7B,IAAI,CAAC5F,KAAK,CAACa,OAAO,EAAE;UACnB8E,EAAE,GAAG,CAAC;;QAGP,IAAI3F,KAAK,CAAC6F,MAAM,GAAGF,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAACG,SAAS,GAAG,CAAC,EAAE;UAChD9F,KAAK,CAAC+F,CAAC,GAAG,CAAC,IAAI,CAACD,SAAS,GAAG,CAAC,GAAGH,EAAE,GAAG,CAAC;;QAGvC,IAAIK,SAAS,GAAG,IAAI,CAACC,YAAY,CAACX,CAAC,GAAG,CAAC,EAAED,SAAS,CAAC;QAEnD,IAAIa,MAAM,GAAWlG,KAAK,CAAC6F,MAAM,GAAGF,EAAE,GAAG,CAAC;QAE1C,IAAIK,SAAS,EAAE;UACd,IAAIA,SAAS,CAACP,OAAO,EAAE;YACtBO,SAAS,CAACN,QAAQ,EAAE;;UAGrB,IAAIS,eAAe,GAAGH,SAAS,CAACJ,cAAc;UAC9C,IAAI,CAACI,SAAS,CAACnF,OAAO,EAAE;YACvBsF,eAAe,GAAG,CAAC;;UAGpB,IAAIC,UAAU,GAAGJ,SAAS,CAACH,MAAM;UACjC,IAAIO,UAAU,IAAI,IAAI,EAAE;YACvBA,UAAU,GAAG,CAAC;;UAGf,IAAIA,UAAU,GAAGD,eAAe,GAAG,CAAC,GAAGD,MAAM,EAAE;YAC9CF,SAAS,CAACD,CAAC,GAAGG,MAAM,GAAGC,eAAe,GAAG,CAAC;;;;;EAK/C,CAAC;EAGS/D,aAAA,CAAA7D,SAAA,CAAA8H,cAAc,GAAxB,UAAyBhB,SAA8B;IAEtD,IAAIiB,WAAW,GAAG,IAAI,CAACR,SAAS,GAAG,CAAC;IAEpC,KAAK,IAAIR,CAAC,GAAGD,SAAS,CAACG,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/C,IAAIrF,QAAQ,GAAsBoF,SAAS,CAACC,CAAC,CAAC;MAE9C,IAAItF,KAAK,GAAGC,QAAQ,CAACD,KAAK;MAE1B,IAAIA,KAAK,EAAE;QACV,IAAIA,KAAK,CAACyF,OAAO,EAAE;UAClBzF,KAAK,CAAC0F,QAAQ,EAAE;;QAGjB,IAAIC,EAAE,GAAG3F,KAAK,CAAC4F,cAAc;QAC7B,IAAI,CAAC5F,KAAK,CAACa,OAAO,EAAE;UACnB8E,EAAE,GAAG,CAAC;;QAGP;QACA;QACA;QAEA,IAAI3F,KAAK,CAAC6F,MAAM,GAAGF,EAAE,GAAG,CAAC,GAAGW,WAAW,EAAE;UACxCtG,KAAK,CAAC+F,CAAC,GAAGO,WAAW,GAAGX,EAAE,GAAG,CAAC;UAC9BW,WAAW,GAAGtG,KAAK,CAAC+F,CAAC,GAAGJ,EAAE,GAAG,CAAC;;;;EAIlC,CAAC;EAED;;;;;;;EAOUvD,aAAA,CAAA7D,SAAA,CAAA0H,YAAY,GAAtB,UAAuBM,KAAa,EAAElB,SAA8B;IACnE,IAAIA,SAAS,CAACG,MAAM,IAAIe,KAAK,EAAE;MAC9B,IAAIC,YAAY,GAAsBnB,SAAS,CAACkB,KAAK,CAAC;MACtD,IAAIC,YAAY,EAAE;QACjB,IAAIA,YAAY,CAACxG,KAAK,EAAE;UACvB,IAAIwG,YAAY,CAAC3F,OAAO,EAAE;YACzB,OAAO2F,YAAY,CAACxG,KAAK;WACzB,MACI;YACJ,OAAO,IAAI,CAACiG,YAAY,CAACM,KAAK,GAAG,CAAC,EAAElB,SAAS,CAAC;;SAE/C,MACI;UACJ,OAAO,IAAI,CAACY,YAAY,CAACM,KAAK,GAAG,CAAC,EAAElB,SAAS,CAAC;;;;EAIlD,CAAC;EAUDhG,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,UAAM;IAIjB;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACkH,gBAAgB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAjBD;;;;;;;;SAQA,SAAA/G,IAAkBV,KAAe;MAChC,IAAI,CAAC0H,gBAAgB,CAAC,QAAQ,EAAE1H,KAAK,EAAE,IAAI,CAAC;IAC7C,CAAC;;;;EAeDK,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,YAAQ;IAInB;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACkH,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IAfD;;;;;;SAMA,SAAA/G,IAAoBV,KAAiB;MACpC,IAAI,CAAC0H,gBAAgB,CAAC,UAAU,EAAE1H,KAAK,EAAE,IAAI,CAAC;IAC/C,CAAC;;;;EASD;;;;;;;;EAQOoD,aAAA,CAAA7D,SAAA,CAAAqB,kBAAkB,GAAzB,UAA0BC,MAAiB,EAAEI,QAA4B;IACxEvC,KAAK,CAACmH,IAAI,CAAChF,MAAM,CAAC8G,QAAQ,CAACC,QAAQ,EAAE,EAAE,UAACC,KAAK;MAC5C,IAAIpI,KAAK,GAAmBwB,QAAQ,CAACxB,KAAK;MAE1CoI,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAAC8E,IAAI,GAAG7F,KAAK,CAAC6F,IAAI;MAC/CuC,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAAC+E,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;MACnDsC,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAACiF,WAAW,GAAGhG,KAAK,CAACgG,WAAW;MAC7DoC,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAACsH,aAAa,GAAGrI,KAAK,CAACqI,aAAa;MAEjED,KAAK,CAACvC,IAAI,GAAG7F,KAAK,CAAC6F,IAAI;MACvBuC,KAAK,CAACtC,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;MAC3BsC,KAAK,CAACpC,WAAW,GAAGhG,KAAK,CAACgG,WAAW;MACrCoC,KAAK,CAACC,aAAa,GAAGrI,KAAK,CAACqI,aAAa;MAEzC,IAAID,KAAK,CAACvC,IAAI,IAAIrC,SAAS,EAAE;QAC5B4E,KAAK,CAACE,UAAU,GAAG,IAAI;;MAGxB,IAAIC,cAAc,GAAmBnH,MAAM,CAACI,QAAQ;MACpD+G,cAAc,CAACC,KAAK,GAAGxI,KAAK,CAAC6F,IAAI;MACjC0C,cAAc,CAACE,SAAS,GAAGzI,KAAK,CAAC6F,IAAI;MAErCuC,KAAK,CAACM,WAAW,CAAC1I,KAAK,CAACkD,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,UAACC,EAAE;QACvD,IAAIA,EAAE,CAACuF,QAAQ,IAAI,MAAM,EAAE;UAE1BP,KAAK,CAACE,UAAU,GAAG,KAAK;UAExB,IAAI,CAACF,KAAK,CAACQ,QAAQ,EAAE;YACpBR,KAAK,CAACvC,IAAI,GAAG7F,KAAK,CAAC6F,IAAI;;UAExBuC,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAAC8E,IAAI,GAAG7F,KAAK,CAAC6F,IAAI;UAC/C0C,cAAc,CAACC,KAAK,GAAGxI,KAAK,CAAC6F,IAAI;UACjC0C,cAAc,CAACE,SAAS,GAAGzI,KAAK,CAAC6F,IAAI;;QAGtC,IAAIzC,EAAE,CAACuF,QAAQ,IAAI,QAAQ,EAAE;UAC5B,IAAI,CAACP,KAAK,CAACQ,QAAQ,EAAE;YACpBR,KAAK,CAACtC,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;;UAE5BsC,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAAC+E,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;;QAGpD,IAAI1C,EAAE,CAACuF,QAAQ,IAAI,eAAe,EAAE;UACnC,IAAI,CAACP,KAAK,CAACQ,QAAQ,EAAE;YACpBR,KAAK,CAACC,aAAa,GAAGrI,KAAK,CAACqI,aAAa;;UAE1CD,KAAK,CAAC5D,YAAY,CAACzD,UAAU,CAACsH,aAAa,GAAGrI,KAAK,CAACqI,aAAa;;MAEnE,CAAC,EAAE7E,SAAS,EAAE,KAAK,CAAC,CAAC;IACtB,CAAC,CAAC;EACH,CAAC;EAED;;;;;;EAMUG,aAAA,CAAA7D,SAAA,CAAA+I,gBAAgB,GAA1B,UAA2BC,KAAgE;IAA3F,IAAApJ,KAAA;IACC,IAAIM,KAAK,GAAmB8I,KAAK,CAACC,MAAM;IACxC,IAAIvH,QAAQ,GAAyCxB,KAAK,CAACwB,QAAQ;IACnE,IAAIA,QAAQ,IAAIA,QAAQ,CAAC2E,OAAO,EAAE;MACjClH,KAAK,CAACmH,IAAI,CAAC5E,QAAQ,CAAC2E,OAAO,CAACgC,QAAQ,EAAE,EAAE,UAACa,CAAC;QACzC,IAAIzI,KAAK,GAAGyI,CAAC,CAAC,CAAC,CAAC;QAChBtJ,KAAI,CAACuJ,cAAc,CAAC1I,KAAK,CAAC;MAC3B,CAAC,CAAC;;EAEJ,CAAC;EAED;;;;;;EAMUoD,aAAA,CAAA7D,SAAA,CAAAoJ,eAAe,GAAzB,UAA0BJ,KAAgE,GAE1F,CAAC;EAED;;;;;EAKOnF,aAAA,CAAA7D,SAAA,CAAAqJ,QAAQ,GAAf,UAAgBC,MAAY;IAC3B5J,MAAA,CAAAM,SAAA,CAAMqJ,QAAQ,CAAAxJ,IAAA,OAACyJ,MAAM,CAAC;IACtB,IAAI,CAACxG,MAAM,CAACyG,QAAQ,CAACF,QAAQ,CAACC,MAAM,CAACxG,MAAM,CAACyG,QAAQ,CAAC;IACrD,IAAI,CAAC9G,MAAM,CAAC8G,QAAQ,CAACF,QAAQ,CAACC,MAAM,CAAC7G,MAAM,CAAC8G,QAAQ,CAAC;IACrD,IAAI,CAACzH,KAAK,CAACyH,QAAQ,CAACF,QAAQ,CAACC,MAAM,CAACxH,KAAK,CAACyH,QAAQ,CAAC;IACnD,IAAI,CAACxF,MAAM,GAAGuF,MAAM,CAACvF,MAAM,CAACyF,KAAK,EAAE;EACpC,CAAC;EAgBD1I,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,eAAW;IAItB;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACkH,gBAAgB,CAAC,aAAa,CAAC;IAC5C,CAAC;IAvBD;;;;;;;;;;;;;;SAcA,SAAA/G,IAAuBV,KAAc;MACpC,IAAI,CAACgJ,cAAc,CAAChJ,KAAK,CAAC;IAC3B,CAAC;;;;EASD;;;EAGUoD,aAAA,CAAA7D,SAAA,CAAAyJ,cAAc,GAAxB,UAAyBhJ,KAAc;IACtC,IAAI,CAAC0H,gBAAgB,CAAC,aAAa,EAAE1H,KAAK,EAAE,IAAI,CAAC;EAClD,CAAC;EASDK,MAAA,CAAAC,cAAA,CAAW8C,aAAA,CAAA7D,SAAA,oBAAgB;IAI3B;;;SAGA,SAAAgB,IAAA;MACC,OAAO,IAAI,CAACkH,gBAAgB,CAAC,kBAAkB,CAAC;IACjD,CAAC;IAhBD;;;;;;;SAOA,SAAA/G,IAA4BV,KAAc;MACzC,IAAI,CAAC0H,gBAAgB,CAAC,kBAAkB,EAAE1H,KAAK,EAAE,IAAI,CAAC;IACvD,CAAC;;;;EASD;;;;;;EAMOoD,aAAA,CAAA7D,SAAA,CAAAyG,iBAAiB,GAAxB,UAAyB/E,QAA4B;IACpD,IAAIA,QAAQ,EAAE;MACb,IAAI+G,cAAc,GAAG/G,QAAQ,CAAC+G,cAAc;MAC5C,IAAIiB,cAAc,GAAGhI,QAAQ,CAACgI,cAAc;MAE5C,IAAIjB,cAAc,IAAIiB,cAAc,EAAE;QAErC,IAAIA,cAAc,EAAE;UACnB,IAAIA,cAAc,CAACC,SAAS,EAAE;YAC7BlB,cAAc,CAAChH,KAAK,CAACgE,IAAI,GAAGiE,cAAc,CAACC,SAAS;;UAErD,IAAID,cAAc,CAACE,aAAa,EAAE;YACjCnB,cAAc,CAAChH,KAAK,CAACgE,IAAI,GAAGiE,cAAc,CAACE,aAAa;;UAEzD,IAAIF,cAAc,CAACG,SAAS,EAAE;YAC7BpB,cAAc,CAAC9G,UAAU,CAAC8D,IAAI,GAAGiE,cAAc,CAACG,SAAS;;UAE1D,IAAIH,cAAc,CAACI,aAAa,EAAE;YACjCrB,cAAc,CAAC9G,UAAU,CAAC8D,IAAI,GAAGiE,cAAc,CAACI,aAAa;;;;;EAKlE,CAAC;EACF,OAAAjG,aAAC;AAAD,CAAC,CA7sBkCrF,MAAM;;AA+sBzC;;;;;;AAMAU,QAAQ,CAAC6K,iBAAiB,CAAC,eAAe,CAAC,GAAGlG,aAAa;AAC3D3E,QAAQ,CAAC6K,iBAAiB,CAAC,uBAAuB,CAAC,GAAGtK,qBAAqB;AAE3E;;;AAIA;;;AAGAF,YAAY,CAAC2C,IAAI,CAAC;EACjB8H,QAAQ,EAAExK,qBAAqB,CAACyK,OAAO;EACvCC,KAAK,EAAE,SAAAA,MAASjB,MAAM,EAAEkB,OAAO;IAC9B,IAAIlB,MAAM,YAAYpF,aAAa,EAAE;MACpC,IAAIqG,KAAK,GAAGjB,MAAM,CAACmB,MAAM,CAACrI,MAAM,CAACoI,OAAO,CAAC;MAEzC,IAAIE,UAAU,GAAGpB,MAAM,CAACxG,MAAM,CAAC8G,QAAQ,CAACa,MAAM,CAACrI,MAAM,CAACoI,OAAO,CAAC;MAC9DE,UAAU,CAACpJ,UAAU,CAACqJ,QAAQ,GAAG,IAAI;MAErC,IAAIC,SAAS,GAAGtB,MAAM,CAACnH,KAAK,CAACyH,QAAQ,CAACa,MAAM,CAACrI,MAAM,CAACoI,OAAO,CAAC;MAC5DI,SAAS,CAACtJ,UAAU,CAACqJ,QAAQ,GAAG,IAAI;MACpC,OAAOJ,KAAK;;IAGb,OAAO,IAAI;EACZ;CACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}