{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"mb-0\"\n}, \"Sign in\", -1 /* HOISTED */);\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Enter your email address and password to access admin panel.\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_sign_in1_form = _resolveComponent(\"sign-in1-form\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createVNode(_component_sign_in1_form, {\n    formType: \"jwtz\",\n    email: \"Enter email\",\n    password: \"admin123\"\n  })]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_sign_in1_form","formType","email","password"],"sources":["C:\\Users\\brnol\\Documents\\Hospital\\Hospital_equipo\\src\\views\\AuthPages\\Default\\SignIn1.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1 class=\"mb-0\">Sign in</h1>\r\n    <p>Enter your email address and password to access admin panel.</p>\r\n    <sign-in1-form formType=\"jwtz\" email=\"Enter email\" password=\"admin123\"></sign-in1-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SignIn1Form from './Forms/SignIn1Form'\r\nexport default {\r\n  name: 'SignIn1',\r\n  components: { SignIn1Form },\r\n  data: () => ({}),\r\n  mounted() {\r\n    const loggedIn = localStorage.getItem('access_token')\r\n    if (loggedIn !== undefined && loggedIn !== null) {\r\n      this.$router.push({ name: 'mini.dashboard.home-2' })\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";8BAEIA,mBAAA,CAA6B;EAAzBC,KAAK,EAAC;AAAM,GAAC,SAAO;8BACxBD,mBAAA,CAAmE,WAAhE,8DAA4D;;;uBAFjEE,mBAAA,CAIM,cAHJC,UAA6B,EAC7BC,UAAmE,EACnEC,YAAA,CAAuFC,wBAAA;IAAxEC,QAAQ,EAAC,MAAM;IAACC,KAAK,EAAC,aAAa;IAACC,QAAQ,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}