{"ast":null,"code":"/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Grid } from \"./Grid\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\nvar GridCircular = /** @class */function (_super) {\n  __extends(GridCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n  function GridCircular() {\n    var _this = _super.call(this) || this;\n    _this.className = \"GridCircular\";\n    _this.pixelPerfect = false;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the circular grid. (absolute or relative)\r\n     *\r\n     * @param value Inner radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the circular grid. (absolute or relative)\r\n     *\r\n     * @param value Outer radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCircular;\n}(Grid);\nexport { GridCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;","map":{"version":3,"names":["Grid","registry","GridCircular","_super","__extends","_this","call","className","pixelPerfect","applyTheme","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPercentProperty","registeredClasses"],"sources":["../../../../../src/.internal/charts/axes/GridCircular.ts"],"sourcesContent":["/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n"],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,IAAI,QAAqD,QAAQ;AAC1E,SAASC,QAAQ,QAAQ,qBAAqB;AAyC9C;;;;;;AAOA;;;;;;;AAOA,IAAAC,YAAA,0BAAAC,MAAA;EAAkCC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EAiBjC;;;EAGA,SAAAD,aAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IACPD,KAAI,CAACE,SAAS,GAAG,cAAc;IAC/BF,KAAI,CAACG,YAAY,GAAG,KAAK;IACzBH,KAAI,CAACI,UAAU,EAAE;;EAClB;EAOAC,MAAA,CAAAC,cAAA,CAAWT,YAAA,CAAAU,SAAA,eAAW;IAItB;;;SAGA,SAAAC,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,aAAa,CAAC;IAC5C,CAAC;IAdD;;;;;SAKA,SAAAC,IAAuBC,KAAuB;MAC7C,IAAI,CAACC,kBAAkB,CAAC,aAAa,EAAED,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;IACtE,CAAC;;;;EAcDN,MAAA,CAAAC,cAAA,CAAWT,YAAA,CAAAU,SAAA,UAAM;IAIjB;;;SAGA,SAAAC,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAdD;;;;;SAKA,SAAAC,IAAkBC,KAAuB;MACxC,IAAI,CAACC,kBAAkB,CAAC,QAAQ,EAAED,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;IACjE,CAAC;;;;EASF,OAAAd,YAAC;AAAD,CAAC,CA3DiCF,IAAI;;AA8DtC;;;;;;AAMAC,QAAQ,CAACiB,iBAAiB,CAAC,cAAc,CAAC,GAAGhB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}