{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: $props.element,\n    style: _normalizeStyle('height: ' + $props.height + 'px;')\n  }, null, 12 /* STYLE, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","id","$props","element","style","_normalizeStyle","height","_hoisted_1"],"sources":["C:\\Users\\brnol\\Documents\\Hospital\\Hospital_equipo\\src\\components\\xray\\charts\\AmChart.vue"],"sourcesContent":["<template>\r\n  <div :id=\"element\" :style=\"'height: ' + height + 'px;'\"></div>\r\n</template>\r\n<script>\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport * as am4maps from '@amcharts/amcharts4/maps'\r\n// eslint-disable-next-line camelcase\r\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated'\r\nimport am4geodataWorldLow from '@amcharts/amcharts4-geodata/worldLow'\r\n// eslint-disable-next-line camelcase\r\nimport am4themes_dark from '@amcharts/amcharts4/themes/amchartsdark'\r\n\r\nam4core.useTheme(am4themes_animated)\r\nexport default {\r\n  name: 'AmChart',\r\n  props: {\r\n    element: { type: String, default: 'am-chart' },\r\n    type: { type: String, default: 'bar' },\r\n    option: { type: (Object, Array), default: () => {} },\r\n    height: { type: Number, default: 500 }\r\n  },\r\n  mounted() {\r\n    let chart\r\n    switch (this.type) {\r\n      case 'line':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.line(chart)\r\n        break\r\n      case 'column':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.column(chart)\r\n        break\r\n      case 'mixes-column':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.mixesColumn(chart)\r\n        break\r\n      case 'stacked':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.stacked(chart)\r\n        break\r\n      case 'bar-line':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.barLine(chart)\r\n        break\r\n      case 'data-based':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.dataBased(chart)\r\n        break\r\n      case 'line-zoom-h':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.lineZoomH(chart)\r\n        break\r\n      case 'line-zoom-v':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.lineZoomV(chart)\r\n        break\r\n      case 'radar':\r\n        chart = am4core.create(this.element, am4charts.RadarChart)\r\n        this.radar(chart)\r\n        break\r\n      case 'polar-scatter':\r\n        chart = am4core.create(this.element, am4charts.RadarChart)\r\n        this.polarScatter(chart)\r\n        break\r\n      case 'polar':\r\n        chart = am4core.create(this.element, am4charts.RadarChart)\r\n        this.polar(chart)\r\n        break\r\n      case 'pie':\r\n        chart = am4core.create(this.element, am4charts.PieChart3D)\r\n        this.pie(chart)\r\n        break\r\n      case 'line-bar':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.lineBar(chart)\r\n        break\r\n      case 'dashboard-map':\r\n        this.map(chart)\r\n        break\r\n      case 'dashboard2':\r\n        chart = am4core.create(this.element, am4charts.XYChart)\r\n        this.linierChart(chart)\r\n        break\r\n      case 'radial-pie':\r\n        chart = am4core.create(this.element, am4charts.PieChart)\r\n        this.radialPieChart(chart)\r\n        break\r\n      case 'dash-3':\r\n        chart = am4core.create(this.element, am4charts.RadarChart)\r\n        this.dash3(chart)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  },\r\n  methods: {\r\n    line(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n      chart.data = this.option.data\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = this.option.xAxis[0]\r\n      categoryAxis.renderer.grid.template.location = 0\r\n      categoryAxis.renderer.minGridDistance = 30\r\n\r\n      categoryAxis.renderer.labels.template.adapter.add('dy', function (dy, target) {\r\n        // eslint-disable-next-line no-self-compare\r\n        if (target.dataItem && target.dataItem.index & (2 === 2)) {\r\n          return dy + 25\r\n        }\r\n        return dy\r\n      })\r\n\r\n      // eslint-disable-next-line-no-unused-lets\r\n      chart.yAxes.push(new am4charts.ValueAxis())\r\n\r\n      // Create series\r\n      let series = chart.series.push(new am4charts.ColumnSeries())\r\n      series.dataFields.valueY = this.option.yAxis[0]\r\n      series.dataFields.categoryX = this.option.xAxis[0]\r\n      series.name = this.option.labels[0]\r\n      series.columns.template.tooltipText = '{categoryX}: [bold]{valueY}[/]'\r\n      series.columns.template.fillOpacity = 0.8\r\n\r\n      let columnTemplate = series.columns.template\r\n      columnTemplate.strokeWidth = 2\r\n      columnTemplate.strokeOpacity = 1\r\n    },\r\n    column(chart) {\r\n      chart.exporting.menu = new am4core.ExportMenu()\r\n      /* Create axes */\r\n\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = 'year'\r\n      categoryAxis.renderer.minGridDistance = 30\r\n\r\n      /* Create value axis */\r\n      chart.yAxes.push(new am4charts.ValueAxis())\r\n\r\n      /* Create series */\r\n      let columnSeries = chart.series.push(new am4charts.ColumnSeries())\r\n      columnSeries.name = 'Income'\r\n      columnSeries.dataFields.valueY = 'income'\r\n      columnSeries.dataFields.categoryX = 'year'\r\n\r\n      columnSeries.columns.template.tooltipText = '[#fff font-size: 15px]{name} in {categoryX}:\\n[/][#fff font-size: 20px]{valueY}[/] [#fff]{additional}[/]'\r\n      columnSeries.columns.template.propertyFields.fillOpacity = 'fillOpacity'\r\n      columnSeries.columns.template.propertyFields.stroke = 'stroke'\r\n      columnSeries.columns.template.propertyFields.strokeWidth = 'strokeWidth'\r\n      columnSeries.columns.template.propertyFields.strokeDasharray = 'columnDash'\r\n      columnSeries.tooltip.label.textAlign = 'middle'\r\n\r\n      let lineSeries = chart.series.push(new am4charts.LineSeries())\r\n      lineSeries.name = 'Expenses'\r\n      lineSeries.dataFields.valueY = 'expenses'\r\n      lineSeries.dataFields.categoryX = 'year'\r\n\r\n      lineSeries.stroke = am4core.color(this.option.color)\r\n      lineSeries.strokeWidth = 3\r\n      lineSeries.propertyFields.strokeDasharray = 'lineDash'\r\n      lineSeries.tooltip.label.textAlign = 'middle'\r\n\r\n      let bullet = lineSeries.bullets.push(new am4charts.Bullet())\r\n      bullet.fill = am4core.color(this.option.fill) // tooltips grab fill from parent by default\r\n      bullet.tooltipText = '[#fff font-size: 15px]{name} in {categoryX}:\\n[/][#fff font-size: 20px]{valueY}[/] [#fff]{additional}[/]'\r\n      let circle = bullet.createChild(am4core.Circle)\r\n      circle.radius = 4\r\n      circle.fill = am4core.color('#fff')\r\n      circle.strokeWidth = 3\r\n\r\n      chart.data = this.option.data\r\n    },\r\n    mixesColumn(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n      chart.numberFormatter.numberFormat = \"#.#'%'\"\r\n      chart.data = this.option.data\r\n      // Create axes\r\n\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = this.option.xAxis[0]\r\n      categoryAxis.renderer.grid.template.location = 0\r\n      categoryAxis.renderer.minGridDistance = 30\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.title.text = this.option.title\r\n      valueAxis.title.fontWeight = 800\r\n\r\n      // Create series\r\n\r\n      let series = chart.series.push(new am4charts.ColumnSeries())\r\n      series.dataFields.valueY = this.option.yAxis[0]\r\n      series.dataFields.categoryX = this.option.xAxis[0]\r\n      series.clustered = false\r\n      series.tooltipText = this.option.labels[0]\r\n\r\n      let series2 = chart.series.push(new am4charts.ColumnSeries())\r\n      series2.dataFields.valueY = this.option.yAxis[1]\r\n      series2.dataFields.categoryX = this.option.xAxis[0]\r\n      series2.clustered = false\r\n      series2.columns.template.width = am4core.percent(50)\r\n      series2.tooltipText = this.option.labels[1]\r\n\r\n      chart.cursor = new am4charts.XYCursor()\r\n      chart.cursor.lineX.disabled = true\r\n      chart.cursor.lineY.disabled = true\r\n    },\r\n    stacked(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n      chart.data = this.option.data\r\n\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = 'year'\r\n      categoryAxis.renderer.grid.template.location = 0\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.renderer.inside = true\r\n      valueAxis.renderer.labels.template.disabled = true\r\n      valueAxis.min = 0\r\n\r\n      // Create series\r\n      let _this = this\r\n      // eslint-disable-next-line no-inner-declarations\r\n      function createSeries(field, name) {\r\n        // Set up series\r\n        let series = chart.series.push(new am4charts.ColumnSeries())\r\n        series.name = name\r\n        series.dataFields.valueY = field\r\n        series.dataFields.categoryX = _this.option.xAxis[0]\r\n        series.sequencedInterpolation = true\r\n\r\n        // Make it stacked\r\n        series.stacked = true\r\n\r\n        // Configure columns\r\n        series.columns.template.width = am4core.percent(60)\r\n        series.columns.template.tooltipText = '[bold]{name}[/]\\n[font-size:14px]{categoryX}: {valueY}'\r\n\r\n        // Add label\r\n        let labelBullet = series.bullets.push(new am4charts.LabelBullet())\r\n        labelBullet.label.text = '{valueY}'\r\n        labelBullet.locationY = 0.5\r\n\r\n        return series\r\n      }\r\n      for (let j = 0; j < this.option.yAxis.length; j++) {\r\n        createSeries(this.option.yAxis[j], this.option.yAxis[j])\r\n      }\r\n      // Legend\r\n      chart.legend = new am4charts.Legend()\r\n    },\r\n    barLine(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n      chart.data = this.option.data\r\n      // create category axis for years\r\n\r\n      let categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = this.option.yAxis[0]\r\n      categoryAxis.renderer.inversed = true\r\n      categoryAxis.renderer.grid.template.location = 0\r\n\r\n      // create value axis for income and expenses\r\n\r\n      let valueAxis = chart.xAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.renderer.opposite = true\r\n\r\n      // create columns\r\n\r\n      let series = chart.series.push(new am4charts.ColumnSeries())\r\n      series.dataFields.categoryY = this.option.yAxis[0]\r\n      series.dataFields.valueX = this.option.xAxis[0]\r\n      series.name = this.option.labels[0]\r\n      series.columns.template.fillOpacity = 0.5\r\n      series.columns.template.strokeOpacity = 0\r\n      series.tooltipText = this.option.labels[0] + ' in {categoryY}: {valueX.value}'\r\n\r\n      // create line\r\n\r\n      let lineSeries = chart.series.push(new am4charts.LineSeries())\r\n      lineSeries.dataFields.categoryY = this.option.yAxis[0]\r\n      lineSeries.dataFields.valueX = this.option.xAxis[1]\r\n      lineSeries.name = this.option.labels[1]\r\n      lineSeries.strokeWidth = 3\r\n      lineSeries.tooltipText = this.option.labels[1] + ' in {categoryY}: {valueX.value}'\r\n\r\n      // add bullets\r\n      let circleBullet = lineSeries.bullets.push(new am4charts.CircleBullet())\r\n      circleBullet.circle.fill = am4core.color('#fff')\r\n      circleBullet.circle.strokeWidth = 2\r\n\r\n      // add chart cursor\r\n      chart.cursor = new am4charts.XYCursor()\r\n      chart.cursor.behavior = 'zoomY'\r\n\r\n      // add legend\r\n      chart.legend = new am4charts.Legend()\r\n    },\r\n    dataBased(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n      chart.data = this.option.data\r\n      // Set input format for the dates\r\n      chart.dateFormatter.inputDateFormat = 'yyyy-MM-dd'\r\n\r\n      // Create axes\r\n      let dateAxis = chart.xAxes.push(new am4charts.DateAxis())\r\n\r\n      chart.yAxes.push(new am4charts.ValueAxis())\r\n\r\n      // Create series\r\n\r\n      let series = chart.series.push(new am4charts.LineSeries())\r\n      series.dataFields.valueY = this.option.yAxis[0]\r\n      series.dataFields.dateX = this.option.xAxis[0]\r\n      series.tooltipText = '{value}'\r\n      series.strokeWidth = 2\r\n      series.minBulletDistance = 15\r\n\r\n      // Drop-shaped tooltips\r\n      series.tooltip.background.cornerRadius = 20\r\n      series.tooltip.background.strokeOpacity = 0\r\n      series.tooltip.pointerOrientation = 'vertical'\r\n      series.tooltip.label.minWidth = 40\r\n      series.tooltip.label.minHeight = 40\r\n      series.tooltip.label.textAlign = 'middle'\r\n      series.tooltip.label.textValign = 'middle'\r\n\r\n      // Make bullets grow on hover\r\n\r\n      let bullet = series.bullets.push(new am4charts.CircleBullet())\r\n      bullet.circle.strokeWidth = 2\r\n      bullet.circle.radius = 4\r\n      bullet.circle.fill = am4core.color('#fff')\r\n\r\n      let bullethover = bullet.states.create('hover')\r\n      bullethover.properties.scale = 1.3\r\n\r\n      // Make a panning cursor\r\n      chart.cursor = new am4charts.XYCursor()\r\n      chart.cursor.behavior = 'panXY'\r\n      chart.cursor.xAxis = dateAxis\r\n      chart.cursor.snapToSeries = series\r\n\r\n      // Create vertical scrollbar and place it before the value axis\r\n      chart.scrollbarY = new am4core.Scrollbar()\r\n      chart.scrollbarY.parent = chart.leftAxesContainer\r\n      chart.scrollbarY.toBack()\r\n\r\n      // Create a horizontal scrollbar with previe and place it underneath the date axis\r\n      chart.scrollbarX = new am4charts.XYChartScrollbar()\r\n      chart.scrollbarX.series.push(series)\r\n      chart.scrollbarX.parent = chart.bottomAxesContainer\r\n\r\n      dateAxis.start = 0.79\r\n      dateAxis.keepSelection = true\r\n    },\r\n    lineZoomH(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n\r\n      // Add data\r\n      chart.data = this.option.data\r\n\r\n      // Create axes\r\n      let dateAxis = chart.xAxes.push(new am4charts.DateAxis())\r\n      dateAxis.renderer.minGridDistance = 50\r\n\r\n      // eslint-disable-next-line no-unused-vars\r\n      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n\r\n      // Create series\r\n      let series = chart.series.push(new am4charts.LineSeries())\r\n      series.dataFields.valueY = this.option.yAxis\r\n      series.dataFields.dateX = this.option.xAxis\r\n      series.strokeWidth = 2\r\n      series.minBulletDistance = 10\r\n      series.tooltipText = '{valueY}'\r\n      series.tooltip.pointerOrientation = 'vertical'\r\n      series.tooltip.background.cornerRadius = 20\r\n      series.tooltip.background.fillOpacity = 0.5\r\n      series.tooltip.label.padding(12, 12, 12, 12)\r\n\r\n      // Add scrollbar\r\n      chart.scrollbarX = new am4charts.XYChartScrollbar()\r\n      chart.scrollbarX.series.push(series)\r\n\r\n      // Add cursor\r\n      chart.cursor = new am4charts.XYCursor()\r\n      chart.cursor.xAxis = dateAxis\r\n      chart.cursor.snapToSeries = series\r\n    },\r\n    lineZoomV(chart) {\r\n      chart.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        chart.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n\r\n      // Add data\r\n      chart.data = this.option.data\r\n\r\n      // Create axes\r\n      let dateAxis = chart.xAxes.push(new am4charts.DateAxis())\r\n      dateAxis.renderer.grid.template.location = 0\r\n      dateAxis.renderer.minGridDistance = 50\r\n\r\n      chart.yAxes.push(new am4charts.ValueAxis())\r\n\r\n      // Create series\r\n      let series = chart.series.push(new am4charts.LineSeries())\r\n      series.dataFields.valueY = this.option.yAxis\r\n      series.dataFields.dateX = this.option.xAxis\r\n      series.strokeWidth = 3\r\n      series.fillOpacity = 0.5\r\n\r\n      // Add vertical scrollbar\r\n      chart.scrollbarY = new am4core.Scrollbar()\r\n      chart.scrollbarY.marginLeft = 0\r\n\r\n      // Add cursor\r\n      chart.cursor = new am4charts.XYCursor()\r\n      chart.cursor.behavior = 'zoomY'\r\n      chart.cursor.lineX.disabled = true\r\n    },\r\n    radar(chart) {\r\n      chart.data = this.option.data\r\n      /* Create axes */\r\n      var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = this.option.xAxis[0]\r\n\r\n      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.renderer.axisFills.template.fill = chart.colors.getIndex(2)\r\n      valueAxis.renderer.axisFills.template.fillOpacity = 0.05\r\n\r\n      /* Create and configure series */\r\n      var series = chart.series.push(new am4charts.RadarSeries())\r\n      series.dataFields.valueY = this.option.yAxis[0]\r\n      series.dataFields.categoryX = this.option.xAxis[0]\r\n      series.name = this.option.labels[0]\r\n      series.strokeWidth = 3\r\n    },\r\n    polarScatter(chart) {\r\n      chart.data = this.option.data\r\n      /* Create axes */\r\n      /* Create axes */\r\n      var xAxis = chart.xAxes.push(new am4charts.ValueAxis())\r\n      xAxis.renderer.maxLabelPosition = 0.99\r\n\r\n      var yAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      yAxis.renderer.labels.template.verticalCenter = 'bottom'\r\n      yAxis.renderer.labels.template.horizontalCenter = 'right'\r\n      yAxis.renderer.maxLabelPosition = 0.99\r\n      yAxis.renderer.labels.template.paddingBottom = 1\r\n      yAxis.renderer.labels.template.paddingRight = 3\r\n\r\n      /* Create and configure series */\r\n      let series1 = chart.series.push(new am4charts.RadarSeries())\r\n      series1.bullets.push(new am4charts.CircleBullet())\r\n      series1.strokeOpacity = 0\r\n      series1.dataFields.valueX = 'x'\r\n      series1.dataFields.valueY = 'y'\r\n      series1.name = 'Series #1'\r\n      series1.sequencedInterpolation = true\r\n      series1.sequencedInterpolationDelay = 10\r\n      series1.data = [\r\n        { x: 83, y: 5.1 },\r\n        { x: 44, y: 5.8 },\r\n        { x: 76, y: 9 },\r\n        { x: 2, y: 1.4 },\r\n        { x: 100, y: 8.3 },\r\n        { x: 96, y: 1.7 },\r\n        { x: 68, y: 3.9 },\r\n        { x: 0, y: 3 },\r\n        { x: 100, y: 4.1 },\r\n        { x: 16, y: 5.5 },\r\n        { x: 71, y: 6.8 },\r\n        { x: 100, y: 7.9 },\r\n        { x: 35, y: 8 },\r\n        { x: 44, y: 6 },\r\n        { x: 64, y: 0.7 },\r\n        { x: 53, y: 3.3 },\r\n        { x: 92, y: 4.1 },\r\n        { x: 43, y: 7.3 },\r\n        { x: 15, y: 7.5 },\r\n        { x: 43, y: 4.3 },\r\n        { x: 90, y: 9.9 }\r\n      ]\r\n\r\n      let series2 = chart.series.push(new am4charts.RadarSeries())\r\n      series2.bullets.push(new am4charts.CircleBullet())\r\n      series2.strokeOpacity = 0\r\n      series2.dataFields.valueX = 'x'\r\n      series2.dataFields.valueY = 'y'\r\n      series2.name = 'Series #2'\r\n      series2.sequencedInterpolation = true\r\n      series2.sequencedInterpolationDelay = 10\r\n      series2.data = [\r\n        { x: 178, y: 1.3 },\r\n        { x: 129, y: 3.4 },\r\n        { x: 99, y: 2.4 },\r\n        { x: 80, y: 9.9 },\r\n        { x: 118, y: 9.4 },\r\n        { x: 103, y: 8.7 },\r\n        { x: 91, y: 4.2 },\r\n        { x: 151, y: 1.2 },\r\n        { x: 168, y: 5.2 },\r\n        { x: 168, y: 1.6 },\r\n        { x: 152, y: 1.2 },\r\n        { x: 138, y: 7.7 },\r\n        { x: 107, y: 3.9 },\r\n        { x: 124, y: 0.7 },\r\n        { x: 130, y: 2.6 },\r\n        { x: 86, y: 9.2 },\r\n        { x: 169, y: 7.5 },\r\n        { x: 122, y: 9.9 },\r\n        { x: 100, y: 3.8 },\r\n        { x: 172, y: 4.1 },\r\n        { x: 140, y: 7.3 },\r\n        { x: 161, y: 2.3 },\r\n        { x: 141, y: 0.9 }\r\n      ]\r\n\r\n      let series3 = chart.series.push(new am4charts.RadarSeries())\r\n      series3.bullets.push(new am4charts.CircleBullet())\r\n      series3.strokeOpacity = 0\r\n      series3.dataFields.valueX = 'x'\r\n      series3.dataFields.valueY = 'y'\r\n      series3.name = 'Series #3'\r\n      series3.sequencedInterpolation = true\r\n      series3.sequencedInterpolationDelay = 10\r\n      series3.data = [\r\n        { x: 419, y: 4.9 },\r\n        { x: 417, y: 5.5 },\r\n        { x: 434, y: 0.1 },\r\n        { x: 344, y: 2.5 },\r\n        { x: 279, y: 7.5 },\r\n        { x: 307, y: 8.4 },\r\n        { x: 279, y: 9 },\r\n        { x: 220, y: 8.4 },\r\n        { x: 201, y: 9.7 },\r\n        { x: 288, y: 1.2 },\r\n        { x: 333, y: 7.4 },\r\n        { x: 308, y: 1.9 },\r\n        { x: 330, y: 8 },\r\n        { x: 408, y: 1.7 },\r\n        { x: 274, y: 0.8 },\r\n        { x: 296, y: 3.1 },\r\n        { x: 279, y: 4.3 },\r\n        { x: 379, y: 5.6 },\r\n        { x: 175, y: 6.8 }\r\n      ]\r\n\r\n      /* Add legend */\r\n      chart.legend = new am4charts.Legend()\r\n\r\n      /* Add cursor */\r\n      chart.cursor = new am4charts.RadarCursor()\r\n    },\r\n    polar(chart) {\r\n      chart.data = this.option.data\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = 'direction'\r\n\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.renderer.gridType = 'polygons'\r\n\r\n      let range = categoryAxis.axisRanges.create()\r\n      range.category = 'NW'\r\n      range.endCategory = 'NW'\r\n      range.axisFill.fill = am4core.color('#0084ff')\r\n      range.axisFill.fillOpacity = 0.3\r\n\r\n      let range2 = categoryAxis.axisRanges.create()\r\n      range2.category = 'N'\r\n      range2.endCategory = 'N'\r\n      range2.axisFill.fill = am4core.color('#e64141')\r\n      range2.axisFill.fillOpacity = 0.3\r\n\r\n      let range3 = categoryAxis.axisRanges.create()\r\n      range3.category = 'SE'\r\n      range3.endCategory = 'SW'\r\n      range3.axisFill.fill = am4core.color('#00ca00')\r\n      range3.axisFill.fillOpacity = 0.3\r\n      range3.locations.endCategory = 0\r\n\r\n      /* Create and configure series */\r\n\r\n      let series = chart.series.push(new am4charts.RadarSeries())\r\n      series.dataFields.valueY = 'value'\r\n      series.dataFields.categoryX = 'direction'\r\n      series.name = 'Wind direction'\r\n      series.strokeWidth = 3\r\n      series.fillOpacity = 0.2\r\n    },\r\n    pie(chart) {\r\n      chart.data = this.option.data\r\n      let series = chart.series.push(new am4charts.PieSeries3D())\r\n      series.colors.list = []\r\n      for (let j = 0; j < this.option.colors.length; j++) {\r\n        series.colors.list.push(am4core.color(this.option.colors[j]))\r\n      }\r\n      series.dataFields.value = this.option.value[0]\r\n      series.dataFields.category = this.option.category[0]\r\n    },\r\n    lineBar(chart) {\r\n      chart.colors.list = [am4core.color('#827af3')]\r\n      if (this.$route.meta.dark) {\r\n        chart.stroke = am4core.color('#8c91b6')\r\n      }\r\n      let chartdata = []\r\n      let value = 120\r\n\r\n      let names = ['ra', 'De', 'Ca', 'Ja', 'Ri', 'An']\r\n\r\n      for (let i = 0; i < names.length; i++) {\r\n        value += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 5)\r\n        chartdata.push({ category: names[i], value: value })\r\n      }\r\n\r\n      chart.data = chartdata\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.renderer.grid.template.location = 0\r\n      categoryAxis.dataFields.category = 'category'\r\n      categoryAxis.renderer.minGridDistance = 15\r\n      categoryAxis.renderer.grid.template.location = 0.5\r\n      categoryAxis.renderer.grid.template.strokeDasharray = '1,3'\r\n      categoryAxis.renderer.labels.template.rotation = -90\r\n      categoryAxis.renderer.labels.template.horizontalCenter = 'left'\r\n      categoryAxis.renderer.labels.template.location = 0.5\r\n\r\n      categoryAxis.renderer.labels.template.adapter.add('dx', function (dx, target) {\r\n        return -target.maxRight / 2\r\n      })\r\n\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.tooltip.disabled = true\r\n      valueAxis.renderer.ticks.template.disabled = true\r\n      valueAxis.renderer.axisFills.template.disabled = true\r\n\r\n      let series = chart.series.push(new am4charts.ColumnSeries())\r\n      series.dataFields.categoryX = 'category'\r\n      series.dataFields.valueY = 'value'\r\n      series.tooltipText = '{valueY.value}'\r\n      series.sequencedInterpolation = true\r\n      series.fillOpacity = 0\r\n      series.strokeOpacity = 1\r\n      series.strokeDashArray = '1,3'\r\n      series.columns.template.width = 0.01\r\n      series.tooltip.pointerOrientation = 'horizontal'\r\n\r\n      series.bullets.create(am4charts.CircleBullet)\r\n      chart.cursor = new am4charts.XYCursor()\r\n    },\r\n    map() {\r\n      // Themes begin\r\n      if (this.$route.meta.dark) {\r\n        am4core.useTheme(am4themes_dark)\r\n      }\r\n      am4core.useTheme(am4themes_animated)\r\n      // Themes end\r\n\r\n      // Define marker path\r\n      let targetSVG = 'M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z'\r\n\r\n      // Create map instance\r\n      let chart = am4core.create(this.element, am4maps.MapChart)\r\n      let interfaceColors = new am4core.InterfaceColorSet()\r\n\r\n      // Set map definition\r\n      chart.geodata = am4geodataWorldLow\r\n\r\n      // Set projection\r\n      chart.projection = new am4maps.projections.Mercator()\r\n\r\n      // Add zoom control\r\n      chart.zoomControl = new am4maps.ZoomControl()\r\n\r\n      // Set initial zoom\r\n      chart.homeZoomLevel = 2.5\r\n      chart.homeGeoPoint = {\r\n        latitude: 51,\r\n        longitude: -23\r\n      }\r\n\r\n      // Create map polygon series\r\n      let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries())\r\n      polygonSeries.exclude = ['AQ']\r\n      polygonSeries.useGeodata = true\r\n      polygonSeries.mapPolygons.template.nonScalingStroke = true\r\n\r\n      // Add images\r\n      let imageSeries = chart.series.push(new am4maps.MapImageSeries())\r\n      let imageTemplate = imageSeries.mapImages.template\r\n      imageTemplate.tooltipText = '{title}'\r\n      imageTemplate.nonScaling = true\r\n\r\n      let marker = imageTemplate.createChild(am4core.Sprite)\r\n      marker.path = targetSVG\r\n      marker.horizontalCenter = 'middle'\r\n      marker.verticalCenter = 'middle'\r\n      marker.scale = 0.7\r\n      marker.fill = interfaceColors.getFor('alternativeBackground')\r\n\r\n      imageTemplate.propertyFields.latitude = 'latitude'\r\n      imageTemplate.propertyFields.longitude = 'longitude'\r\n      imageSeries.data = [\r\n        {\r\n          id: 'london',\r\n          svgPath: targetSVG,\r\n          title: 'London',\r\n          latitude: 51.5002,\r\n          longitude: -0.1262,\r\n          scale: 1\r\n        },\r\n        {\r\n          svgPath: targetSVG,\r\n          title: 'Brussels',\r\n          latitude: 50.8371,\r\n          longitude: 4.3676,\r\n          scale: 0.5\r\n        },\r\n        {\r\n          svgPath: targetSVG,\r\n          title: 'Prague',\r\n          latitude: 50.0878,\r\n          longitude: 14.4205,\r\n          scale: 0.5\r\n        },\r\n        {\r\n          svgPath: targetSVG,\r\n          title: 'Bratislava',\r\n          latitude: 48.2116,\r\n          longitude: 17.1547,\r\n          scale: 0.5\r\n        },\r\n        {\r\n          svgPath: targetSVG,\r\n          title: 'Kiev',\r\n          latitude: 50.4422,\r\n          longitude: 30.5367,\r\n          scale: 0.5\r\n        },\r\n        {\r\n          svgPath: targetSVG,\r\n          title: 'Paris',\r\n          latitude: 48.8567,\r\n          longitude: 2.351,\r\n          scale: 0.5\r\n        },\r\n        {\r\n          svgPath: targetSVG,\r\n          title: 'New York',\r\n          latitude: 40.43,\r\n          longitude: -74,\r\n          scale: 0.5\r\n        }\r\n      ]\r\n\r\n      // Add lines\r\n      let lineSeries = chart.series.push(new am4maps.MapLineSeries())\r\n      lineSeries.dataFields.multiGeoLine = 'multiGeoLine'\r\n\r\n      let lineTemplate = lineSeries.mapLines.template\r\n      lineTemplate.nonScalingStroke = true\r\n      lineTemplate.arrow.nonScaling = true\r\n      lineTemplate.arrow.width = 4\r\n      lineTemplate.arrow.height = 6\r\n      lineTemplate.stroke = interfaceColors.getFor('alternativeBackground')\r\n      lineTemplate.fill = interfaceColors.getFor('alternativeBackground')\r\n      lineTemplate.line.strokeOpacity = 0.4\r\n\r\n      lineSeries.data = [\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 50.4422, longitude: 30.5367 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 40.43, longitude: -74.0 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 64.1353, longitude: -21.8952 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 37.9792, longitude: 23.7166 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 38.7072, longitude: -9.1355 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 55.7558, longitude: 37.6176 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 44.8048, longitude: 20.4781 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 48.2116, longitude: 17.1547 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 46.0514, longitude: 14.506 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 40.4167, longitude: -3.7033 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 59.3328, longitude: 18.0645 }\r\n            ]\r\n          ]\r\n        },\r\n        {\r\n          multiGeoLine: [\r\n            [\r\n              { latitude: 51.5002, longitude: -0.1262 },\r\n              { latitude: 46.948, longitude: 7.4481 }\r\n            ]\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    linierChart(chart) {\r\n      chart.colors.list = [am4core.color('#827af3'), am4core.color('#6ce6f4')]\r\n      if (this.$route.meta.dark) {\r\n        chart.stroke = am4core.color('#8c91b6')\r\n      }\r\n      let data = []\r\n      let open = 100\r\n      let close = 120\r\n\r\n      let names = ['Rai', 'Dem', 'Caro', 'Jac', 'Rich', 'Ano', 'Amd', 'Idal', 'Joi', 'Mar', 'Cur', 'Shl', 'Meg']\r\n\r\n      for (let i = 0; i < names.length; i++) {\r\n        open += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 5)\r\n        close = open + Math.round(Math.random() * 10) + 3\r\n        data.push({ category: names[i], open: open, close: close })\r\n      }\r\n\r\n      chart.data = data\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.renderer.grid.template.location = 0\r\n      categoryAxis.dataFields.category = 'category'\r\n      categoryAxis.renderer.minGridDistance = 15\r\n      categoryAxis.renderer.grid.template.location = 0.5\r\n      categoryAxis.renderer.grid.template.strokeDasharray = '1,3'\r\n      categoryAxis.renderer.labels.template.rotation = -90\r\n      categoryAxis.renderer.labels.template.horizontalCenter = 'left'\r\n      categoryAxis.renderer.labels.template.location = 0.5\r\n      categoryAxis.renderer.inside = true\r\n\r\n      categoryAxis.renderer.labels.template.adapter.add('dx', function (dx, target) {\r\n        return -target.maxRight / 2\r\n      })\r\n\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.tooltip.disabled = true\r\n      valueAxis.renderer.ticks.template.disabled = true\r\n      valueAxis.renderer.axisFills.template.disabled = true\r\n\r\n      let series = chart.series.push(new am4charts.ColumnSeries())\r\n      series.dataFields.categoryX = 'category'\r\n      series.dataFields.openValueY = 'open'\r\n      series.dataFields.valueY = 'close'\r\n      series.tooltipText = 'open: {openValueY.value} close: {valueY.value}'\r\n      series.sequencedInterpolation = true\r\n      series.fillOpacity = 0\r\n      series.strokeOpacity = 1\r\n      series.columns.template.width = 0.01\r\n      series.tooltip.pointerOrientation = 'horizontal'\r\n\r\n      let openBullet = series.bullets.create(am4charts.CircleBullet)\r\n      openBullet.locationY = 1\r\n\r\n      let closeBullet = series.bullets.create(am4charts.CircleBullet)\r\n\r\n      closeBullet.fill = chart.colors.getIndex(4)\r\n      closeBullet.stroke = closeBullet.fill\r\n\r\n      chart.cursor = new am4charts.XYCursor()\r\n    },\r\n    radialPieChart(chart) {\r\n      chart.hiddenState.properties.opacity = 0\r\n      chart.data = this.option\r\n\r\n      chart.radius = am4core.percent(70)\r\n      chart.innerRadius = am4core.percent(40)\r\n      chart.startAngle = 180\r\n      chart.endAngle = 360\r\n      var series = chart.series.push(new am4charts.PieSeries())\r\n      series.dataFields.value = 'value'\r\n      series.dataFields.category = 'country'\r\n      series.colors.list = [am4core.color('#089bab'), am4core.color('#2ca5b2'), am4core.color('#faa264'), am4core.color('#fcb07a')]\r\n\r\n      series.slices.template.cornerRadius = 0\r\n      series.slices.template.innerCornerRadius = 0\r\n      series.slices.template.draggable = true\r\n      series.slices.template.inert = true\r\n      series.alignLabels = false\r\n\r\n      series.hiddenState.properties.startAngle = 90\r\n      series.hiddenState.properties.endAngle = 90\r\n\r\n      chart.legend = new am4charts.Legend()\r\n    },\r\n    dash3(chart) {\r\n      chart.data = [\r\n        {\r\n          country: 'USA',\r\n          visits: 2025\r\n        },\r\n        {\r\n          country: 'China',\r\n          visits: 1882\r\n        },\r\n        {\r\n          country: 'Japan',\r\n          visits: 1809\r\n        },\r\n        {\r\n          country: 'Germany',\r\n          visits: 1322\r\n        },\r\n        {\r\n          country: 'UK',\r\n          visits: 1122\r\n        },\r\n        {\r\n          country: 'France',\r\n          visits: 1114\r\n        },\r\n        {\r\n          country: 'India',\r\n          visits: 984\r\n        },\r\n        {\r\n          country: 'Spain',\r\n          visits: 711\r\n        },\r\n        {\r\n          country: 'Netherlands',\r\n          visits: 665\r\n        },\r\n        {\r\n          country: 'Russia',\r\n          visits: 580\r\n        },\r\n        {\r\n          country: 'South Korea',\r\n          visits: 443\r\n        },\r\n        {\r\n          country: 'Canada',\r\n          visits: 441\r\n        }\r\n      ]\r\n\r\n      chart.innerRadius = am4core.percent(40)\r\n\r\n      let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.renderer.grid.template.location = 0\r\n      categoryAxis.dataFields.category = 'country'\r\n      categoryAxis.renderer.minGridDistance = 60\r\n      categoryAxis.renderer.inversed = true\r\n      categoryAxis.renderer.labels.template.location = 0.5\r\n      categoryAxis.renderer.grid.template.strokeOpacity = 0.08\r\n\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.min = 0\r\n      valueAxis.extraMax = 0.1\r\n      valueAxis.renderer.grid.template.strokeOpacity = 0.08\r\n\r\n      chart.seriesContainer.zIndex = -10\r\n\r\n      let series = chart.series.push(new am4charts.RadarColumnSeries())\r\n      series.dataFields.categoryX = 'country'\r\n      series.dataFields.valueY = 'visits'\r\n      series.tooltipText = '{valueY.value}'\r\n      series.columns.template.strokeOpacity = 0\r\n      series.columns.template.radarColumn.cornerRadius = 5\r\n      series.columns.template.radarColumn.innerCornerRadius = 0\r\n      chart.colors.list = [am4core.color('#279fac'), am4core.color('#ffb57e'), am4core.color('#279fac'), am4core.color('#ffb57e'), am4core.color('#279fac'), am4core.color('#ffb57e'), am4core.color('#279fac'), am4core.color('#ffb57e'), am4core.color('#279fac'), am4core.color('#ffb57e'), am4core.color('#279fac'), am4core.color('#ffb57e')]\r\n\r\n      chart.zoomOutButton.disabled = true\r\n\r\n      // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set\r\n      series.columns.template.adapter.add('fill', (fill, target) => {\r\n        return chart.colors.getIndex(target.dataItem.index)\r\n      })\r\n\r\n      setInterval(() => {\r\n        am4core.array.each(chart.data, (item) => {\r\n          item.visits *= Math.random() * 0.5 + 0.5\r\n          item.visits += 10\r\n        })\r\n        chart.invalidateRawData()\r\n      }, 2000)\r\n\r\n      categoryAxis.sortBySeries = series\r\n\r\n      chart.cursor = new am4charts.RadarCursor()\r\n      chart.cursor.behavior = 'none'\r\n      chart.cursor.lineX.disabled = true\r\n      chart.cursor.lineY.disabled = true\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";iBAAA;;uBACEA,mBAAA,CAA8D;IAAxDC,EAAE,EAAEC,MAAA,CAAAC,OAAO;IAAGC,KAAK,EAD3BC,eAAA,cAC0CH,MAAA,CAAAI,MAAM;kCADhDC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}