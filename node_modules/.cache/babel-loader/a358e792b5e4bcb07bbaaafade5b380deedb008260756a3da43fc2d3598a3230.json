{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.function.name.js\";\n/**\r\n * TreeMap series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar TreeMapSeriesDataItem = /** @class */function (_super) {\n  __extends(TreeMapSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TreeMapSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"TreeMapSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"parentName\", {\n    /**\r\n     * Data for the this particular item.\r\n     *\r\n     * @param value  Item's data\r\n     */\n    //public set dataContext(value: Object) {\n    //\tthis._dataContext = value;\n    //}\n    /**\r\n     * @return Item's data\r\n     */\n    /*\r\n    public get dataContext(): Object {\r\n       // It's because data of tree series is TreeMapDataItems.\r\n       if (this._dataContext) {\r\n           return (<any>this._dataContext).dataContext;\r\n       }\r\n    }*/\n    /**\r\n     * The name of the item's parent item.\r\n     *\r\n     * @return Parent name\r\n     */\n    get: function get() {\n      var treeMapDataItem = this.treeMapDataItem;\n      if (treeMapDataItem && treeMapDataItem.parent) {\n        return treeMapDataItem.parent.name;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"value\", {\n    /**\r\n     * Item's numeric value.\r\n     *\r\n     * @readonly\r\n     * @return Value\r\n     */\n    get: function get() {\n      var treeMapDataItem = this.treeMapDataItem;\n      if (treeMapDataItem) {\n        return treeMapDataItem.value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"treeMapDataItem\", {\n    /**\r\n     * A corresponding data item from the tree map.\r\n     *\r\n     * @readonly\r\n     * @return Data item\r\n     */\n    get: function get() {\n      return this._dataContext;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n  TreeMapSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var treeMapDataItem = this.treeMapDataItem;\n    if (treeMapDataItem) {\n      treeMapDataItem.hide(duration);\n    }\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n  TreeMapSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    var treeMapDataItem = this.treeMapDataItem;\n    if (treeMapDataItem) {\n      treeMapDataItem.show(duration, delay, fields);\n    }\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n  return TreeMapSeriesDataItem;\n}(ColumnSeriesDataItem);\nexport { TreeMapSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar TreeMapSeries = /** @class */function (_super) {\n  __extends(TreeMapSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TreeMapSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"TreeMapSeries\";\n    _this.applyTheme();\n    _this.fillOpacity = 1;\n    _this.strokeOpacity = 1;\n    _this.minBulletDistance = 0;\n    _this.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\n    _this.columns.template.configField = \"config\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"background\");\n    _this.dataFields.openValueX = \"x0\";\n    _this.dataFields.valueX = \"x1\";\n    _this.dataFields.openValueY = \"y0\";\n    _this.dataFields.valueY = \"y1\";\n    _this.sequencedInterpolation = false;\n    _this.showOnInit = false;\n    // otherwise nodes don't stack nicely to each other\n    _this.columns.template.pixelPerfect = false;\n    return _this;\n  }\n  /**\r\n   * Processes data item.\r\n   *\r\n   * @param dataItem     Data item\r\n   * @param dataContext  Raw data\r\n   * @param index        Index of the data item\r\n   */\n  TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {\n    dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\n    _super.prototype.processDataItem.call(this, dataItem, dataContext);\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  TreeMapSeries.prototype.createDataItem = function () {\n    return new TreeMapSeriesDataItem();\n  };\n  /**\r\n   * Shows series.\r\n   *\r\n   * @param duration  Duration of fade in (ms)\r\n   * @return Animation\r\n   */\n  TreeMapSeries.prototype.show = function (duration) {\n    if (this.preventShow) {\n      return;\n    }\n    var interpolationDuration = this.defaultState.transitionDuration;\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n    this.dataItems.each(function (dataItem) {\n      //dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\n      dataItem.show(duration);\n    });\n    return _super.prototype.showReal.call(this, interpolationDuration);\n  };\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param duration  Duration of fade out (ms)\r\n   * @return Animation\r\n   */\n  TreeMapSeries.prototype.hide = function (duration) {\n    var interpolationDuration = this.defaultState.transitionDuration;\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n    var animation = _super.prototype.hideReal.call(this, interpolationDuration);\n    this.dataItems.each(function (dataItem) {\n      //dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\n      dataItem.hide(duration);\n    });\n    return animation;\n  };\n  /**\r\n   * Process values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMapSeries.prototype.processValues = function () {\n    // Just overriding so that inherited method does not kick in.\n  };\n  /**\r\n   * Returns relative start location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n  TreeMapSeries.prototype.getStartLocation = function (dataItem) {\n    return 0;\n  };\n  /**\r\n   * Returns relative end location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n  TreeMapSeries.prototype.getEndLocation = function (dataItem) {\n    return 1;\n  };\n  /**\r\n   * @ignore\r\n   */\n  TreeMapSeries.prototype.dataChangeUpdate = function () {};\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  TreeMapSeries.prototype.processConfig = function (config) {\n    if (config) {\n      // Add empty data fields if the they are not set, so that XYSeries\n      // dataField check does not result in error.\n      if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\n        config.dataFields = {};\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n  TreeMapSeries.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    //column.copyFrom(<any>this.columns.template);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n  TreeMapSeries.prototype.disableUnusedColumns = function (dataItem) {\n    _super.prototype.disableUnusedColumns.call(this, dataItem);\n    if (dataItem.column) {\n      dataItem.column.__disabled = false;\n    }\n  };\n  return TreeMapSeries;\n}(ColumnSeries);\nexport { TreeMapSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;","map":{"version":3,"names":["ColumnSeries","ColumnSeriesDataItem","visualProperties","registry","InterfaceColorSet","$type","RoundedRectangle","$object","TreeMapSeriesDataItem","_super","__extends","_this","call","className","applyTheme","Object","defineProperty","prototype","get","treeMapDataItem","parent","name","value","_dataContext","hide","duration","delay","toValue","fields","show","TreeMapSeries","fillOpacity","strokeOpacity","minBulletDistance","columns","template","tooltipText","configField","interfaceColors","stroke","getFor","dataFields","openValueX","valueX","openValueY","valueY","sequencedInterpolation","showOnInit","pixelPerfect","processDataItem","dataItem","dataContext","seriesDataItem","createDataItem","preventShow","interpolationDuration","defaultState","transitionDuration","isNumber","dataItems","each","showReal","animation","hideReal","processValues","getStartLocation","getEndLocation","dataChangeUpdate","processConfig","config","hasValue","isObject","createLegendMarker","marker","w","pixelWidth","h","pixelHeight","removeChildren","column","createChild","shouldClone","copyProperties","padding","width","height","legendDataItem","color","fill","colorOrig","disableUnusedColumns","__disabled","registeredClasses"],"sources":["../../../../../src/.internal/charts/series/TreeMapSeries.ts"],"sourcesContent":["/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tif(this.preventShow){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\t\t\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\treturn 1;\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tsuper.disableUnusedColumns(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.__disabled = false;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}