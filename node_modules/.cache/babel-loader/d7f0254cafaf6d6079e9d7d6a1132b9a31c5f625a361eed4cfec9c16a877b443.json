{"ast":null,"code":"/**\r\n * 3D column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { Column3D } from \"../elements/Column3D\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\nvar ColumnSeries3DDataItem = /** @class */function (_super) {\n  __extends(ColumnSeries3DDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ColumnSeries3DDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ColumnSeries3DDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return ColumnSeries3DDataItem;\n}(ColumnSeriesDataItem);\nexport { ColumnSeries3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar ColumnSeries3D = /** @class */function (_super) {\n  __extends(ColumnSeries3D, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ColumnSeries3D() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ColumnSeries3D\";\n    _this.columns.template.column3D.applyOnClones = true;\n    _this.columns.template.hiddenState.properties.visible = true;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ColumnSeries3D.prototype, \"columnsContainer\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      var chart = this.chart;\n      if (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\n        return chart.columnsContainer;\n      } else {\n        return this._columnsContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  ColumnSeries3D.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n    if (dataItem.column) {\n      dataItem.column.dx = this.dx;\n      dataItem.column.dy = this.dy;\n      dataItem.column.visible = this.visible;\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ColumnSeries3D.prototype.validateDataElements = function () {\n    _super.prototype.validateDataElements.call(this);\n    if (this.chart) {\n      this.chart.invalidateLayout();\n    }\n  };\n  /**\r\n   * Returns an element to use for 3D bar.\r\n   * @ignore\r\n   * @return Element.\r\n   */\n  ColumnSeries3D.prototype.createColumnTemplate = function () {\n    return new Column3D();\n  };\n  Object.defineProperty(ColumnSeries3D.prototype, \"depth\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Depth (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"depth\");\n    },\n    /**\r\n     * Depth (height) of the slices in the series in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Depth (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"depth\", value, true);\n      var template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\n      template.column3D.depth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries3D.prototype, \"angle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Angle (0-360)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"angle\");\n    },\n    /**\r\n     * Angle of view for the slices in series. (0-360)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"angle\", value);\n      var template = this.columns.template;\n      template.column3D.angle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSeries3D;\n}(ColumnSeries);\nexport { ColumnSeries3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;","map":{"version":3,"names":["ColumnSeries","ColumnSeriesDataItem","Column3D","registry","ColumnSeries3DDataItem","_super","__extends","_this","call","className","applyTheme","ColumnSeries3D","columns","template","column3D","applyOnClones","hiddenState","properties","visible","Object","defineProperty","prototype","get","chart","columnsContainer","leftAxesContainer","layout","rightAxesContainer","bottomAxesContainer","topAxesContainer","_columnsContainer","validateDataElementReal","dataItem","column","dx","dy","validateDataElements","invalidateLayout","createColumnTemplate","getPropertyValue","set","value","setPropertyValue","depth","angle","registeredClasses"],"sources":["../../../../../src/.internal/charts/series/ColumnSeries3D.ts"],"sourcesContent":["/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n\t\t\treturn chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif (dataItem.column) {\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\r\n\t\t\tdataItem.column.visible = this.visible;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}