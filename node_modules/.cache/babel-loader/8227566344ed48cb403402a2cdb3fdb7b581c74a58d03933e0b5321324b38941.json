{"ast":null,"code":"/**\r\n * DurationAxis module\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar DurationAxisDataItem = /** @class */function (_super) {\n  __extends(DurationAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DurationAxisDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"DurationAxisDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return DurationAxisDataItem;\n}(ValueAxisDataItem);\nexport { DurationAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar DurationAxis = /** @class */function (_super) {\n  __extends(DurationAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DurationAxis() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     */\n    _this._baseUnit = \"second\";\n    _this.className = \"DurationAxis\";\n    _this.setPropertyValue(\"maxZoomFactor\", 1000000);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Formats the value according to axis' own [[DurationFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n  DurationAxis.prototype.formatLabel = function (value, format) {\n    return this.durationFormatter.format(value, format || this.axisDurationFormat);\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n  DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    var e_1, _a;\n    var minMaxStep;\n    var timeUnit = this.baseUnit;\n    // we don't allow to go to smaller units, setting so to avoid invalidation\n    this.setPropertyValue(\"maxPrecision\", 0);\n    if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max;\n      // in case min and max is the same, use max\n      if (difference === 0) {\n        difference = Math.abs(max);\n      }\n      var step = difference / gridCount;\n      var divisors = [60, 30, 20, 15, 10, 2, 1];\n      var realDivisor = 1;\n      if (timeUnit == \"hour\") {\n        divisors = [24, 12, 6, 4, 2, 1];\n      }\n      try {\n        for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\n          var divisor = divisors_1_1.value;\n          if (difference / divisor > gridCount) {\n            realDivisor = divisor;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var count = Math.ceil((max - min) / realDivisor / gridCount);\n      var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\n      var power = Math.pow(10, Math.floor(exponent)) / 10;\n      var reducedCount = count / power;\n      // find closest to divisor\n      var closest = $math.closest(divisors, reducedCount);\n      count = closest * power;\n      step = realDivisor * count;\n      // TODO can this be removed ?\n      this.durationFormatter.getValueUnit(step, this.baseUnit);\n      min = Math.floor(min / step) * step;\n      max = Math.ceil(max / step) * step;\n      if (strictMode) {\n        min -= step;\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        }\n        max += step;\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      }\n      minMaxStep = {\n        min: min,\n        max: max,\n        step: step\n      };\n    } else {\n      minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\n    }\n    // choose duration formatter based on step\n    this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\n    return minMaxStep;\n  };\n  Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\n    /**\r\n     * @return Duration format for axis labels\r\n     */\n    get: function get() {\n      return this._tooltipDurationFormat;\n    },\n    /**\r\n     * A special duration format to apply axis tooltips.\r\n     *\r\n     * Will use same format as for labels, if not set.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n     * @param value  Duration format for axis labels\r\n     */\n    set: function set(value) {\n      this._tooltipDurationFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n  DurationAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\n    var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n  Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function get() {\n      return this._baseUnit;\n    },\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     *\r\n     * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n     * \"day\", \"week\", \"month\", \"year\".\r\n     *\r\n     * @default \"second\"\r\n     * @param timeUnit\r\n     */\n    set: function set(timeUnit) {\n      if (this._baseUnit != timeUnit) {\n        this._baseUnit = timeUnit;\n        this.durationFormatter.baseUnit = timeUnit;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n  DurationAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.baseUnit = source.baseUnit;\n  };\n  return DurationAxis;\n}(ValueAxis);\nexport { DurationAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;","map":{"version":3,"names":["ValueAxis","ValueAxisDataItem","registry","$math","DurationAxisDataItem","_super","__extends","_this","call","className","applyTheme","DurationAxis","_baseUnit","setPropertyValue","prototype","formatLabel","value","format","durationFormatter","axisDurationFormat","adjustMinMax","min","max","difference","gridCount","strictMode","minMaxStep","timeUnit","baseUnit","Math","round","initialMin","initialMax","abs","step","divisors","realDivisor","divisors_1","__values","divisors_1_1","next","done","divisor","count","ceil","exponent","log","LOG10E","power","pow","floor","reducedCount","closest","getValueUnit","getFormat","Object","defineProperty","get","_tooltipDurationFormat","set","getTooltipText","position","positionToValue","_stepDecimalPlaces","valueStr","tooltipDurationFormat","_adapterO","apply","invalidate","copyFrom","source","registeredClasses"],"sources":["../../../../../src/.internal/charts/axes/DurationAxis.ts"],"sourcesContent":["/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\tlet valueStr = this.formatLabel(value, this.tooltipDurationFormat)\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}