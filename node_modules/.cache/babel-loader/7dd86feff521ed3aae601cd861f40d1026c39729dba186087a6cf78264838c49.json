{"ast":null,"code":"/**\r\n * Axis Label module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisLabel } from \"./AxisLabel\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { Percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\nvar AxisLabelCircular = /** @class */function (_super) {\n  __extends(AxisLabelCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n  function AxisLabelCircular() {\n    var _this = _super.call(this) || this;\n    /**\r\n     *\r\n     * @ignore\r\n     */\n    _this.fdx = 0;\n    /**\r\n     *\r\n     * @ignore\r\n     */\n    _this.fdy = 0;\n    _this.className = \"AxisLabelCircular\";\n    _this.padding(0, 0, 0, 0);\n    _this.location = 0.5;\n    _this.locationOnPath = 0.5;\n    _this.radius = 0;\n    _this.isMeasured = false;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\n    /**\r\n     * @return Rotation angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"relativeRotation\");\n    },\n    /**\r\n     * Relative rotation of the label.\r\n     *\r\n     * It is an angle to circle. In case 90, labels will be positioned like rays\r\n     * of light, if 0 - positioned along the circle.\r\n     *\r\n     * @param value Rotation angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"relativeRotation\", value, true);\n      if (!$type.hasValue(value)) {\n        this.rotation = undefined;\n        var dataItem = this.dataItem;\n        if (dataItem && dataItem.component) {\n          dataItem.component.invalidateDataItems();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Distance from axis circle to label in pixels or percent.\r\n     *\r\n     * @param value Distance (px or percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"bent\", {\n    /**\r\n     * @return Bent?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"bent\");\n    },\n    /**\r\n     * Specifies if label should be bent along the circle.\r\n     *\r\n     * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n     *\r\n     * @since 4.1.2\r\n     * @default false\r\n     * @param  value  Bent?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"bent\", value, true);\n      this.setPropertyValue(\"wrap\", false);\n      this.setPropertyValue(\"horizontalCenter\", \"none\");\n      this.setPropertyValue(\"verticalCenter\", \"none\");\n      if (value) {\n        this.setPropertyValue(\"dx\", 0);\n        this.setPropertyValue(\"dy\", 0);\n        this.setPropertyValue(\"x\", 0);\n        this.setPropertyValue(\"y\", 0);\n        this.setPropertyValue(\"rotation\", 0);\n        //this.setPropertyValue(\"relativeRotation\", undefined);\n        this.fdx = 0;\n        this.fdy = 0;\n        this.textAlign = \"middle\";\n      } else {\n        if (this.textPathElement) {\n          this.textPathElement.dispose();\n          this.textPathElement = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns label radius in pixels.\r\n   *\r\n   * @param   axisRadius  Radius\r\n   * @return              Pixel radius\r\n   */\n  AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\n    var sign = 1;\n    if (this.inside) {\n      sign = -1;\n    }\n    return $utils.relativeToValue(this.radius, axisRadius) * sign;\n  };\n  /**\r\n   * Returns label horizontal radius in pixels.\r\n   *\r\n   * @param   axisRadius   Radius\r\n   * @param   axisRadiusY  Vertical radius\r\n   * @return               Radius\r\n   */\n  AxisLabelCircular.prototype.pixelRadiusY = function (axisRadius, axisRadiusY) {\n    var sign = 1;\n    if (this.inside) {\n      sign = -1;\n    }\n    var radius = this.radius;\n    if ($type.isNumber(radius)) {\n      radius *= axisRadiusY / axisRadius;\n      return $utils.relativeToValue(radius, axisRadius) * sign;\n    } else {\n      return $utils.relativeToValue(radius, axisRadiusY) * sign;\n    }\n  };\n  /**\r\n   * [fixPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param point       Label affixation point\r\n   * @param axisRadius  Distance from point (px)\r\n   */\n  AxisLabelCircular.prototype.fixPosition = function (angle, axisRadius, axisRadiusY, dx, dy) {\n    if (!$type.isNumber(axisRadiusY)) {\n      axisRadiusY = axisRadius;\n    }\n    if (!$type.isNumber(dx)) {\n      dx = 0;\n    }\n    if (!$type.isNumber(dy)) {\n      dy = 0;\n    }\n    var point = {\n      x: axisRadius * $math.cos(angle),\n      y: axisRadiusY * $math.sin(angle)\n    };\n    if (this.invalid) {\n      this.validate(); //@todo\" check if we need this\n    }\n    var isNegative = false;\n    var realRadius = this.radius;\n    if (realRadius instanceof Percent && realRadius.value < 0) {\n      isNegative = true;\n    } else if (realRadius < 0) {\n      isNegative = true;\n    }\n    var relativeRotation = this.relativeRotation;\n    var labelRadius = this.pixelRadius(axisRadius);\n    if (this.bent) {\n      var point_1 = {\n        x: (axisRadius + labelRadius) * $math.cos(angle + 180),\n        y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180)\n      };\n      this.path = $path.moveTo(point_1) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\n      if (this.textPathElement) {\n        this.textPathElement.attr({\n          \"startOffset\": this.locationOnPath * 100 + \"%\"\n        });\n      }\n      return;\n    }\n    // WHEN ROTATED\n    if ($type.isNumber(relativeRotation)) {\n      this.horizontalCenter = \"none\";\n      this.verticalCenter = \"none\";\n      angle = $math.fitAngleToRange(angle, -180, 180);\n      var pixelWidth = this.bbox.width;\n      var pixelHeight = this.bbox.height;\n      var pixelPaddingBottom = this.pixelPaddingBottom;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      if (angle > 90 || angle < -90) {\n        if (relativeRotation == -90) {\n          relativeRotation = 90;\n          pixelWidth = 0;\n        }\n      } else {\n        if (relativeRotation == -90) {\n          pixelHeight = -pixelHeight;\n        }\n        if (relativeRotation == 90) {\n          relativeRotation = -90;\n          pixelWidth = -pixelPaddingLeft - pixelPaddingRight;\n          pixelHeight = -pixelHeight - pixelPaddingTop - pixelPaddingBottom;\n        }\n      }\n      this.rotation = relativeRotation + angle + 90;\n      var dH = $math.sin(relativeRotation) / 2;\n      var dW = $math.cos(relativeRotation) / 2;\n      var rotation = this.rotation;\n      this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\n      this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\n      if (!this.inside) {\n        labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n      } else {\n        if (angle > 90 || angle < -90) {\n          labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n        } else {\n          labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\n        }\n      }\n      point.x += $math.cos(angle) * labelRadius;\n      point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\n    } else {\n      // END OF ROTATED\n      this.horizontalCenter = \"middle\";\n      this.verticalCenter = \"middle\";\n      if (isNegative) {\n        this.dx = 0;\n        this.dy = 0;\n        point.x = (axisRadius + labelRadius) * $math.cos(angle);\n        point.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\n      } else {\n        // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\n        // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\n        // @todo with this math doesn't work well with inside = true\n        this.dy = this._measuredHeight / 2 * $math.sin(angle); //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\n        // simmilar with dx\n        this.dx = this._measuredWidth / 2 * $math.cos(angle); //(1 - (point.x + axisRadius) / (2 * axisRadius));\n        point.x += $math.cos(angle) * labelRadius;\n        point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\n      }\n    }\n    point.x += dx;\n    point.y += dy;\n    this.fdx = this.dx;\n    this.fdy = this.dy;\n    this.moveTo(point);\n  };\n  return AxisLabelCircular;\n}(AxisLabel);\nexport { AxisLabelCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;","map":{"version":3,"names":["AxisLabel","registry","$math","$type","$path","$utils","Percent","AxisLabelCircular","_super","__extends","_this","call","fdx","fdy","className","padding","location","locationOnPath","radius","isMeasured","applyTheme","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPropertyValue","hasValue","rotation","undefined","dataItem","component","invalidateDataItems","setPercentProperty","textAlign","textPathElement","dispose","pixelRadius","axisRadius","sign","inside","relativeToValue","pixelRadiusY","axisRadiusY","isNumber","fixPosition","angle","dx","dy","point","x","cos","y","sin","invalid","validate","isNegative","realRadius","relativeRotation","labelRadius","bent","point_1","path","moveTo","arcTo","attr","horizontalCenter","verticalCenter","fitAngleToRange","pixelWidth","bbox","width","pixelHeight","height","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","dH","dW","_measuredHeight","_measuredWidth","registeredClasses"],"sources":["../../../../../src/.internal/charts/axes/AxisLabelCircular.ts"],"sourcesContent":["/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tbent?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.locationOnPath = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positioned along the circle.\r\n\t *\r\n\t * @param value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tthis.rotation = undefined;\r\n\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem && dataItem.component) {\r\n\t\t\t\tdataItem.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle.\r\n\t *\r\n\t * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n\t *\r\n\t * @since 4.1.2\r\n\t * @default false\r\n\t * @param  value  Bent?\r\n\t */\r\n\tpublic set bent(value: boolean) {\r\n\t\tthis.setPropertyValue(\"bent\", value, true);\r\n\t\tthis.setPropertyValue(\"wrap\", false);\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\t\tthis.setPropertyValue(\"dy\", 0);\r\n\t\t\tthis.setPropertyValue(\"x\", 0);\r\n\t\t\tthis.setPropertyValue(\"y\", 0);\r\n\t\t\tthis.setPropertyValue(\"rotation\", 0)\r\n\t\t\t//this.setPropertyValue(\"relativeRotation\", undefined);\r\n\t\t\tthis.fdx = 0;\r\n\t\t\tthis.fdy = 0;\r\n\t\t\tthis.textAlign = \"middle\";\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(this.textPathElement){\r\n\t\t\t\tthis.textPathElement.dispose();\r\n\t\t\t\tthis.textPathElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bent?\r\n\t */\r\n\tpublic get bent(): boolean {\r\n\t\treturn this.getPropertyValue(\"bent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label radius in pixels.\r\n\t * \r\n\t * @param   axisRadius  Radius\r\n\t * @return              Pixel radius\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label horizontal radius in pixels.\r\n\t * \r\n\t * @param   axisRadius   Radius\r\n\t * @param   axisRadiusY  Vertical radius\r\n\t * @return               Radius\r\n\t */\r\n\tpublic pixelRadiusY(axisRadius: number, axisRadiusY: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet radius = this.radius;\r\n\r\n\t\tif ($type.isNumber(radius)) {\r\n\t\t\tradius *= axisRadiusY / axisRadius;\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadius) * sign;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param point       Label affixation point\r\n\t * @param axisRadius  Distance from point (px)\r\n\t */\r\n\tpublic fixPosition(angle: number, axisRadius: number, axisRadiusY?: number, dx?: number, dy?: number) {\r\n\t\tif (!$type.isNumber(axisRadiusY)) {\r\n\t\t\taxisRadiusY = axisRadius;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dx)) {\r\n\t\t\tdx = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dy)) {\r\n\t\t\tdy = 0;\r\n\t\t}\r\n\r\n\t\tlet point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet isNegative = false;\r\n\t\tlet realRadius = this.radius;\r\n\r\n\t\tif (realRadius instanceof Percent && realRadius.value < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\t\telse if (realRadius < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif (this.bent) {\r\n\t\t\tlet point = { x: (axisRadius + labelRadius )* $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n\t\t\tthis.path = $path.moveTo(point) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n\t\t\t\r\n\t\t\tif (this.textPathElement) {\r\n\t\t\t\tthis.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" })\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WHEN ROTATED\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.horizontalCenter = \"none\";\r\n\t\t\tthis.verticalCenter = \"none\";\r\n\r\n\t\t\tangle = $math.fitAngleToRange(angle, -180, 180);\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n\t\t\t\t\tpixelHeight = - pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// END OF ROTATED\r\n\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\t\tif (isNegative) {\r\n\t\t\t\tthis.dx = 0;\r\n\t\t\t\tthis.dy = 0;\r\n\t\t\t\tpoint.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n\t\t\t\tpoint.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t\t\t// @todo with this math doesn't work well with inside = true\r\n\t\t\t\tthis.dy = this._measuredHeight / 2 * $math.sin(angle) //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n\t\t\t\t// simmilar with dx\r\n\t\t\t\tthis.dx = this._measuredWidth / 2 * $math.cos(angle) //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += dx;\r\n\t\tpoint.y += dy;\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tthis.moveTo(point);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}