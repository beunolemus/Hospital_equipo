{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisFill } from \"./AxisFill\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\nvar AxisFillCircular = /** @class */function (_super) {\n  __extends(AxisFillCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Axis\r\n   */\n  function AxisFillCircular(axis) {\n    var _this = _super.call(this, axis) || this;\n    _this.className = \"AxisFillCircular\";\n    _this.element = _this.paper.add(\"path\");\n    _this.radius = percent(100);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisFillCircular.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.__disabled || this.disabled) {\n      return;\n    }\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      this.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\n      this.path = this.fillPath;\n    }\n  };\n  Object.defineProperty(AxisFillCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFillCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFillCircular.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Corner radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n    /**\r\n     * Corner radius for the fill. In pixels.\r\n     *\r\n     * @param value  Corner radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFillCircular;\n}(AxisFill);\nexport { AxisFillCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;","map":{"version":3,"names":["AxisFill","percent","registry","$type","AxisFillCircular","_super","__extends","axis","_this","call","className","element","paper","add","radius","applyTheme","prototype","draw","__disabled","disabled","renderer","fillPath","getPositionRangePath","startPosition","endPosition","hasValue","innerRadius","cornerRadius","path","Object","defineProperty","get","getPropertyValue","set","value","setPercentProperty","setPropertyValue","registeredClasses"],"sources":["../../../../../src/.internal/charts/axes/AxisFillCircular.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif(this.__disabled || this.disabled){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n"],"mappings":";AAAA;;;;;;AAMA,SAASA,QAAQ,QAAiE,YAAY;AAE9F,SAAkBC,OAAO,QAAQ,0BAA0B;AAE3D,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AA4C9C;;;;;;AAOA;;;;;;;AAOA,IAAAC,gBAAA,0BAAAC,MAAA;EAAsCC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAyBrC;;;;;EAKA,SAAAD,iBAAYG,IAAU;IAAtB,IAAAC,KAAA,GACCH,MAAA,CAAAI,IAAA,OAAMF,IAAI,CAAC;IAEXC,KAAI,CAACE,SAAS,GAAG,kBAAkB;IAEnCF,KAAI,CAACG,OAAO,GAAGH,KAAI,CAACI,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IAErCL,KAAI,CAACM,MAAM,GAAGb,OAAO,CAAC,GAAG,CAAC;IAE1BO,KAAI,CAACO,UAAU,EAAE;;EAClB;EAEA;;;;;EAKOX,gBAAA,CAAAY,SAAA,CAAAC,IAAI,GAAX;IACCZ,MAAA,CAAAW,SAAA,CAAMC,IAAI,CAAAR,IAAA,MAAE;IAEZ,IAAG,IAAI,CAACS,UAAU,IAAI,IAAI,CAACC,QAAQ,EAAC;MACnC;;IAGD,IAAI,IAAI,CAACZ,IAAI,EAAE;MACd,IAAIa,QAAQ,GAA+C,IAAI,CAACb,IAAI,CAACa,QAAQ;MAC7E,IAAI,CAACC,QAAQ,GAAGD,QAAQ,CAACE,oBAAoB,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACV,MAAM,EAAEX,KAAK,CAACsB,QAAQ,CAAC,IAAI,CAACC,WAAW,CAAC,GAAG,IAAI,CAACA,WAAW,GAAGN,QAAQ,CAACM,WAAW,EAAE,IAAI,CAACC,YAAY,CAAC;MAC/L,IAAI,CAACC,IAAI,GAAG,IAAI,CAACP,QAAQ;;EAE3B,CAAC;EAODQ,MAAA,CAAAC,cAAA,CAAW1B,gBAAA,CAAAY,SAAA,eAAW;IAItB;;;SAGA,SAAAe,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,aAAa,CAAC;IAC5C,CAAC;IAdD;;;;;SAKA,SAAAC,IAAuBC,KAAuB;MAC7C,IAAI,CAACC,kBAAkB,CAAC,aAAa,EAAED,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;IACtE,CAAC;;;;EAcDL,MAAA,CAAAC,cAAA,CAAW1B,gBAAA,CAAAY,SAAA,UAAM;IAIjB;;;SAGA,SAAAe,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAdD;;;;;SAKA,SAAAC,IAAkBC,KAAuB;MACxC,IAAI,CAACC,kBAAkB,CAAC,QAAQ,EAAED,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;IACjE,CAAC;;;;EAcDL,MAAA,CAAAC,cAAA,CAAW1B,gBAAA,CAAAY,SAAA,gBAAY;IAIvB;;;SAGA,SAAAe,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,cAAc,CAAC;IAC7C,CAAC;IAdD;;;;;SAKA,SAAAC,IAAwBC,KAAa;MACpC,IAAI,CAACE,gBAAgB,CAAC,cAAc,EAAEF,KAAK,EAAE,IAAI,CAAC;IACnD,CAAC;;;;EASF,OAAA9B,gBAAC;AAAD,CAAC,CA7GqCJ,QAAQ;;AA+G9C;;;;;;AAMAE,QAAQ,CAACmC,iBAAiB,CAAC,kBAAkB,CAAC,GAAGjC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}