{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\r\n * Sankey diagram module.\r\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { SankeyNode } from \"../elements/SankeyNode\";\nimport { SankeyLink } from \"../elements/SankeyLink\";\nimport { Animation } from \"../../core/utils/Animation\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar SankeyDiagramDataItem = /** @class */function (_super) {\n  __extends(SankeyDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyDiagramDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SankeyDiagramDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return SankeyDiagramDataItem;\n}(FlowDiagramDataItem);\nexport { SankeyDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\nvar SankeyDiagram = /** @class */function (_super) {\n  __extends(SankeyDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyDiagram() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"SankeyDiagram\";\n    _this.orientation = \"horizontal\";\n    _this.nodeAlign = \"middle\";\n    _this.nodesContainer.width = percent(100);\n    _this.nodesContainer.height = percent(100);\n    _this.linksContainer.width = percent(100);\n    _this.linksContainer.height = percent(100);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyDiagram.prototype.validateData = function () {\n    var _this = this;\n    this._valueHeight = undefined;\n    _super.prototype.validateData.call(this);\n    this._levelCount = 0;\n    this.nodes.each(function (key, node) {\n      node.level = undefined;\n    });\n    this.nodes.each(function (key, node) {\n      node.level = _this.getNodeLevel(node, 0);\n      _this._levelCount = $math.max(_this._levelCount, node.level);\n    });\n  };\n  /**\r\n   * Returns node's highest level.\r\n   *\r\n   * @param node   Node\r\n   * @param level  Current level\r\n   * @return New level\r\n   */\n  SankeyDiagram.prototype.getNodeLevel = function (node, level) {\n    var _this = this;\n    var levels = [level];\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      if (link.fromNode) {\n        if ($type.isNumber(link.fromNode.level)) {\n          levels.push(link.fromNode.level + 1);\n        } else {\n          _this._counter = 0;\n          _this.checkLoop(link.fromNode);\n          if (_this._counter < _this.dataItems.length) {\n            levels.push(_this.getNodeLevel(link.fromNode, level + 1));\n          }\n        }\n      }\n    });\n    return Math.max.apply(Math, __spread(levels));\n  };\n  /**\r\n   * Checks if there's no loop in the ancestor chain.\r\n   *\r\n   * @param  node  Node\r\n   */\n  SankeyDiagram.prototype.checkLoop = function (node) {\n    var _this = this;\n    this._counter++;\n    if (this._counter > this.dataItems.length) {\n      return;\n    }\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      _this.checkLoop(link.fromNode);\n    });\n  };\n  /**\r\n   * Calculates relation between pixel height and total value.\r\n   *\r\n   * In Sankey the actual thickness of links and height of nodes will depend\r\n   * on their values.\r\n   */\n  SankeyDiagram.prototype.calculateValueHeight = function () {\n    var _this = this;\n    // calculate sums of each level\n    this._levelSum = {};\n    this._levelNodesCount = {};\n    this.maxSum = 0;\n    var total = this.dataItem.values.value.sum;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      _this.getNodeValue(node);\n    });\n    this.nodes.each(function (key, node) {\n      var level = node.level;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      if ($type.isNumber(_this._levelSum[level])) {\n        _this._levelSum[level] += value;\n      } else {\n        _this._levelSum[level] = value;\n      }\n      if ($type.isNumber(_this._levelNodesCount[level])) {\n        _this._levelNodesCount[level]++;\n      } else {\n        _this._levelNodesCount[level] = 1;\n      }\n    });\n    var availableHeight;\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n    var maxSumLevel;\n    var minHeight;\n    $object.each(this._levelSum, function (key, value) {\n      var realValue = value;\n      var levelNodeCount = _this._levelNodesCount[key];\n      var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\n      if (valueHeight == Infinity) {\n        valueHeight = 0;\n      }\n      if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\n        minHeight = valueHeight;\n        _this.maxSum = realValue;\n        maxSumLevel = $type.toNumber(key);\n      }\n    });\n    this._maxSumLevel = maxSumLevel;\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\n    if (valueHeight == Infinity) {\n      valueHeight = 0;\n    }\n    if (!$type.isNumber(this.valueHeight)) {\n      this.valueHeight = valueHeight;\n    } else {\n      var finalHeight = void 0;\n      try {\n        finalHeight = this._heightAnimation.animationOptions[0].to;\n      } catch (err) {}\n      // without animations it will be non-smooth as maxValue jumps from one column to another\n      if (finalHeight != valueHeight) {\n        var duration = this.interpolationDuration;\n        try {\n          duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\n        } catch (err) {}\n        this._heightAnimation = new Animation(this, {\n          property: \"valueHeight\",\n          from: this.valueHeight,\n          to: valueHeight\n        }, duration, this.interpolationEasing).start();\n        this._disposers.push(this._heightAnimation);\n      }\n    }\n  };\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyDiagram.prototype.validate = function () {\n    var _this = this;\n    _super.prototype.validate.call(this);\n    this.calculateValueHeight();\n    var container = this.nodesContainer;\n    var nextCoordinate = {};\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var total = this.dataItem.values.value.sum;\n    var availableHeight;\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = 0;\n      var nodeCount = _this._levelNodesCount[level];\n      switch (_this.nodeAlign) {\n        case \"bottom\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\n          break;\n        case \"middle\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\n          break;\n      }\n      if (_this.maxSum == 0) {\n        switch (_this.nodeAlign) {\n          case \"bottom\":\n            levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n          case \"middle\":\n            levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n        }\n      }\n      node.parent = container;\n      var delta;\n      var x;\n      var y;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      if (_this.orientation == \"horizontal\") {\n        delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\n        x = delta * node.level;\n        y = nextCoordinate[level] || levelCoordinate;\n        var h = value * _this.valueHeight;\n        if (total == 0 && h == 0) {\n          h = _this.minNodeSize * availableHeight;\n        }\n        node.height = h;\n        node.minX = x;\n        node.maxX = x;\n        nextCoordinate[level] = y + h + _this.nodePadding;\n      } else {\n        delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\n        x = nextCoordinate[level] || levelCoordinate;\n        y = delta * node.level;\n        var w = value * _this.valueHeight;\n        if (total == 0 && w == 0) {\n          w = _this.minNodeSize * availableHeight;\n        }\n        node.width = w;\n        node.minY = y;\n        node.maxY = y;\n        nextCoordinate[level] = x + w + _this.nodePadding;\n      }\n      node.x = x;\n      node.y = y;\n    });\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n  SankeyDiagram.prototype.showReal = function (duration) {\n    var _this = this;\n    if (this.preventShow) {\n      return;\n    }\n    if (this.interpolationDuration > 0) {\n      var container_1 = this.nodesContainer;\n      var i_1 = 0;\n      $iter.each(this.links.iterator(), function (link) {\n        link.hide(0);\n      });\n      $iter.each(this._sorted, function (strNode) {\n        var node = strNode[1];\n        var property;\n        if (_this.orientation == \"horizontal\") {\n          node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\n          property = \"dx\";\n        } else {\n          node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\n          property = \"dy\";\n        }\n        var delay = 0;\n        var duration = _this.interpolationDuration;\n        if (_this.sequencedInterpolation) {\n          delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\n        }\n        node.opacity = 0;\n        node.invalidateLinks();\n        node.animate([{\n          property: \"opacity\",\n          from: 0,\n          to: 1\n        }, {\n          property: property,\n          to: 0\n        }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n          var animation = dataItem.link.show(_this.interpolationDuration);\n          if (animation && !animation.isFinished()) {\n            animation.delay(delay);\n          }\n        });\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n          if (!dataItem.fromNode) {\n            var animation = dataItem.link.show(_this.interpolationDuration);\n            if (animation && !animation.isFinished()) {\n              animation.delay(delay);\n            }\n          }\n        });\n        i_1++;\n      });\n    }\n    return _super.prototype.showReal.call(this);\n  };\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n  SankeyDiagram.prototype.changeSorting = function () {\n    var _this = this;\n    this.sortNodes();\n    var nextCoordinate = {};\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\n      var property;\n      var nodeHeight;\n      if (_this.orientation == \"horizontal\") {\n        property = \"y\";\n        nodeHeight = node.pixelHeight;\n      } else {\n        property = \"x\";\n        nodeHeight = node.pixelWidth;\n      }\n      node.animate({\n        property: property,\n        to: nextCoordinate[level] || levelCoordinate\n      }, _this.interpolationDuration, _this.interpolationEasing);\n      nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\n      node.invalidateLinks();\n    });\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  SankeyDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sankey diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n  SankeyDiagram.prototype.createDataItem = function () {\n    return new SankeyDiagramDataItem();\n  };\n  Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\n    /**\r\n     * @returns Returns nodeAlign value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"nodeAlign\");\n    },\n    /**\r\n     * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n     *\r\n     * @param value  Node sorting\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"nodeAlign\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var nameLabel = this.nodes.template.nameLabel;\n      if (value == \"vertical\") {\n        this.nodes.template.width = undefined;\n        nameLabel.label.horizontalCenter = \"middle\";\n        nameLabel.locationX = 0.5;\n      } else {\n        this.nodes.template.height = undefined;\n        nameLabel.label.horizontalCenter = \"left\";\n        nameLabel.locationX = 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  SankeyDiagram.prototype.createNode = function () {\n    var node = new SankeyNode();\n    this._disposers.push(node);\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n  SankeyDiagram.prototype.createLink = function () {\n    var link = new SankeyLink();\n    this._disposers.push(link);\n    return link;\n  };\n  Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this._valueHeight;\n    },\n    /**\r\n     * @ignore\r\n     */\n    set: function set(value) {\n      if (value != this._valueHeight) {\n        this._valueHeight = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  SankeyDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this._sorted = this.nodes.iterator();\n  };\n  return SankeyDiagram;\n}(FlowDiagram);\nexport { SankeyDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;","map":{"version":3,"names":["FlowDiagram","FlowDiagramDataItem","percent","registry","SankeyNode","SankeyLink","Animation","$iter","$math","$type","$object","SankeyDiagramDataItem","_super","__extends","_this","call","className","applyTheme","SankeyDiagram","orientation","nodeAlign","nodesContainer","width","height","linksContainer","prototype","validateData","_valueHeight","undefined","_levelCount","nodes","each","key","node","level","getNodeLevel","max","levels","incomingDataItems","iterator","link","fromNode","isNumber","push","_counter","checkLoop","dataItems","length","Math","apply","__spread","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","total","dataItem","values","value","sum","_sorted","strNode","getNodeValue","totalIncoming","totalOutgoing","minNodeSize","availableHeight","chartContainer","maxHeight","maxWidth","maxSumLevel","minHeight","realValue","levelNodeCount","valueHeight","nodePadding","Infinity","toNumber","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","to","err","duration","interpolationDuration","template","states","getKey","transitionDuration","property","from","interpolationEasing","start","_disposers","validate","container","nextCoordinate","levelCoordinate","nodeCount","parent","delta","x","y","innerWidth","pixelWidth","h","minX","maxX","innerHeight","pixelHeight","w","minY","maxY","showReal","preventShow","container_1","i_1","links","hide","dx","dy","delay","sequencedInterpolation","sequencedInterpolationDelay","opacity","invalidateLinks","animate","outgoingDataItems","animation","show","isFinished","changeSorting","sortNodes","nodeHeight","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","nameLabel","label","horizontalCenter","locationX","createNode","createLink","invalidate","disposeData","registeredClasses"],"sources":["../../../../../src/.internal/charts/types/SankeyDiagram.ts"],"sourcesContent":["/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}