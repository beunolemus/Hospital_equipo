{"ast":null,"code":"import { renderSlot as _renderSlot, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: $props.id,\n    style: _normalizeStyle('height: ' + $props.height + 'px;')\n  }, [_renderSlot(_ctx.$slots, \"default\")], 12 /* STYLE, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","id","$props","style","_normalizeStyle","height","_renderSlot","_ctx","$slots","_hoisted_1"],"sources":["C:\\Users\\brnol\\Documents\\Hospital\\Hospital_equipo\\src\\components\\LeaFlet.vue"],"sourcesContent":["<template>\r\n  <div :id=\"id\" :style=\"'height: ' + height + 'px;'\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n<script>\r\nimport L from 'leaflet'\r\nexport default {\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 500\r\n    },\r\n    options: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mapoption()\r\n  },\r\n  methods: {\r\n    mapoption() {\r\n      const map = L.map(this.id).setView([37.8, -96], 4)\r\n      const statesData = {\r\n        type: 'FeatureCollection',\r\n        features: this.options\r\n      }\r\n\r\n      const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n      const attribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      const tileLayer = L.tileLayer(tileUrl, { attribution })\r\n\r\n      function getColor(d) {\r\n        return d > 1000 ? '#172d69' : d > 500 ? '#1c367d' : d > 200 ? '#203f92' : d > 100 ? '#2548a7' : d > 50 ? '#2950bc' : d > 20 ? '#2e59d1' : d > 10 ? '#d5def6' : '#c0cdf1'\r\n      }\r\n      function style(feature) {\r\n        return {\r\n          fillColor: getColor(feature.properties.density),\r\n          weight: 2,\r\n          opacity: 1,\r\n          color: 'white',\r\n          dashArray: '3',\r\n          fillOpacity: 0.7\r\n        }\r\n      }\r\n\r\n      L.geoJson(statesData, { style: style }).addTo(map)\r\n\r\n      tileLayer.addTo(map)\r\n      const cloudy = L.icon({\r\n        iconUrl: require('@/assets/images/vectormap/cloudy.png'),\r\n        iconSize: [70, 70], // size of the icon\r\n        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\r\n      })\r\n\r\n      const day = L.icon({\r\n        iconUrl: require('@/assets/images/vectormap/day.png'),\r\n        iconSize: [70, 70], // size of the icon\r\n        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\r\n      })\r\n\r\n      const rainy = L.icon({\r\n        iconUrl: require('@/assets/images/vectormap/rainy-1.png'),\r\n        iconSize: [70, 70], // size of the icon\r\n        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\r\n      })\r\n\r\n      const snowy = L.icon({\r\n        iconUrl: require('@/assets/images/vectormap/snowy-6.png'),\r\n        iconSize: [70, 70], // size of the icon\r\n        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\r\n      })\r\n\r\n      const cloudy22 = L.icon({\r\n        iconUrl: require('@/assets/images/vectormap/cloudy-day-1.png'),\r\n        iconSize: [70, 70], // size of the icon\r\n        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\r\n      })\r\n\r\n      const thunder = L.icon({\r\n        iconUrl: require('@/assets/images/vectormap/thunder.png'),\r\n        iconSize: [70, 70], // size of the icon\r\n        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\r\n      })\r\n\r\n      L.marker([37.8, -96], { icon: cloudy }).addTo(map).bindPopup('Cloudy Day')\r\n      L.marker([31, -110.6], { icon: day }).addTo(map).bindPopup('Sunny Day')\r\n      L.marker([32.4, -88.1], { icon: rainy }).addTo(map).bindPopup('Heavy Rain')\r\n      L.marker([44.9, -92.9], { icon: snowy }).addTo(map).bindPopup('Snowy')\r\n      L.marker([32.5, -99.1], { icon: cloudy22 }).addTo(map).bindPopup('Cloudy Sunny Day')\r\n      L.marker([43.9, -111.8], { icon: thunder }).addTo(map).bindPopup('Thunder Strom')\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n@import '../assets/leaflet.css';\r\n</style>\r\n"],"mappings":";iBAAA;;uBACEA,mBAAA,CAEM;IAFAC,EAAE,EAAEC,MAAA,CAAAD,EAAE;IAAGE,KAAK,EADtBC,eAAA,cACqCF,MAAA,CAAAG,MAAM;MACvCC,WAAA,CAAaC,IAAA,CAAAC,MAAA,a,yBAFjBC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}