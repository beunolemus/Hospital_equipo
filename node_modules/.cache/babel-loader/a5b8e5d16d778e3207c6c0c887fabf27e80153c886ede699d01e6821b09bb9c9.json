{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\r\n * Column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { registry } from \"../../core/Registry\";\nimport { Column } from \"../elements/Column\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ColumnSeriesDataItem = /** @class */function (_super) {\n  __extends(ColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ColumnSeriesDataItem\";\n    _this.locations[\"dateX\"] = 0.5;\n    _this.locations[\"dateY\"] = 0.5;\n    _this.locations[\"categoryX\"] = 0.5;\n    _this.locations[\"categoryY\"] = 0.5;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"column\", {\n    /**\r\n     * @return Column\r\n     */\n    get: function get() {\n      return this._column;\n    },\n    /**\r\n     * A column used to draw a column for this data item.\r\n     *\r\n     * @param column\r\n     */\n    set: function set(column) {\n      this.setColumn(column);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ColumnSeriesDataItem.prototype.setColumn = function (column) {\n    var _this = this;\n    if (this._column && column != this._column) {\n      $array.remove(this.sprites, this._column);\n    }\n    this._column = column;\n    if (column) {\n      var prevDataItem = column.dataItem;\n      if (prevDataItem && prevDataItem != this) {\n        prevDataItem.column = undefined;\n      }\n      this.addSprite(column);\n      this._disposers.push(new Disposer(function () {\n        // TODO investigate why component is undefined\n        // https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\n        if (_this.component) {\n          _this.component.columns.removeValue(column);\n        }\n      }));\n    }\n  };\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"width\", {\n    get: function get() {\n      var width = this.properties.width;\n      if (this._adapterO) {\n        width = this._adapterO.apply(\"width\", width);\n      }\n      return width;\n    },\n    set: function set(value) {\n      if (this.properties.width != value) {\n        this.properties.width = value;\n        if (this.component) {\n          this.component.validateDataElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"height\", {\n    get: function get() {\n      var height = this.properties.height;\n      if (this._adapterO) {\n        height = this._adapterO.apply(\"height\", height);\n      }\n      return height;\n    },\n    set: function set(value) {\n      if (this.properties.height != value) {\n        this.properties.height = value;\n        if (this.component) {\n          this.component.validateDataElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"rangesColumns\", {\n    /**\r\n     * A dictionary storing axes ranges columns by axis uid\r\n     */\n    get: function get() {\n      if (!this._rangesColumns) {\n        this._rangesColumns = new Dictionary();\n      }\n      return this._rangesColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSeriesDataItem;\n}(XYSeriesDataItem);\nexport { ColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar ColumnSeries = /** @class */function (_super) {\n  __extends(ColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ColumnSeries() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Start location within cell for columns.\r\n     */\n    _this._startLocation = 0;\n    /**\r\n     * End location within cell for columns.\r\n     */\n    _this._endLocation = 1;\n    _this.className = \"ColumnSeries\";\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.strokeOpacity = 0;\n    _this.fillOpacity = 1;\n    _this.clustered = true;\n    var columnsContainer = _this.mainContainer.createChild(Container);\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this._columnsContainer = columnsContainer;\n    _this.columns.template.pixelPerfect = false;\n    _this.tooltipColorSource = _this.columns.template;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ColumnSeries.prototype, \"columnsContainer\", {\n    /**\r\n     * A container that columns are created in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      return this._columnsContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  ColumnSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Column Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  ColumnSeries.prototype.createDataItem = function () {\n    return new ColumnSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ColumnSeries.prototype.validate = function () {\n    //@todo Check if we can do better than use `instanceof`\n    // find start/end locations based on clustered/stacked settings\n    // go through chart series instead of base axis series, because axis series doesn't maintain order\n    var _this = this;\n    this.group.node.removeAttribute(\"fill\");\n    if (this.chart && this.xAxis && this.yAxis) {\n      var baseAxisSeries = this.chart.series;\n      var clusterCount_1 = 0;\n      var index_1 = 0;\n      var sortedByAxis_1 = [];\n      $iter.each(baseAxisSeries.iterator(), function (series) {\n        if (series instanceof ColumnSeries) {\n          if (_this.baseAxis == series.baseAxis) {\n            var index_2;\n            if (_this.baseAxis == _this.xAxis) {\n              index_2 = _this.chart.yAxes.indexOf(series.yAxis);\n            } else {\n              index_2 = _this.chart.xAxes.indexOf(series.xAxis);\n            }\n            sortedByAxis_1.push({\n              series: series,\n              axis: index_2\n            });\n          }\n        }\n      });\n      sortedByAxis_1.sort(function (a, b) {\n        return a.axis - b.axis;\n      });\n      var prevAxisIndex_1;\n      $array.each(sortedByAxis_1, function (sortedItem) {\n        var series = sortedItem.series;\n        if (series instanceof ColumnSeries) {\n          if (!series.stacked && series.clustered || prevAxisIndex_1 != sortedItem.axis && series.clustered) {\n            clusterCount_1++;\n          }\n          if (series == _this) {\n            index_1 = clusterCount_1 - 1;\n          }\n        }\n        prevAxisIndex_1 = sortedItem.axis;\n      });\n      if (!this.clustered) {\n        index_1 = 0;\n        clusterCount_1 = 1;\n      }\n      var renderer = this.baseAxis.renderer;\n      var cellStartLocation = renderer.cellStartLocation;\n      var cellEndLocation = renderer.cellEndLocation;\n      this._startLocation = cellStartLocation + index_1 / clusterCount_1 * (cellEndLocation - cellStartLocation);\n      this._endLocation = cellStartLocation + (index_1 + 1) / clusterCount_1 * (cellEndLocation - cellStartLocation);\n      var xAxis = this.xAxis;\n      var yAxis = this.yAxis;\n      if (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\n        if (xAxis.sortBySeries == this) {\n          this.sortCategoryAxis(xAxis, \"valueY\");\n        }\n      }\n      if (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\n        if (yAxis.sortBySeries == this) {\n          this.sortCategoryAxis(yAxis, \"valueX\");\n        }\n      }\n    }\n    _super.prototype.validate.call(this);\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      this.disableUnusedColumns(dataItem);\n    }\n    for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      this.disableUnusedColumns(dataItem);\n    }\n    this._propertiesChanged = false;\n  };\n  ColumnSeries.prototype.sortCategoryAxis = function (axis, key) {\n    var _this = this;\n    this.dataItems.values.sort(function (x, y) {\n      return y.values[key].workingValue - x.values[key].workingValue;\n    });\n    var i = 0;\n    this.dataItems.each(function (dataItem) {\n      dataItem._index = i;\n      i++;\n    });\n    axis.dataItems.each(function (dataItem) {\n      var axis = dataItem.component;\n      var currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\n      var seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, _this);\n      if (seriesDataItem) {\n        var index = _this.dataItems.indexOf(seriesDataItem);\n        dataItem._index = index;\n        var deltaPosition = $math.round((index + 0.5) / _this.dataItems.length - currentPosition, 3);\n        if (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\n          // void\n        } else if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\n          if (dataItem.deltaAnimation) {\n            dataItem.deltaAnimation.stop();\n          }\n          dataItem.deltaAnimation = dataItem.animate({\n            property: \"deltaPosition\",\n            from: -deltaPosition,\n            to: 0\n          }, axis.interpolationDuration, axis.interpolationEasing);\n          _this._disposers.push(dataItem.deltaAnimation);\n        }\n      }\n    });\n    axis.dataItems.values.sort(function (x, y) {\n      return x.index - y.index;\n    });\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  ColumnSeries.prototype.validateDataElement = function (dataItem) {\n    // important oder here, first real, then super. we need this to know size\n    if (this.chart && this.xAxis && this.yAxis) {\n      this.validateDataElementReal(dataItem);\n      _super.prototype.validateDataElement.call(this, dataItem);\n    }\n  };\n  /**\r\n   * Returns relative start location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n  ColumnSeries.prototype.getStartLocation = function (dataItem) {\n    var startLocation = this._startLocation;\n    if (this.baseAxis == this.xAxis) {\n      startLocation += dataItem.locations[this.xOpenField] - 0.5;\n    } else {\n      startLocation += dataItem.locations[this.yOpenField] - 0.5;\n    }\n    return startLocation;\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  /*\r\n  public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n     if (this.simplifiedProcessing) {\r\n         this.validateDataElement(dataItem);\r\n     }\r\n     else {\r\n         super.handleDataItemWorkingValueChange(dataItem, name);\r\n     }\r\n  }*/\n  /**\r\n   * Returns relative end location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n  ColumnSeries.prototype.getEndLocation = function (dataItem) {\n    var endLocation = this._endLocation;\n    if (this.baseAxis == this.xAxis) {\n      endLocation += dataItem.locations[this.xField] - 0.5;\n    } else {\n      endLocation += dataItem.locations[this.yField] - 0.5;\n    }\n    return endLocation;\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  ColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this;\n    //\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\n    var l;\n    var r;\n    var t;\n    var b;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var template = this.columns.template;\n    var percentWidth = template.percentWidth;\n    var percentHeight = template.percentHeight;\n    var pixelWidth = template.pixelWidth;\n    var pixelHeight = template.pixelHeight;\n    var maxWidth = template.maxWidth;\n    var maxHeight = template.maxHeight;\n    var paddingLeft = template.pixelPaddingLeft;\n    var paddingRight = template.pixelPaddingRight;\n    var paddingTop = template.pixelPaddingTop;\n    var paddingBottom = template.pixelPaddingBottom;\n    var outOfBounds = false;\n    var diw = dataItem.width;\n    if ($type.hasValue(diw)) {\n      if ($type.isNumber(diw)) {\n        pixelWidth = diw;\n      }\n      if (diw instanceof Percent) {\n        percentWidth = diw.value * 100;\n      }\n    }\n    var dih = dataItem.height;\n    if ($type.hasValue(dih)) {\n      if ($type.isNumber(dih)) {\n        pixelHeight = dih;\n      }\n      if (dih instanceof Percent) {\n        percentHeight = dih.value * 100;\n      }\n    }\n    // two category axes\n    if (this.xAxis instanceof CategoryAxis && this.yAxis instanceof CategoryAxis) {\n      if (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\n        return;\n      }\n      startLocation = 0;\n      endLocation = 1;\n      if (!$type.isNaN(percentWidth)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n      l = this.xAxis.getX(dataItem, xOpenField, startLocation);\n      r = this.xAxis.getX(dataItem, xField, endLocation);\n      // in case width is set in pixels\n      if ($type.isNaN(percentWidth)) {\n        var offset = (r - l - pixelWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n      // in case max width is set in pixels\n      if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n      startLocation = 0;\n      endLocation = 1;\n      if (!$type.isNaN(percentHeight)) {\n        var offset = $math.round((1 - percentHeight / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n      t = this.yAxis.getY(dataItem, yOpenField, startLocation);\n      b = this.yAxis.getY(dataItem, yField, endLocation);\n      // in case width is set in pixels\n      if ($type.isNaN(percentHeight)) {\n        var offset = (b - t - pixelHeight) / 2;\n        b += offset;\n        t -= offset;\n      }\n      // in case max width is set in pixels\n      if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\n        var offset = (b - t - maxHeight) / 2;\n        b += offset;\n        t -= offset;\n      }\n      r = this.fixHorizontalCoordinate(r);\n      l = this.fixHorizontalCoordinate(l);\n      t = this.fixVerticalCoordinate(t);\n      b = this.fixVerticalCoordinate(b);\n    } else if (this.baseAxis == this.xAxis) {\n      if (!dataItem.hasValue(this._yValueFields)) {\n        return;\n      }\n      // in case width is set in percent\n      if (!$type.isNaN(percentWidth)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n      l = this.xAxis.getX(dataItem, xOpenField, startLocation);\n      r = this.xAxis.getX(dataItem, xField, endLocation);\n      // in case width is set in pixels\n      if ($type.isNaN(percentWidth)) {\n        var offset = (r - l - pixelWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n      // in case width is set in pixels\n      if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n      var bottomLocation = dataItem.locations[yOpenField];\n      var topLocation = dataItem.locations[yField];\n      // otherwise gantt chart will start items in the middle of a cell\n      if (this.yAxis instanceof ValueAxis) {\n        if (this.dataFields[this.yField] != this.dataFields[this.yOpenField]) {\n          bottomLocation = 0;\n          topLocation = 0;\n        }\n      }\n      b = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\n      t = this.yAxis.getY(dataItem, yField, topLocation);\n      // used to save location for bullets, but it's not a good approach\n      // dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\n      var axisLenght = Math.ceil(this.yAxis.axisLength);\n      if (t < 0 && b < 0 || t > axisLenght && b > axisLenght) {\n        outOfBounds = true;\n      }\n      t = this.fixVerticalCoordinate(t);\n      b = this.fixVerticalCoordinate(b);\n      if (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\n        outOfBounds = true;\n      }\n    }\n    // horizontal bars\n    else {\n      if (!dataItem.hasValue(this._xValueFields)) {\n        return;\n      }\n      if (!$type.isNaN(percentHeight)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n      t = this.yAxis.getY(dataItem, yOpenField, startLocation);\n      b = this.yAxis.getY(dataItem, yField, endLocation);\n      // in case height is set in pixels\n      if ($type.isNaN(percentHeight)) {\n        var offset = (b - t - pixelHeight) / 2;\n        b -= offset;\n        t += offset;\n      }\n      // in case height is set in pixels\n      if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\n        var offset = (b - t - maxHeight) / 2;\n        b -= offset;\n        t += offset;\n      }\n      var rightLocation = dataItem.locations[xField];\n      var leftLocation = dataItem.locations[xOpenField];\n      // otherwise gantt chart will start items in the middle of a cell\n      if (this.xAxis instanceof ValueAxis) {\n        if (this.dataFields[this.xField] != this.dataFields[this.xOpenField]) {\n          rightLocation = 0;\n          leftLocation = 0;\n        }\n      }\n      r = this.xAxis.getX(dataItem, xField, rightLocation);\n      l = this.xAxis.getX(dataItem, xOpenField, leftLocation);\n      // used to save location for bullets, but it's not a good approach\n      // dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\n      var axisLenght = Math.ceil(this.xAxis.axisLength);\n      if (r < 0 && l < 0 || r > axisLenght && l > axisLenght) {\n        outOfBounds = true;\n      }\n      r = this.fixHorizontalCoordinate(r);\n      l = this.fixHorizontalCoordinate(l);\n      if (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\n        outOfBounds = true;\n      }\n    }\n    var w = Math.abs(r - l);\n    var h = Math.abs(b - t);\n    var x = Math.min(l, r);\n    var y = Math.min(t, b);\n    if (!outOfBounds) {\n      var column_1;\n      if (!dataItem.column) {\n        column_1 = this.columns.create();\n        //$object.forceCopyProperties(this.columns.template, column, visualProperties);\n        $object.copyProperties(this, column_1, visualProperties); // need this because 3d columns are not in the same container\n        $object.copyProperties(this.columns.template, column_1, visualProperties); // second time, no force, so that columns.template would override series properties\n        dataItem.addSprite(column_1);\n        dataItem.column = column_1;\n        column_1.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n        // accessibility\n        if (this.itemsFocusable()) {\n          if (!$type.hasValue(this.role)) {\n            this.role = \"menu\";\n          }\n          if (!$type.hasValue(column_1.role)) {\n            column_1.role = \"menuitem\";\n          }\n          column_1.focusable = true;\n        } else {\n          if (!$type.hasValue(this.role)) {\n            this.role = \"list\";\n          }\n          if (!$type.hasValue(column_1.role)) {\n            column_1.role = \"listitem\";\n          }\n          column_1.focusable = false;\n        }\n        if (column_1.focusable) {\n          column_1.events.on(\"focus\", function (ev) {\n            column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\n          }, undefined, false);\n          column_1.events.on(\"blur\", function (ev) {\n            column_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n        if (column_1.hoverable) {\n          column_1.events.on(\"over\", function (ev) {\n            column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\n          }, undefined, false);\n          column_1.events.on(\"out\", function (ev) {\n            column_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n        column_1.parent = this.columnsContainer;\n        column_1.virtualParent = this;\n      } else {\n        column_1 = dataItem.column;\n        if (this._propertiesChanged) {\n          $object.copyProperties(this, column_1, visualProperties);\n          $object.copyProperties(this.columns.template, column_1, visualProperties);\n          $array.each(visualProperties, function (property) {\n            column_1[property] = column_1[property];\n          });\n        }\n      }\n      column_1.width = w;\n      column_1.height = h;\n      column_1.x = x;\n      column_1.y = y;\n      column_1.realX = l;\n      column_1.realY = t;\n      column_1.realWidth = r - l;\n      column_1.realHeight = b - t;\n      this.setColumnStates(column_1);\n      if (column_1.invalid) {\n        column_1.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n      }\n      column_1.__disabled = false;\n      //column.returnAfterTemp();\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create();\n          //$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n          dataItem.addSprite(rangeColumn);\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n          rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n        }\n        rangeColumn.parent = axisRange.contents;\n        rangeColumn.width = w;\n        rangeColumn.height = h;\n        rangeColumn.x = x;\n        rangeColumn.y = y;\n        _this.setColumnStates(rangeColumn);\n        if (rangeColumn.invalid) {\n          rangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n        rangeColumn.__disabled = false;\n        //rangeColumn.returnAfterTemp();\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n    dataItem.itemWidth = w;\n    dataItem.itemHeight = h;\n  };\n  /**\r\n   * @ignore\r\n   */\n  ColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\n    if (dataItem) {\n      if (dataItem.column) {\n        // otherwise might flicker when enabling\n        dataItem.column.width = 0;\n        dataItem.column.height = 0;\n        dataItem.column.__disabled = true;\n      }\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n        if (rangeColumn) {\n          // otherwise might flicker when enabling\n          rangeColumn.width = 0;\n          rangeColumn.height = 0;\n          rangeColumn.__disabled = true;\n        }\n      });\n    }\n  };\n  /**\r\n   * Apply different state/coloring to columns based on the change value.\r\n   *\r\n   * @param sprite  Sprite to apply state to\r\n   * @todo Do not apply accessibility to wicks of the candlesticks\r\n   */\n  ColumnSeries.prototype.setColumnStates = function (sprite) {\n    if (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\n      var dataItem = sprite.dataItem;\n      if (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\n        var open_1;\n        var value = void 0;\n        var change = void 0;\n        if (this.baseAxis == this.yAxis) {\n          if (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\n            open_1 = dataItem.getValue(this.xOpenField);\n            value = dataItem.getValue(this.xField);\n          }\n          change = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\n        } else {\n          if (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\n            open_1 = dataItem.getValue(this.yOpenField);\n            value = dataItem.getValue(this.yField);\n          }\n          change = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\n        }\n        if (value < open_1) {\n          dataItem.droppedFromOpen = true;\n          sprite.defaultState.copyFrom(this._dropFromOpenState);\n          sprite.setState(this._dropFromOpenState, 0);\n        } else {\n          dataItem.droppedFromOpen = false;\n          sprite.defaultState.copyFrom(this._riseFromOpenState);\n          sprite.setState(this._riseFromOpenState, 0);\n        }\n        if (change < 0) {\n          dataItem.droppedFromPrevious = true;\n          sprite.defaultState.copyFrom(this._dropFromPreviousState);\n          sprite.setState(this._dropFromPreviousState, 0);\n        } else {\n          dataItem.droppedFromPrevious = false;\n          sprite.defaultState.copyFrom(this._riseFromPreviousState);\n          sprite.setState(this._riseFromPreviousState, 0);\n        }\n      }\n    }\n  };\n  Object.defineProperty(ColumnSeries.prototype, \"columns\", {\n    /**\r\n     * A list of column elements in the series.\r\n     *\r\n     * @return Columns\r\n     */\n    get: function get() {\n      if (!this._columns) {\n        this._columns = new ListTemplate(this.createColumnTemplate());\n        this._disposers.push(new ListDisposer(this._columns));\n        this._disposers.push(this._columns.template);\n      }\n      return this._columns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a column element to use as a template.\r\n   *\r\n   * @return Column template\r\n   */\n  ColumnSeries.prototype.createColumnTemplate = function () {\n    return new Column();\n  };\n  Object.defineProperty(ColumnSeries.prototype, \"clustered\", {\n    /**\r\n     * @return Clustered?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"clustered\");\n    },\n    /**\r\n     * Cluster this series columns?\r\n     *\r\n     * Setting to `false` will make columns overlap with other series.\r\n     *\r\n     * @default true\r\n     * @param value  Clustered?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"clustered\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"dropFromOpenState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._dropFromOpenState) {\n        this._dropFromOpenState = this.states.create(\"dropFromOpenState\");\n      }\n      return this._dropFromOpenState;\n    },\n    /**\r\n     * A state to apply to a column when close value is lower than open value.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._dropFromOpenState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"dropFromPreviousState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._dropFromPreviousState) {\n        this._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\n      }\n      return this._dropFromPreviousState;\n    },\n    /**\r\n     * A state to apply to a column when its value is lower value of a previous\r\n     * column.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._dropFromPreviousState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"riseFromOpenState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._riseFromOpenState) {\n        this._riseFromOpenState = this.states.create(\"riseFromOpenState\");\n      }\n      return this._riseFromOpenState;\n    },\n    /**\r\n     * A state to apply to a column when close value is same or higher than open\r\n     * value.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._riseFromOpenState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"riseFromPreviousState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._riseFromPreviousState) {\n        this._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\n      }\n      return this._riseFromPreviousState;\n    },\n    /**\r\n     * A state to apply to a column when its value is same or higher than value\r\n     * of a previous column.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._riseFromPreviousState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates value of the related legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  ColumnSeries.prototype.updateLegendValue = function (dataItem, notRange) {\n    var _this = this;\n    _super.prototype.updateLegendValue.call(this, dataItem, notRange);\n    if (this.legendDataItem) {\n      var marker = this.legendDataItem.marker;\n      var fromOpenState_1;\n      var fromPreviousState_1;\n      if (dataItem) {\n        if (dataItem.droppedFromOpen) {\n          fromOpenState_1 = this._dropFromOpenState;\n        } else {\n          fromOpenState_1 = this._riseFromOpenState;\n        }\n        if (dataItem.droppedFromPrevious) {\n          fromPreviousState_1 = this._dropFromPreviousState;\n        } else {\n          fromPreviousState_1 = this._riseFromPreviousState;\n        }\n      }\n      $iter.each(marker.children.iterator(), function (child) {\n        if (dataItem) {\n          child.setState(fromPreviousState_1);\n          child.setState(fromOpenState_1);\n        } else {\n          // todo: think what to do here, maybe apply above states based on totals?\n          child.setState(_this._riseFromPreviousState);\n          child.setState(_this._riseFromOpenState);\n        }\n      });\n    }\n  };\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n  ColumnSeries.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.copyFrom(this.columns.template);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = this.fill;\n    legendDataItem.colorOrig = this.fill;\n  };\n  /**\r\n   * Copies all properties from another instance of [[ColumnSeries]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  ColumnSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.columns.template.copyFrom(source.columns.template);\n  };\n  /**\r\n  * returns bullet x location\r\n  * @ignore\r\n  */\n  ColumnSeries.prototype.getBulletLocationX = function (bullet, field) {\n    if (this.baseAxis == this.xAxis) {\n      var bulletLocationX = bullet.locationX;\n      if (!$type.isNumber(bulletLocationX)) {\n        bulletLocationX = 0.5;\n      }\n      var endLocation = this.getEndLocation(bullet.dataItem);\n      var startLocation = this.getStartLocation(bullet.dataItem);\n      return endLocation - (endLocation - startLocation) * bulletLocationX;\n    } else {\n      return _super.prototype.getBulletLocationX.call(this, bullet, field);\n    }\n  };\n  /**\r\n  * returns bullet y location\r\n  * @ignore\r\n  */\n  ColumnSeries.prototype.getBulletLocationY = function (bullet, field) {\n    if (this.baseAxis == this.yAxis) {\n      var bulletLocationY = bullet.locationY;\n      if (!$type.isNumber(bulletLocationY)) {\n        bulletLocationY = 0.5;\n      }\n      var endLocation = this.getEndLocation(bullet.dataItem);\n      var startLocation = this.getStartLocation(bullet.dataItem);\n      return endLocation - (endLocation - startLocation) * bulletLocationY;\n    } else {\n      return _super.prototype.getBulletLocationY.call(this, bullet, field);\n    }\n  };\n  ColumnSeries.prototype.getAdjustedXLocation = function (dataItem, field, bulletLocationX) {\n    //if (this.baseAxis == this.xAxis) {\n    if (!$type.isNumber(bulletLocationX)) {\n      if (dataItem) {\n        bulletLocationX = dataItem.locations[field];\n      } else {\n        bulletLocationX = 0.5;\n      }\n    }\n    return this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\n    //}\n    //else {\n    //\treturn super.getAdjustedXLocation(dataItem, field);\n    //}\n  };\n  ColumnSeries.prototype.getAdjustedYLocation = function (dataItem, field, bulletLocationY) {\n    //if (this.baseAxis == this.yAxis) {\n    if (!$type.isNumber(bulletLocationY)) {\n      if (dataItem) {\n        bulletLocationY = dataItem.locations[field];\n      } else {\n        bulletLocationY = 0.5;\n      }\n    }\n    return this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\n    //}\n    //else {\n    //\treturn super.getAdjustedYLocation(dataItem, field);\n    //}\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  ColumnSeries.prototype.fixVerticalCoordinate = function (coordinate) {\n    var paddingBottom = this.columns.template.pixelPaddingBottom;\n    var paddingTop = this.columns.template.pixelPaddingTop;\n    var minY = -paddingTop;\n    var maxY = this.yAxis.axisLength + paddingBottom;\n    return $math.fitToRange(coordinate, minY, maxY);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  ColumnSeries.prototype.fixHorizontalCoordinate = function (coordinate) {\n    var paddingLeft = this.columns.template.pixelPaddingLeft;\n    var paddingRight = this.columns.template.pixelPaddingRight;\n    var minX = -paddingLeft;\n    var maxX = this.xAxis.axisLength + paddingRight;\n    return $math.fitToRange(coordinate, minX, maxX);\n  };\n  /**\r\n   * @ignore\r\n   */\n  ColumnSeries.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this.columns.clear();\n  };\n  return ColumnSeries;\n}(XYSeries);\nexport { ColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;","map":{"version":3,"names":["XYSeries","XYSeriesDataItem","visualProperties","Container","ListTemplate","ListDisposer","Dictionary","ValueAxis","CategoryAxis","registry","Column","RoundedRectangle","percent","Percent","$math","$object","$iter","$array","$type","Disposer","ColumnSeriesDataItem","_super","__extends","_this","call","className","locations","applyTheme","Object","defineProperty","prototype","get","_column","set","column","setColumn","remove","sprites","prevDataItem","dataItem","undefined","addSprite","_disposers","push","component","columns","removeValue","width","properties","_adapterO","apply","value","validateDataElement","height","_rangesColumns","ColumnSeries","_startLocation","_endLocation","strokeOpacity","fillOpacity","clustered","columnsContainer","mainContainer","createChild","shouldClone","isMeasured","layout","_columnsContainer","template","pixelPerfect","tooltipColorSource","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","validate","group","node","removeAttribute","chart","xAxis","yAxis","baseAxisSeries","series","clusterCount_1","index_1","sortedByAxis_1","each","iterator","baseAxis","index_2","yAxes","indexOf","xAxes","axis","sort","a","b","prevAxisIndex_1","sortedItem","stacked","renderer","cellStartLocation","cellEndLocation","sortBySeries","sortCategoryAxis","i","startIndex","dataItems","getIndex","disableUnusedColumns","length","endIndex","_propertiesChanged","key","values","x","y","workingValue","_index","currentPosition","categoryToPosition","category","deltaPosition","seriesDataItem","getSeriesDataItemByCategory","index","round","deltaAnimation","isDisposed","animationOptions","to","stop","animate","property","from","interpolationDuration","interpolationEasing","validateDataElementReal","getStartLocation","startLocation","xOpenField","yOpenField","getEndLocation","endLocation","xField","yField","l","r","t","percentWidth","percentHeight","pixelWidth","pixelHeight","maxWidth","maxHeight","paddingLeft","pixelPaddingLeft","paddingRight","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","diw","isNumber","dih","_xValueFields","_yValueFields","isNaN","offset","getX","Math","abs","getY","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","dataFields","axisLenght","ceil","axisLength","rightLocation","leftLocation","w","h","min","column_1","create","copyProperties","paper","itemsFocusable","role","focusable","events","on","ev","populateString","itemReaderText","hoverable","parent","virtualParent","realX","realY","realWidth","realHeight","setColumnStates","invalid","__disabled","axisRanges","axisRange","rangeColumn","rangesColumns","getKey","uid","contents","setKey","itemWidth","itemHeight","sprite","_dropFromOpenState","_dropFromPreviousState","_riseFromOpenState","_riseFromPreviousState","open_1","change","getValue","axisFieldName","droppedFromOpen","defaultState","copyFrom","setState","droppedFromPrevious","_columns","createColumnTemplate","getPropertyValue","setPropertyValue","states","updateLegendValue","notRange","legendDataItem","marker","fromOpenState_1","fromPreviousState_1","children","child","createLegendMarker","removeChildren","padding","color","fill","colorOrig","source","getBulletLocationX","bullet","field","bulletLocationX","locationX","getBulletLocationY","bulletLocationY","locationY","getAdjustedXLocation","getAdjustedYLocation","coordinate","minY","maxY","fitToRange","minX","maxX","disposeData","clear","registeredClasses"],"sources":["../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourcesContent":["/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesDataItemAdapters extends IDataItemAdapters {\r\n\twidth: number | Percent;\r\n\theight: number | Percent;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesDataItemAdapters;\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set width(value: number | Percent) {\r\n\t\tif (this.properties.width != value) {\r\n\t\t\tthis.properties.width = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get width(): number | Percent {\r\n\t\tlet width = this.properties.width;\r\n\t\tif (this._adapterO) {\r\n\t\t\twidth = this._adapterO.apply(\"width\", width);\r\n\t\t}\r\n\t\treturn width;\r\n\t}\r\n\r\n\r\n\tpublic set height(value: number | Percent) {\r\n\t\tif (this.properties.height != value) {\r\n\t\t\tthis.properties.height = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get height(): number | Percent {\r\n\t\tlet height = this.properties.height;\r\n\t\tif (this._adapterO) {\r\n\t\t\theight = this._adapterO.apply(\"height\", height);\r\n\t\t}\r\n\t\treturn height;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields {\r\n\twidth?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tlet baseAxisSeries = this.chart.series;\r\n\t\t\tlet clusterCount: number = 0;\r\n\t\t\tlet index: number = 0;\r\n\r\n\t\t\tlet sortedByAxis: { series: XYSeries, axis: number }[] = [];\r\n\t\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\t\tlet index: number;\r\n\t\t\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\t\t\tindex = this.chart.yAxes.indexOf(series.yAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tindex = this.chart.xAxes.indexOf(series.xAxis);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsortedByAxis.push({ series: series, axis: index })\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tsortedByAxis.sort((a, b) => a.axis - b.axis);\r\n\t\t\tlet prevAxisIndex: number;\r\n\r\n\t\t\t$array.each(sortedByAxis, (sortedItem) => {\r\n\t\t\t\tlet series = sortedItem.series;\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || (prevAxisIndex != sortedItem.axis && series.clustered)) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprevAxisIndex = sortedItem.axis;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.clustered) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tclusterCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (xAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(xAxis, \"valueY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tif (yAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(yAxis, \"valueX\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tthis._propertiesChanged = false;\r\n\t}\r\n\r\n\tprotected sortCategoryAxis(axis: CategoryAxis, key: string) {\r\n\t\tthis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn (<any>y).values[key].workingValue - (<any>x).values[key].workingValue;\r\n\t\t})\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tdataItem._index = i;\r\n\t\t\ti++;\r\n\t\t})\r\n\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tlet axis = dataItem.component;\r\n\t\t\tlet currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n\r\n\t\t\tlet seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, this);\r\n\r\n\t\t\tif (seriesDataItem) {\r\n\t\t\t\tlet index = this.dataItems.indexOf(<ColumnSeriesDataItem>seriesDataItem);\r\n\r\n\t\t\t\tdataItem._index = index;\r\n\r\n\t\t\t\tlet deltaPosition = $math.round((index + 0.5) / this.dataItems.length - currentPosition, 3);\r\n\r\n\t\t\t\tif (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n\t\t\t\t\tif (dataItem.deltaAnimation) {\r\n\t\t\t\t\t\tdataItem.deltaAnimation.stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n\t\t\t\t\tthis._disposers.push(dataItem.deltaAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\taxis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn x.index - y.index;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tthis.validateDataElementReal(dataItem);\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t/*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t   if (this.simplifiedProcessing) {\r\n\t\t   this.validateDataElement(dataItem);\r\n\t   }\r\n\t   else {\r\n\t\t   super.handleDataItemWorkingValueChange(dataItem, name);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\tlet diw = dataItem.width;\r\n\t\tif ($type.hasValue(diw)) {\r\n\t\t\tif ($type.isNumber(diw)) {\r\n\t\t\t\tpixelWidth = diw;\r\n\t\t\t}\r\n\t\t\tif (diw instanceof Percent) {\r\n\t\t\t\tpercentWidth = diw.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dih = dataItem.height;\r\n\t\tif ($type.hasValue(dih)) {\r\n\t\t\tif ($type.isNumber(dih)) {\r\n\t\t\t\tpixelHeight = dih;\r\n\t\t\t}\r\n\t\t\tif (dih instanceof Percent) {\r\n\t\t\t\tpercentHeight = dih.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"menu\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"list\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\t\tcolumn.virtualParent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t\tif (this._propertiesChanged) {\r\n\t\t\t\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t\t$array.each(visualProperties, (property) => {\r\n\t\t\t\t\t\t(<any>column)[property] = column[property];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\t\tif (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet open: number;\r\n\t\t\t\tlet value: number;\r\n\t\t\t\tlet change: number;\r\n\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value < open) {\r\n\t\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (change < 0) {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\t//if (this.baseAxis == this.xAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\t//if (this.baseAxis == this.yAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedYLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}