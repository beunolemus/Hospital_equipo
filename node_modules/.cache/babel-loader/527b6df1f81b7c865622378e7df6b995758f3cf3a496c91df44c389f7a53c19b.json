{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.string.link.js\";\n/**\r\n * FlowDiagramNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $string from \"../../core/utils/String\";\nimport * as $order from \"../../core/utils/Order\";\nimport * as $number from \"../../core/utils/Number\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\nimport { LegendSettings } from \"../Legend\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar FlowDiagramNode = /** @class */function (_super) {\n  __extends(FlowDiagramNode, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagramNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n    _this.legendSettings = new LegendSettings();\n    _this.className = \"FlowDiagramNode\";\n    _this.isMeasured = false;\n    // TODO can this be removed ?\n    new InterfaceColorSet();\n    _this.draggable = true;\n    _this.inert = true;\n    _this.setStateOnChildren = true;\n    _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\n    _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\n    return _this;\n    //this.events.on(\"hit\", this.handleHit, this, false);\n  }\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagramNode.prototype.handleHit = function (event) {\n    if (this.isHidden || this.isHiding) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\r\n   * Shows hidden node.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n  FlowDiagramNode.prototype.show = function (duration) {\n    var animation = _super.prototype.show.call(this, duration);\n    this.outgoingDataItems.each(function (dataItem) {\n      if (!dataItem.toNode || dataItem.toNode && !dataItem.toNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      if (!dataItem.fromNode || dataItem.fromNode && !dataItem.fromNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    return animation;\n  };\n  /**\r\n   * Hides node.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n  FlowDiagramNode.prototype.hide = function (duration) {\n    var animation = _super.prototype.hide.call(this, duration);\n    this.outgoingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    return animation;\n  };\n  /**\r\n   * Marks node as invalid, for redrawal in the next update cycle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagramNode.prototype.validate = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.validate.call(this);\n      this.invalidateLinks();\n    }\n  };\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagramNode.prototype.invalidateLinks = function () {\n    var _this = this;\n    this.outgoingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n      if (link.colorMode == \"fromNode\") {\n        link.fill = link.dataItem.fromNode.color;\n      }\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_1 = link.gradient.stops.getIndex(0);\n        if (stop_1) {\n          stop_1.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n      if (link.colorMode == \"toNode\") {\n        link.fill = link.dataItem.toNode.color;\n      }\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_2 = link.gradient.stops.getIndex(1);\n        if (stop_2) {\n          stop_2.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n  };\n  Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\n    /**\r\n     * List of incoming items (links).\r\n     *\r\n     * @readonly\r\n     * @return Incoming items\r\n     */\n    get: function get() {\n      var _this = this;\n      if (!this._incomingDataItems) {\n        var incomingDataItems = new List();\n        incomingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._incomingSorted = _this._incomingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._incomingDataItems = incomingDataItems;\n      }\n      return this._incomingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\n    /**\r\n     * List of outgoing items (links).\r\n     *\r\n     * @readonly\r\n     * @return Outgoing items\r\n     */\n    get: function get() {\n      var _this = this;\n      if (!this._outgoingDataItems) {\n        var outgoingDataItems = new List();\n        outgoingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._outgoingSorted = _this._outgoingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._outgoingDataItems = outgoingDataItems;\n      }\n      return this._outgoingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"name\");\n    },\n    /**\r\n     * A name of the node.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"name\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"total\");\n    },\n    /**\r\n     * Sum of all incoming+outgoing link values\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"total\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"totalIncoming\");\n    },\n    /**\r\n     * Sum of all incomming link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"totalIncoming\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"totalOutgoing\");\n    },\n    /**\r\n     * Sum of all outgoing link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"totalOutgoing\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"color\");\n    },\n    /**\r\n     * Node's color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function set(value) {\n      this.setColorProperty(\"color\", value);\n      if (this._background) {\n        this._background.fill = value;\n      }\n      this.fill = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n  FlowDiagramNode.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.stroke = this.fill;\n    column.copyFrom(this);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n  Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function get() {\n      return this._legendDataItem;\n    },\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function set(value) {\n      this._legendDataItem = value;\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramNode;\n}(Container);\nexport { FlowDiagramNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;","map":{"version":3,"names":["Container","visualProperties","List","registry","InterfaceColorSet","$iter","$string","$order","$number","RoundedRectangle","$object","LegendSettings","FlowDiagramNode","_super","__extends","_this","call","legendSettings","className","isMeasured","draggable","inert","setStateOnChildren","events","on","invalidateLinks","prototype","handleHit","event","isHidden","isHiding","show","hide","duration","animation","outgoingDataItems","each","dataItem","toNode","setWorkingValue","getValue","link","incomingDataItems","fromNode","validate","isDisposed","colorMode","fill","color","gradient","stroke","stop_1","stops","getIndex","stop_2","Object","defineProperty","get","_incomingDataItems","chart","sortBy","_incomingSorted","sort","iterator","x","y","order","fromName","reverse","value","undefined","_outgoingDataItems","_outgoingSorted","getPropertyValue","set","setPropertyValue","setColorProperty","_background","createLegendMarker","marker","w","pixelWidth","h","pixelHeight","removeChildren","column","createChild","shouldClone","copyProperties","copyFrom","padding","width","height","legendDataItem","colorOrig","_legendDataItem","itemContainer","deepInvalidate","registeredClasses"],"sources":["../../../../../src/.internal/charts/elements/FlowDiagramNode.ts"],"sourcesContent":["/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}