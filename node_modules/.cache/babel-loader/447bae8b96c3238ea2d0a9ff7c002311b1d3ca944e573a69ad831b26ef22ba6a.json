{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\n/**\r\n * Functionality for drawing quadratic curves.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Line } from \"./Line\";\nimport { color } from \"../utils/Color\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\nvar QuadraticCurve = /** @class */function (_super) {\n  __extends(QuadraticCurve, _super);\n  /**\r\n   * Constructor\r\n   */\n  function QuadraticCurve() {\n    var _this = _super.call(this) || this;\n    _this.className = \"QuadraticCurve\";\n    _this.element = _this.paper.add(\"path\");\n    _this.pixelPerfect = false;\n    _this.fill = color();\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  QuadraticCurve.prototype.draw = function () {\n    //super.draw();\n    if ($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy)) {\n      var p1 = {\n        x: this.x1,\n        y: this.y1\n      };\n      var p2 = {\n        x: this.x2,\n        y: this.y2\n      };\n      var cp = {\n        x: this.cpx,\n        y: this.cpy\n      };\n      var d = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\n      this.path = d;\n    }\n  };\n  Object.defineProperty(QuadraticCurve.prototype, \"cpx\", {\n    /**\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cpx\");\n    },\n    /**\r\n     * X coordinate of control point.\r\n     *\r\n     * @param value X\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cpx\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuadraticCurve.prototype, \"cpy\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cpy\");\n    },\n    /**\r\n     * Y coordinate of control point.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cpy\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  QuadraticCurve.prototype.positionToPoint = function (position) {\n    var p1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var cp = {\n      x: this.cpx,\n      y: this.cpy\n    };\n    var p2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\n    var point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\n    return {\n      x: point1.x,\n      y: point1.y,\n      angle: $math.getAngle(point1, point2)\n    };\n  };\n  return QuadraticCurve;\n}(Line);\nexport { QuadraticCurve };","map":{"version":3,"names":["Line","color","$path","$math","$type","QuadraticCurve","_super","__extends","_this","call","className","element","paper","add","pixelPerfect","fill","applyTheme","prototype","draw","isNumber","x1","x2","y1","y2","cpx","cpy","p1","x","y","p2","cp","d","moveTo","quadraticCurveTo","path","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","positionToPoint","position","point1","getPointOnQuadraticCurve","point2","angle","getAngle"],"sources":["../../../../../src/.internal/core/elements/QuadraticCurve.ts"],"sourcesContent":["/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}