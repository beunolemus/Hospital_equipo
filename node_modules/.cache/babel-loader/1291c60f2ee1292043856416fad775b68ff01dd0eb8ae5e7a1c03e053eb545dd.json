{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\r\n * Cursor for XY chart\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Cursor } from \"./Cursor\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\nvar XYCursor = /** @class */function (_super) {\n  __extends(XYCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n  function XYCursor() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Vertical cursor line element.\r\n     */\n    _this._lineX = new MutableValueDisposer();\n    /**\r\n     * Horizontal cursor line element.\r\n     */\n    _this._lineY = new MutableValueDisposer();\n    /**\r\n     * Horizontal [[Axis]].\r\n     */\n    _this._xAxis = new MutableValueDisposer();\n    /**\r\n     * Vertical [[Axis]].\r\n     */\n    _this._yAxis = new MutableValueDisposer();\n    _this._snapToDisposers = [];\n    _this.className = \"XYCursor\";\n    // Defaults\n    _this.behavior = \"zoomX\";\n    _this.maxPanOut = 0.1;\n    var interfaceColors = new InterfaceColorSet();\n    _this.snapOnPan = true;\n    // Create selection element\n    var selection = _this.createChild(Sprite);\n    selection.shouldClone = false;\n    selection.fillOpacity = 0.2;\n    selection.fill = interfaceColors.getFor(\"alternativeBackground\");\n    selection.isMeasured = false;\n    selection.visible = false;\n    selection.interactionsEnabled = false;\n    _this.selection = selection;\n    _this._disposers.push(_this.selection);\n    // Create cursor's vertical line\n    var lineX = _this.createChild(Sprite);\n    lineX.shouldClone = false;\n    lineX.stroke = interfaceColors.getFor(\"grid\");\n    lineX.fill = color();\n    lineX.strokeDasharray = \"3,3\";\n    lineX.isMeasured = false;\n    lineX.strokeOpacity = 0.4;\n    lineX.interactionsEnabled = false;\n    lineX.y = 0; // important\n    _this.lineX = lineX;\n    _this._disposers.push(_this.lineX);\n    // Create cursor's horizontal line\n    var lineY = _this.createChild(Sprite);\n    lineY.shouldClone = false;\n    lineY.stroke = interfaceColors.getFor(\"grid\");\n    lineY.fill = color();\n    lineY.strokeDasharray = \"3,3\";\n    lineY.isMeasured = false;\n    lineY.strokeOpacity = 0.4;\n    lineY.interactionsEnabled = false;\n    lineY.x = 0; // important\n    _this.lineY = lineY;\n    _this._disposers.push(_this.lineY);\n    // Add handler for size changes\n    _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\n    _this._disposers.push(_this._lineX);\n    _this._disposers.push(_this._lineY);\n    _this._disposers.push(_this._xAxis);\n    _this._disposers.push(_this._yAxis);\n    _this.mask = _this;\n    _this.hideSeriesTooltipsOnSelection = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Updates cursor element dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYCursor.prototype.updateSize = function () {\n    if (this.lineX) {\n      this.lineX.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: this.innerHeight\n      });\n    }\n    if (this.lineY) {\n      this.lineY.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: this.innerWidth,\n        y: 0\n      });\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n      var behavior = this.behavior;\n      if (downPoint) {\n        var point = this.point;\n        if (this.lineX) {\n          point.x = this.lineX.pixelX;\n        }\n        if (this.lineY) {\n          point.y = this.lineY.pixelY;\n        }\n        var selection = this.selection;\n        var x = Math.min(point.x, downPoint.x);\n        var y = Math.min(point.y, downPoint.y);\n        var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\n        var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\n        switch (behavior) {\n          case \"zoomX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n          case \"zoomY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n          case \"selectX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n          case \"selectY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n        }\n        selection.x = x;\n        selection.y = y;\n        selection.path = $path.rectangle(w, h);\n        selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\n      } else {\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYCursor.prototype.fixPoint = function (point) {\n    point.x = Math.max(0, point.x);\n    point.y = Math.max(0, point.y);\n    point.x = Math.min(this.pixelWidth, point.x);\n    point.y = Math.min(this.pixelHeight, point.y);\n    return point;\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n  XYCursor.prototype.triggerMoveReal = function (point, force) {\n    _super.prototype.triggerMoveReal.call(this, point, force);\n    var snapToSeries = this.snapToSeries;\n    if (snapToSeries && !this.downPoint) {\n      if (snapToSeries instanceof XYSeries) {\n        if (snapToSeries.isHidden) {\n          this.updateLinePositions(point);\n        }\n      } else {\n        var allHidden_1 = true;\n        $array.each(snapToSeries, function (s) {\n          if (!s.isHidden) {\n            allHidden_1 = false;\n          }\n        });\n        if (allHidden_1) {\n          this.updateLinePositions(point);\n        }\n      }\n    } else {\n      this.updateLinePositions(point);\n    }\n    if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\n      if (this._generalBehavior == \"pan\") {\n        this.getPanningRanges();\n        this.dispatch(\"panning\");\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYCursor.prototype.updateLinePositions = function (point) {\n    point = this.fixPoint(this.point);\n    if (this.lineX && this.lineX.visible && !this.xAxis) {\n      this.lineX.x = point.x;\n    }\n    if (this.lineY && this.lineY.visible && !this.yAxis) {\n      this.lineY.y = point.y;\n    }\n    this.updateSelection();\n  };\n  XYCursor.prototype.triggerDownReal = function (point) {\n    if (this.visible && !this.isHiding) {\n      if (this._generalBehavior == \"select\") {\n        this.selection.parent = this.parent;\n      }\n      if (this.fitsToBounds(point)) {\n        this.downPoint = {\n          x: point.x,\n          y: point.y\n        };\n        this.updatePoint(point);\n        //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\n        this.point.x = this.downPoint.x;\n        this.point.y = this.downPoint.y;\n        var selection = this.selection;\n        var selectionX = this.downPoint.x;\n        var selectionY = this.downPoint.y;\n        if (this._usesSelection) {\n          selection.x = selectionX;\n          selection.y = selectionY;\n          selection.path = \"\";\n          selection.show();\n        }\n        _super.prototype.triggerDownReal.call(this, point);\n      } else {\n        this.downPoint = undefined;\n      }\n    } else {\n      this.downPoint = undefined;\n    }\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n  XYCursor.prototype.updatePoint = function (point) {\n    if (this.lineX) {\n      point.x = this.lineX.pixelX;\n    }\n    if (this.lineY) {\n      point.y = this.lineY.pixelY;\n    }\n  };\n  /**\r\n   * Handle action when cursor is released, which should perform an operation\r\n   * based on its `behavior`, like zoom.\r\n   *\r\n   * @param  point  Release point\r\n   */\n  XYCursor.prototype.triggerUpReal = function (point) {\n    if (this.hasMoved()) {\n      if (this.downPoint) {\n        this.upPoint = point;\n        this.updatePoint(this.upPoint);\n        if (this._generalBehavior != \"pan\") {\n          this.getRanges();\n        }\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n        _super.prototype.triggerUpReal.call(this, point);\n      }\n    } else {\n      if (this._generalBehavior != \"select\") {\n        this.selection.hide(0);\n      } else {\n        this.xRange = undefined;\n        this.yRange = undefined;\n        this.dispatchImmediately(\"selectended\");\n      }\n      // reset cursor style, just in case\n      if (this._generalBehavior == \"pan\") {\n        var interaction = getInteraction();\n        interaction.setGlobalStyle(MouseCursorStyle.default);\n      }\n      this.dispatchImmediately(\"behaviorcanceled\");\n    }\n    this.downPoint = undefined;\n    this.dispatch(\"cursorpositionchanged\");\n  };\n  /**\r\n   * Calculates if the cursor has moved enough based on its `behavior`.\r\n   *\r\n   * @return Moved?\r\n   */\n  XYCursor.prototype.hasMoved = function () {\n    var distance;\n    if (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\n      distance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\n    } else if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\n      distance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\n    } else {\n      distance = $math.getDistance(this._upPointOrig, this._downPointOrig);\n    }\n    return distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n  XYCursor.prototype.getPanningRanges = function () {\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var currentX = $math.round(this.point.x / this.innerWidth, 5);\n    var currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\n    var deltaX = startX - currentX;\n    var deltaY = startY - currentY;\n    this.xRange = {\n      start: deltaX,\n      end: 1 + deltaX\n    };\n    this.yRange = {\n      start: deltaY,\n      end: 1 + deltaY\n    };\n    if (this.behavior == \"panX\") {\n      this.yRange.start = 0;\n      this.yRange.end = 1;\n    }\n    if (this.behavior == \"panY\") {\n      this.xRange.start = 0;\n      this.xRange.end = 1;\n    }\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n  XYCursor.prototype.getRanges = function () {\n    if (this.lineX) {\n      this.upPoint.x = this.lineX.pixelX;\n    }\n    if (this.lineY) {\n      this.upPoint.y = this.lineY.pixelY;\n    }\n    // @todo Is this needed?\n    $utils.used(this.selection);\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var endX = $math.round(this.upPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var endY = 1 - $math.round(this.upPoint.y / this.innerHeight, 5);\n    this.xRange = {\n      start: $math.min(startX, endX),\n      end: $math.max(startX, endX)\n    };\n    this.yRange = {\n      start: $math.min(startY, endY),\n      end: $math.max(startY, endY)\n    };\n  };\n  Object.defineProperty(XYCursor.prototype, \"behavior\", {\n    /**\r\n     * Behavior\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"behavior\");\n    },\n    /**\r\n     * Cursor's behavior when it's moved with pointer down:\r\n     *\r\n     * * `\"zoomX\"` - zooms horizontally.\r\n     * * `\"zoomY\"` - zooms vertically.\r\n     * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n     * * `\"selectX\"` - selects a range horizontally.\r\n     * * `\"selectY\"` - selects a range vertically.\r\n     * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n     * * `\"panX\"` - moves (pans) current selection horizontally.\r\n     * * `\"panY\"` - moves (pans) current selection vertically.\r\n     * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n     * * `\"none\"` - does nothing with pointer down.\r\n     *\r\n     * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n     * and dragging it will start zooming the chart.\r\n     *\r\n     * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n     * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n     *\r\n     * @param value Bheavior\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"behavior\", value, true);\n      this._usesSelection = false;\n      if (value.indexOf(\"zoom\") != -1) {\n        this._generalBehavior = \"zoom\";\n        this._usesSelection = true;\n      }\n      if (value.indexOf(\"select\") != -1) {\n        this._generalBehavior = \"select\";\n        this._usesSelection = true;\n      }\n      if (value.indexOf(\"pan\") != -1) {\n        this._generalBehavior = \"pan\";\n        this._usesSelection = false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n   *\r\n   * @return Prevent default?\r\n   */\n  XYCursor.prototype.shouldPreventGestures = function (touch) {\n    return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\n  };\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fullWidthLineX\");\n    },\n    /**\r\n     * Cursor's horizontal line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n     * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"fullWidthLineX\", value);\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fullWidthLineY\");\n    },\n    /**\r\n     * Cursor's vertical line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n     * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"fullWidthLineY\", value);\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"hideSeriesTooltipsOnSelection\", {\n    /**\r\n     * @return hide tooltip?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\n    },\n    /**\r\n     * If set to `true` this will hide series tooltips when selecting with cursor.\r\n     *\r\n     * @since 4.5.15\r\n     * @param  value  hide tooltips?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxTooltipDistance\", {\n    /**\r\n     * @return Distance\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxTooltipDistance\");\n    },\n    /**\r\n     * If set to a numeric value, cursor will display closest series' tooltips\r\n     * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n     * it.\r\n     *\r\n     * Set it to `-1` to always force one tooltip, even if there are multiple\r\n     * data items in exactly same place.\r\n     *\r\n     * @since 4.7.18\r\n     * @param  value  Distance\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxTooltipDistance\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n    /**\r\n     * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n     * This setting specifies relative value by how much we can pan out the plot\r\n     *\r\n     * @param value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"xAxis\", {\n    /**\r\n     * @return X axis\r\n     */\n    get: function get() {\n      return this._xAxis.get();\n    },\n    /**\r\n     * A reference to X [[Axis]].\r\n     *\r\n     * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis X axis\r\n     */\n    set: function set(axis) {\n      var _this = this;\n      if (this._xAxis.get() != axis) {\n        this._xAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n          _this.preventShow = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.preventShow = false;\n          _this.hide(0);\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"yAxis\", {\n    /**\r\n     * @return Y Axis\r\n     */\n    get: function get() {\n      return this._yAxis.get();\n    },\n    /**\r\n     * A reference to Y [[Axis]].\r\n     *\r\n     * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis Y axis\r\n     */\n    set: function set(axis) {\n      var _this = this;\n      if (this._yAxis.get() != axis) {\n        this._yAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n          _this.__disabled = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.__disabled = false;\n          _this.hide(0);\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates Cursor's position when axis tooltip changes position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n  XYCursor.prototype.handleXTooltipPosition = function (event) {\n    var tooltip = this.xAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var x = point.x;\n    point.y = 1;\n    if (this.lineX) {\n      this.lineX.x = x;\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n    if (this.xAxis && this.fullWidthLineX) {\n      var startPoint = this.xAxis.currentItemStartPoint;\n      var endPoint = this.xAxis.currentItemEndPoint;\n      if (startPoint && endPoint) {\n        this.lineX.x = x;\n        var width = endPoint.x - startPoint.x;\n        this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\n      }\n    }\n  };\n  /**\r\n   * Updates Cursor's position when Y axis changes position or scale.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n  XYCursor.prototype.handleYTooltipPosition = function (event) {\n    var tooltip = this.yAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var y = point.y;\n    point.x = 1;\n    if (this.lineY) {\n      this.lineY.y = y;\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n    if (this.yAxis && this.fullWidthLineY) {\n      var startPoint = this.yAxis.currentItemStartPoint;\n      var endPoint = this.yAxis.currentItemEndPoint;\n      if (startPoint && endPoint) {\n        this.lineY.y = y;\n        var height = endPoint.y - startPoint.y;\n        this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\n      }\n    }\n  };\n  Object.defineProperty(XYCursor.prototype, \"lineX\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function get() {\n      return this._lineX.get();\n    },\n    /**\r\n     * A Line element to use for X axis.\r\n     *\r\n     * @param lineX Line\r\n     */\n    set: function set(lineX) {\n      if (lineX) {\n        lineX.setElement(this.paper.add(\"path\"));\n        this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\n        lineX.interactionsEnabled = false;\n        lineX.parent = this;\n      } else {\n        this._lineX.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"lineY\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function get() {\n      return this._lineY.get();\n    },\n    /**\r\n     * A Line element to use Y axis.\r\n     *\r\n     * @param lineY Line\r\n     */\n    set: function set(lineY) {\n      if (lineY) {\n        lineY.setElement(this.paper.add(\"path\"));\n        this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\n        lineY.parent = this;\n        lineY.interactionsEnabled = false;\n      } else {\n        this._lineY.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"selection\", {\n    /**\r\n     * @return Selection rectangle\r\n     */\n    get: function get() {\n      return this._selection;\n    },\n    /**\r\n     * A selection element ([[Sprite]]).\r\n     *\r\n     * @param selection Selection rectangle\r\n     */\n    set: function set(selection) {\n      this._selection = selection;\n      if (selection) {\n        selection.element = this.paper.add(\"path\");\n        selection.parent = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n   * with real references.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  XYCursor.prototype.processConfig = function (config) {\n    var _this = this;\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\n        if (this.map.hasKey(config.xAxis)) {\n          config.xAxis = this.map.getKey(config.xAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\n          delete config.xAxis;\n        }\n      }\n      if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\n        if (this.map.hasKey(config.yAxis)) {\n          config.yAxis = this.map.getKey(config.yAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\n          delete config.yAxis;\n        }\n      }\n      if ($type.hasValue(config.snapToSeries)) {\n        var snapTo_1 = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\n        var snapError_1 = false;\n        $array.each(snapTo_1, function (snap, index) {\n          if ($type.isString(snap)) {\n            if (_this.map.hasKey(snap)) {\n              snapTo_1[index] = _this.map.getKey(snap);\n            } else {\n              _this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\n              snapError_1 = true;\n            }\n          }\n        });\n        if (snapError_1) {\n          delete config.snapToSeries;\n        } else {\n          config.snapToSeries = snapTo_1;\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\n    /**\r\n     * @return {XYSeries | XYSeries[]}\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"snapToSeries\");\n    },\n    /**\r\n     * Specifies to which series cursor lines should be snapped.\r\n     *\r\n     * Can be a single series instance or an array of series.\r\n     *\r\n     * @param {XYSeries | XYSeries[]}\r\n     */\n    set: function set(series) {\n      var _this = this;\n      if (this.setPropertyValue(\"snapToSeries\", series)) {\n        if (series instanceof XYSeries) {\n          series = [series];\n        }\n        if (this._snapToDisposers) {\n          $array.each(this._snapToDisposers, function (disposer) {\n            disposer.dispose();\n          });\n        }\n        this._snapToDisposers = [];\n        if (series) {\n          $array.each(series, function (s) {\n            _this._snapToDisposers.push(s.events.on(\"tooltipshownat\", function () {\n              _this.handleSnap(s);\n            }, undefined, false));\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"snapOnPan\", {\n    /**\r\n     * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n     * the chart? (when `behavior == \"panX\"`)\r\n     *\r\n     * @default true\r\n     * @since 4.10.17\r\n     * @return Snap on pan?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"snapOnPan\");\n    },\n    /**\r\n     * @param value Snap on pan?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"snapOnPan\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Snaps the zoom selection after chart is panned.\r\n   *\r\n   * @ignore\r\n   */\n  XYCursor.prototype.handleSnap = function (series) {\n    if (!this.downPoint) {\n      var x = series.getTooltipX() + series.xAxis.pixelX;\n      var y = series.getTooltipY() + series.yAxis.pixelY;\n      var xAxis = series.xAxis;\n      var yAxis = series.yAxis;\n      if (xAxis) {\n        if (xAxis.renderer.opposite) {\n          y -= this.pixelHeight;\n        }\n      }\n      this.point = {\n        x: x,\n        y: y\n      };\n      this.getPositions();\n      var xx = x;\n      var yy = y;\n      x -= this.pixelWidth;\n      if (yAxis) {\n        if (yAxis.renderer.opposite) {\n          x += this.pixelWidth;\n        }\n      }\n      var tooltip = series.tooltip;\n      var duration = tooltip.animationDuration;\n      var easing = tooltip.animationEasing;\n      if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n        series.yAxis.showTooltipAtPosition(this.yPosition);\n        series.xAxis.showTooltipAtPosition(this.xPosition);\n      } else {\n        if (series.baseAxis == series.xAxis) {\n          series.yAxis.showTooltipAtPosition(this.yPosition);\n        }\n        if (series.baseAxis == series.yAxis) {\n          series.xAxis.showTooltipAtPosition(this.xPosition);\n        }\n      }\n      //\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\n      //\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\n      this.lineY.x = x;\n      this.lineX.y = y;\n      if (!this.xAxis) {\n        this.lineX.animate([{\n          property: \"x\",\n          to: xx\n        }], duration, easing);\n      }\n      if (!this.yAxis) {\n        this.lineY.animate([{\n          property: \"y\",\n          to: yy\n        }], duration, easing);\n      }\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  XYCursor.prototype.dispose = function () {\n    this.hide(0);\n    _super.prototype.dispose.call(this);\n  };\n  return XYCursor;\n}(Cursor);\nexport { XYCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;","map":{"version":3,"names":["Cursor","Sprite","MutableValueDisposer","MultiDisposer","ValueAxis","DateAxis","XYSeries","registry","color","InterfaceColorSet","getInteraction","MouseCursorStyle","$math","$utils","$type","$array","$path","XYCursor","_super","__extends","_this","call","_lineX","_lineY","_xAxis","_yAxis","_snapToDisposers","className","behavior","maxPanOut","interfaceColors","snapOnPan","selection","createChild","shouldClone","fillOpacity","fill","getFor","isMeasured","visible","interactionsEnabled","_disposers","push","lineX","stroke","strokeDasharray","strokeOpacity","y","lineY","x","events","on","updateSize","mask","hideSeriesTooltipsOnSelection","applyTheme","prototype","path","moveTo","lineTo","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","point","pixelX","pixelY","Math","min","w","round","abs","_positionPrecision","h","pixelHeight","pixelWidth","rectangle","validatePosition","_generalBehavior","hide","fixPoint","max","triggerMoveReal","force","snapToSeries","isHidden","updateLinePositions","allHidden_1","each","s","getDistance","getPanningRanges","dispatch","xAxis","yAxis","triggerDownReal","isHiding","parent","fitsToBounds","updatePoint","selectionX","selectionY","show","undefined","triggerUpReal","hasMoved","upPoint","getRanges","xRange","yRange","dispatchImmediately","interaction","setGlobalStyle","default","distance","getHorizontalDistance","_upPointOrig","_downPointOrig","getVerticalDistance","getHitOption","interactions","startX","startY","currentX","currentY","deltaX","deltaY","start","end","used","endX","endY","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","indexOf","shouldPreventGestures","touch","isTouchProtected","axis","tooltip","handleXTooltipPosition","event","preventShow","handleYTooltipPosition","__disabled","svgPointToSprite","fullWidthLineX","startPoint","currentItemStartPoint","endPoint","currentItemEndPoint","width","fullWidthLineY","height","setElement","paper","add","reset","_selection","element","processConfig","config","hasValue","isString","map","hasKey","getKey","processingErrors","snapTo_1","isArray","snapError_1","snap","index","series","disposer","dispose","handleSnap","getTooltipX","getTooltipY","renderer","opposite","getPositions","xx","yy","duration","animationDuration","easing","animationEasing","showTooltipAtPosition","yPosition","xPosition","baseAxis","animate","property","to","registeredClasses"],"sources":["../../../../../src/.internal/charts/cursors/XYCursor.ts"],"sourcesContent":["/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t */\r\n\tsnapToSeries?: XYSeries | XYSeries[];\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t */\r\n\thideSeriesTooltipsOnSelection?: boolean;\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t */\r\n\tmaxTooltipDistance?: number;\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t */\r\n\tsnapOnPan?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposers: IDisposer[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.snapOnPan = true;\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.visible = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\tthis.hideSeriesTooltipsOnSelection = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t\tlet snapToSeries = this.snapToSeries;\r\n\t\tif ((snapToSeries && !this.downPoint)) {\r\n\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\tif (snapToSeries.isHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet allHidden = true;\r\n\t\t\t\t$array.each(snapToSeries, (s) => {\r\n\t\t\t\t\tif (!s.isHidden) {\r\n\t\t\t\t\t\tallHidden = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle action when cursor is released, which should perform an operation\r\n\t * based on its `behavior`, like zoom.\r\n\t * \r\n\t * @param  point  Release point\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint): void {\r\n\t\tif (this.hasMoved()) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tif (this._generalBehavior != \"pan\") {\r\n\t\t\t\t\tthis.getRanges();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.xRange = undefined;\r\n\t\t\t\tthis.yRange = undefined;\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the cursor has moved enough based on its `behavior`.\r\n\t * \r\n\t * @return Moved?\r\n\t */\r\n\tprivate hasMoved(): boolean {\r\n\t\tlet distance: number;\r\n\t\tif (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n\t\t\tdistance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n\t\t\tdistance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdistance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\treturn distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * `\"zoomX\"` - zooms horizontally.\r\n\t * * `\"zoomY\"` - zooms vertically.\r\n\t * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n\t * * `\"selectX\"` - selects a range horizontally.\r\n\t * * `\"selectY\"` - selects a range vertically.\r\n\t * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n\t * * `\"panX\"` - moves (pans) current selection horizontally.\r\n\t * * `\"panY\"` - moves (pans) current selection vertically.\r\n\t * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n\t * * `\"none\"` - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n\t * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param  value  hide tooltips?\r\n\t */\r\n\tpublic set hideSeriesTooltipsOnSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return hide tooltip?\r\n\t */\r\n\tpublic get hideSeriesTooltipsOnSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set maxTooltipDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"maxTooltipDistance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get maxTooltipDistance(): number {\r\n\t\treturn this.getPropertyValue(\"maxTooltipDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.preventShow = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.preventShow = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\t\tpoint.y = 1;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\t\tpoint.x = 1;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries)) {\r\n\t\t\t\tlet snapTo = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n\t\t\t\tlet snapError = false;\r\n\t\t\t\t$array.each(snapTo, (snap, index) => {\r\n\t\t\t\t\tif ($type.isString(snap)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(snap)) {\r\n\t\t\t\t\t\t\tsnapTo[index] = this.map.getKey(snap);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n\t\t\t\t\t\t\tsnapError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (snapError) {\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconfig.snapToSeries = snapTo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t *\r\n\t * @param {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries | XYSeries[]) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\r\n\t\t\tif (series instanceof XYSeries) {\r\n\t\t\t\tseries = [series];\r\n\t\t\t}\r\n\t\t\tif (this._snapToDisposers) {\r\n\t\t\t\t$array.each(this._snapToDisposers, (disposer) => {\r\n\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthis._snapToDisposers = [];\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\t$array.each(series, (s) => {\r\n\t\t\t\t\tthis._snapToDisposers.push(s.events.on(\"tooltipshownat\", () => { this.handleSnap(s) }, undefined, false));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries | XYSeries[] {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t * @return Snap on pan?\r\n\t */\r\n\tpublic get snapOnPan(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapOnPan\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value Snap on pan?\r\n\t */\r\n\tpublic set snapOnPan(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapOnPan\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Snaps the zoom selection after chart is panned.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleSnap(series: XYSeries) {\r\n\t\tif (!this.downPoint) {\r\n\t\t\tlet x = series.getTooltipX() + series.xAxis.pixelX;\r\n\t\t\tlet y = series.getTooltipY() + series.yAxis.pixelY;\r\n\r\n\t\t\tlet xAxis = series.xAxis;\r\n\t\t\tlet yAxis = series.yAxis;\r\n\r\n\t\t\tif (xAxis) {\r\n\t\t\t\tif (xAxis.renderer.opposite) {\r\n\t\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = { x: x, y: y };\r\n\t\t\tthis.getPositions();\r\n\r\n\t\t\tlet xx = x;\r\n\t\t\tlet yy = y;\r\n\r\n\t\t\tx -= this.pixelWidth;\r\n\r\n\t\t\tif (yAxis) {\r\n\t\t\t\tif (yAxis.renderer.opposite) {\r\n\t\t\t\t\tx += this.pixelWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltip = series.tooltip;\r\n\t\t\tlet duration = tooltip.animationDuration;\r\n\t\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t//\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t//\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\t\tthis.lineY.x = x;\r\n\t\t\tthis.lineX.y = y;\r\n\r\n\t\t\tif (!this.xAxis) {\r\n\t\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t\t}\r\n\t\t\tif (!this.yAxis) {\r\n\t\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n"],"mappings":";;;AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,UAAU;AACpF,SAASC,MAAM,QAAuB,mBAAmB;AACzD,SAASC,oBAAoB,EAAEC,aAAa,QAAmB,2BAA2B;AAI1F,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,QAAQ,oBAAoB;AAI7C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAmGlD;;;;;;AAOA;;;;;;;AAOA,IAAAC,QAAA,0BAAAC,MAAA;EAA8BC,SAAA,CAAAF,QAAA,EAAAC,MAAA;EA2D7B;;;EAGA,SAAAD,SAAA;IAAA,IAAAG,KAAA;IAEC;IACAF,MAAA,CAAAG,IAAA,MAAO;IAhDR;;;IAGUD,KAAA,CAAAE,MAAM,GAAG,IAAIpB,oBAAoB,EAAU;IAErD;;;IAGUkB,KAAA,CAAAG,MAAM,GAAG,IAAIrB,oBAAoB,EAAU;IAiBrD;;;IAGUkB,KAAA,CAAAI,MAAM,GAAG,IAAItB,oBAAoB,EAAsB;IAEjE;;;IAGUkB,KAAA,CAAAK,MAAM,GAAG,IAAIvB,oBAAoB,EAAsB;IAOvDkB,KAAA,CAAAM,gBAAgB,GAAgB,EAAE;IAS3CN,KAAI,CAACO,SAAS,GAAG,UAAU;IAE3B;IACAP,KAAI,CAACQ,QAAQ,GAAG,OAAO;IAEvBR,KAAI,CAACS,SAAS,GAAG,GAAG;IAEpB,IAAIC,eAAe,GAAG,IAAIrB,iBAAiB,EAAE;IAE7CW,KAAI,CAACW,SAAS,GAAG,IAAI;IAErB;IACA,IAAIC,SAAS,GAAWZ,KAAI,CAACa,WAAW,CAAChC,MAAM,CAAC;IAChD+B,SAAS,CAACE,WAAW,GAAG,KAAK;IAC7BF,SAAS,CAACG,WAAW,GAAG,GAAG;IAC3BH,SAAS,CAACI,IAAI,GAAGN,eAAe,CAACO,MAAM,CAAC,uBAAuB,CAAC;IAChEL,SAAS,CAACM,UAAU,GAAG,KAAK;IAC5BN,SAAS,CAACO,OAAO,GAAG,KAAK;IACzBP,SAAS,CAACQ,mBAAmB,GAAG,KAAK;IACrCpB,KAAI,CAACY,SAAS,GAAGA,SAAS;IAC1BZ,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAACY,SAAS,CAAC;IAEpC;IACA,IAAIW,KAAK,GAAWvB,KAAI,CAACa,WAAW,CAAChC,MAAM,CAAC;IAC5C0C,KAAK,CAACT,WAAW,GAAG,KAAK;IACzBS,KAAK,CAACC,MAAM,GAAGd,eAAe,CAACO,MAAM,CAAC,MAAM,CAAC;IAC7CM,KAAK,CAACP,IAAI,GAAG5B,KAAK,EAAE;IACpBmC,KAAK,CAACE,eAAe,GAAG,KAAK;IAC7BF,KAAK,CAACL,UAAU,GAAG,KAAK;IACxBK,KAAK,CAACG,aAAa,GAAG,GAAG;IACzBH,KAAK,CAACH,mBAAmB,GAAG,KAAK;IACjCG,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;IACZ3B,KAAI,CAACuB,KAAK,GAAGA,KAAK;IAClBvB,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAACuB,KAAK,CAAC;IAEhC;IACA,IAAIK,KAAK,GAAW5B,KAAI,CAACa,WAAW,CAAChC,MAAM,CAAC;IAC5C+C,KAAK,CAACd,WAAW,GAAG,KAAK;IACzBc,KAAK,CAACJ,MAAM,GAAGd,eAAe,CAACO,MAAM,CAAC,MAAM,CAAC;IAC7CW,KAAK,CAACZ,IAAI,GAAG5B,KAAK,EAAE;IACpBwC,KAAK,CAACH,eAAe,GAAG,KAAK;IAC7BG,KAAK,CAACV,UAAU,GAAG,KAAK;IACxBU,KAAK,CAACF,aAAa,GAAG,GAAG;IACzBE,KAAK,CAACR,mBAAmB,GAAG,KAAK;IACjCQ,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;IACb7B,KAAI,CAAC4B,KAAK,GAAGA,KAAK;IAClB5B,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAAC4B,KAAK,CAAC;IAEhC;IACA5B,KAAI,CAAC8B,MAAM,CAACC,EAAE,CAAC,aAAa,EAAE/B,KAAI,CAACgC,UAAU,EAAEhC,KAAI,EAAE,KAAK,CAAC;IAE3DA,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAACE,MAAM,CAAC;IACjCF,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAACG,MAAM,CAAC;IACjCH,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAACI,MAAM,CAAC;IACjCJ,KAAI,CAACqB,UAAU,CAACC,IAAI,CAACtB,KAAI,CAACK,MAAM,CAAC;IAEjCL,KAAI,CAACiC,IAAI,GAAGjC,KAAI;IAEhBA,KAAI,CAACkC,6BAA6B,GAAG,IAAI;IAEzC;IACAlC,KAAI,CAACmC,UAAU,EAAE;;EAElB;EAEA;;;;;EAKOtC,QAAA,CAAAuC,SAAA,CAAAJ,UAAU,GAAjB;IACC,IAAI,IAAI,CAACT,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAACc,IAAI,GAAGzC,KAAK,CAAC0C,MAAM,CAAC;QAAET,CAAC,EAAE,CAAC;QAAEF,CAAC,EAAE;MAAC,CAAE,CAAC,GAAG/B,KAAK,CAAC2C,MAAM,CAAC;QAAEV,CAAC,EAAE,CAAC;QAAEF,CAAC,EAAE,IAAI,CAACa;MAAW,CAAE,CAAC;;IAE7F,IAAI,IAAI,CAACZ,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAACS,IAAI,GAAGzC,KAAK,CAAC0C,MAAM,CAAC;QAAET,CAAC,EAAE,CAAC;QAAEF,CAAC,EAAE;MAAC,CAAE,CAAC,GAAG/B,KAAK,CAAC2C,MAAM,CAAC;QAAEV,CAAC,EAAE,IAAI,CAACY,UAAU;QAAEd,CAAC,EAAE;MAAC,CAAE,CAAC;;EAE7F,CAAC;EAED;;;;;EAKO9B,QAAA,CAAAuC,SAAA,CAAAM,eAAe,GAAtB;IACC,IAAI,IAAI,CAACC,cAAc,EAAE;MACxB,IAAIC,SAAS,GAAW,IAAI,CAACA,SAAS;MACtC,IAAIpC,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE5B,IAAIoC,SAAS,EAAE;QAEd,IAAIC,KAAK,GAAW,IAAI,CAACA,KAAK;QAE9B,IAAI,IAAI,CAACtB,KAAK,EAAE;UACfsB,KAAK,CAAChB,CAAC,GAAG,IAAI,CAACN,KAAK,CAACuB,MAAM;;QAG5B,IAAI,IAAI,CAAClB,KAAK,EAAE;UACfiB,KAAK,CAAClB,CAAC,GAAG,IAAI,CAACC,KAAK,CAACmB,MAAM;;QAG5B,IAAInC,SAAS,GAAW,IAAI,CAACA,SAAS;QAEtC,IAAIiB,CAAC,GAAWmB,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAChB,CAAC,EAAEe,SAAS,CAACf,CAAC,CAAC;QAC9C,IAAIF,CAAC,GAAWqB,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAClB,CAAC,EAAEiB,SAAS,CAACjB,CAAC,CAAC;QAE9C,IAAIuB,CAAC,GAAW1D,KAAK,CAAC2D,KAAK,CAACH,IAAI,CAACI,GAAG,CAACR,SAAS,CAACf,CAAC,GAAGgB,KAAK,CAAChB,CAAC,CAAC,EAAE,IAAI,CAACwB,kBAAkB,CAAC;QACrF,IAAIC,CAAC,GAAW9D,KAAK,CAAC2D,KAAK,CAACH,IAAI,CAACI,GAAG,CAACR,SAAS,CAACjB,CAAC,GAAGkB,KAAK,CAAClB,CAAC,CAAC,EAAE,IAAI,CAAC0B,kBAAkB,CAAC;QAErF,QAAQ7C,QAAQ;UACf,KAAK,OAAO;YACXmB,CAAC,GAAG,CAAC;YACL2B,CAAC,GAAG,IAAI,CAACC,WAAW;YACpB;UACD,KAAK,OAAO;YACX1B,CAAC,GAAG,CAAC;YACLqB,CAAC,GAAG,IAAI,CAACM,UAAU;YACnB;UACD,KAAK,SAAS;YACb7B,CAAC,GAAG,CAAC;YACL2B,CAAC,GAAG,IAAI,CAACC,WAAW;YACpB;UACD,KAAK,SAAS;YACb1B,CAAC,GAAG,CAAC;YACLqB,CAAC,GAAG,IAAI,CAACM,UAAU;YACnB;;QAGF5C,SAAS,CAACiB,CAAC,GAAGA,CAAC;QACfjB,SAAS,CAACe,CAAC,GAAGA,CAAC;QAEff,SAAS,CAACyB,IAAI,GAAGzC,KAAK,CAAC6D,SAAS,CAACP,CAAC,EAAEI,CAAC,CAAC;QAEtC1C,SAAS,CAAC8C,gBAAgB,EAAE,CAAC,CAAC;OAC9B,MACI;QACJ,IAAI,IAAI,CAACC,gBAAgB,IAAI,QAAQ,EAAE;UACtC,IAAI,CAAC/C,SAAS,CAACgD,IAAI,EAAE;;;;EAIzB,CAAC;EAGD;;;;EAKU/D,QAAA,CAAAuC,SAAA,CAAAyB,QAAQ,GAAlB,UAAmBhB,KAAa;IAC/BA,KAAK,CAAChB,CAAC,GAAGmB,IAAI,CAACc,GAAG,CAAC,CAAC,EAAEjB,KAAK,CAAChB,CAAC,CAAC;IAC9BgB,KAAK,CAAClB,CAAC,GAAGqB,IAAI,CAACc,GAAG,CAAC,CAAC,EAAEjB,KAAK,CAAClB,CAAC,CAAC;IAC9BkB,KAAK,CAAChB,CAAC,GAAGmB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACO,UAAU,EAAEX,KAAK,CAAChB,CAAC,CAAC;IAC5CgB,KAAK,CAAClB,CAAC,GAAGqB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACM,WAAW,EAAEV,KAAK,CAAClB,CAAC,CAAC;IAE7C,OAAOkB,KAAK;EACb,CAAC;EAGD;;;;;EAKUhD,QAAA,CAAAuC,SAAA,CAAA2B,eAAe,GAAzB,UAA0BlB,KAAa,EAAEmB,KAAe;IAEvDlE,MAAA,CAAAsC,SAAA,CAAM2B,eAAe,CAAA9D,IAAA,OAAC4C,KAAK,EAAEmB,KAAK,CAAC;IACnC,IAAIC,YAAY,GAAG,IAAI,CAACA,YAAY;IACpC,IAAKA,YAAY,IAAI,CAAC,IAAI,CAACrB,SAAS,EAAG;MACtC,IAAIqB,YAAY,YAAY/E,QAAQ,EAAE;QACrC,IAAI+E,YAAY,CAACC,QAAQ,EAAE;UAC1B,IAAI,CAACC,mBAAmB,CAACtB,KAAK,CAAC;;OAEhC,MACI;QACJ,IAAIuB,WAAS,GAAG,IAAI;QACpBzE,MAAM,CAAC0E,IAAI,CAACJ,YAAY,EAAE,UAACK,CAAC;UAC3B,IAAI,CAACA,CAAC,CAACJ,QAAQ,EAAE;YAChBE,WAAS,GAAG,KAAK;;QAEnB,CAAC,CAAC;QACF,IAAIA,WAAS,EAAE;UACd,IAAI,CAACD,mBAAmB,CAACtB,KAAK,CAAC;;;KAGjC,MACI;MACJ,IAAI,CAACsB,mBAAmB,CAACtB,KAAK,CAAC;;IAGhC,IAAI,IAAI,CAACD,SAAS,IAAIpD,KAAK,CAAC+E,WAAW,CAAC,IAAI,CAAC3B,SAAS,EAAEC,KAAK,CAAC,GAAG,CAAC,EAAE;MACnE,IAAI,IAAI,CAACc,gBAAgB,IAAI,KAAK,EAAE;QACnC,IAAI,CAACa,gBAAgB,EAAE;QACvB,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC;;;EAG3B,CAAC;EAED;;;;EAIU5E,QAAA,CAAAuC,SAAA,CAAA+B,mBAAmB,GAA7B,UAA8BtB,KAAa;IAC1CA,KAAK,GAAG,IAAI,CAACgB,QAAQ,CAAC,IAAI,CAAChB,KAAK,CAAC;IAEjC,IAAI,IAAI,CAACtB,KAAK,IAAI,IAAI,CAACA,KAAK,CAACJ,OAAO,IAAI,CAAC,IAAI,CAACuD,KAAK,EAAE;MACpD,IAAI,CAACnD,KAAK,CAACM,CAAC,GAAGgB,KAAK,CAAChB,CAAC;;IAEvB,IAAI,IAAI,CAACD,KAAK,IAAI,IAAI,CAACA,KAAK,CAACT,OAAO,IAAI,CAAC,IAAI,CAACwD,KAAK,EAAE;MACpD,IAAI,CAAC/C,KAAK,CAACD,CAAC,GAAGkB,KAAK,CAAClB,CAAC;;IAEvB,IAAI,CAACe,eAAe,EAAE;EACvB,CAAC;EAGS7C,QAAA,CAAAuC,SAAA,CAAAwC,eAAe,GAAzB,UAA0B/B,KAAa;IAEtC,IAAI,IAAI,CAAC1B,OAAO,IAAI,CAAC,IAAI,CAAC0D,QAAQ,EAAE;MAEnC,IAAI,IAAI,CAAClB,gBAAgB,IAAI,QAAQ,EAAE;QACtC,IAAI,CAAC/C,SAAS,CAACkE,MAAM,GAAG,IAAI,CAACA,MAAM;;MAGpC,IAAI,IAAI,CAACC,YAAY,CAAClC,KAAK,CAAC,EAAE;QAC7B,IAAI,CAACD,SAAS,GAAG;UAAEf,CAAC,EAAEgB,KAAK,CAAChB,CAAC;UAAEF,CAAC,EAAEkB,KAAK,CAAClB;QAAC,CAAE;QAE3C,IAAI,CAACqD,WAAW,CAACnC,KAAK,CAAC;QAEvB;QAEA,IAAI,CAACA,KAAK,CAAChB,CAAC,GAAG,IAAI,CAACe,SAAS,CAACf,CAAC;QAC/B,IAAI,CAACgB,KAAK,CAAClB,CAAC,GAAG,IAAI,CAACiB,SAAS,CAACjB,CAAC;QAE/B,IAAIf,SAAS,GAAW,IAAI,CAACA,SAAS;QACtC,IAAIqE,UAAU,GAAW,IAAI,CAACrC,SAAS,CAACf,CAAC;QACzC,IAAIqD,UAAU,GAAW,IAAI,CAACtC,SAAS,CAACjB,CAAC;QAEzC,IAAI,IAAI,CAACgB,cAAc,EAAE;UACxB/B,SAAS,CAACiB,CAAC,GAAGoD,UAAU;UACxBrE,SAAS,CAACe,CAAC,GAAGuD,UAAU;UACxBtE,SAAS,CAACyB,IAAI,GAAG,EAAE;UACnBzB,SAAS,CAACuE,IAAI,EAAE;;QAEjBrF,MAAA,CAAAsC,SAAA,CAAMwC,eAAe,CAAA3E,IAAA,OAAC4C,KAAK,CAAC;OAC5B,MACI;QACJ,IAAI,CAACD,SAAS,GAAGwC,SAAS;;KAE3B,MACI;MACJ,IAAI,CAACxC,SAAS,GAAGwC,SAAS;;EAE5B,CAAC;EAED;;;;EAIUvF,QAAA,CAAAuC,SAAA,CAAA4C,WAAW,GAArB,UAAsBnC,KAAa;IAClC,IAAI,IAAI,CAACtB,KAAK,EAAE;MACfsB,KAAK,CAAChB,CAAC,GAAG,IAAI,CAACN,KAAK,CAACuB,MAAM;;IAE5B,IAAI,IAAI,CAAClB,KAAK,EAAE;MACfiB,KAAK,CAAClB,CAAC,GAAG,IAAI,CAACC,KAAK,CAACmB,MAAM;;EAE7B,CAAC;EAED;;;;;;EAMUlD,QAAA,CAAAuC,SAAA,CAAAiD,aAAa,GAAvB,UAAwBxC,KAAa;IACpC,IAAI,IAAI,CAACyC,QAAQ,EAAE,EAAE;MACpB,IAAI,IAAI,CAAC1C,SAAS,EAAE;QACnB,IAAI,CAAC2C,OAAO,GAAG1C,KAAK;QAEpB,IAAI,CAACmC,WAAW,CAAC,IAAI,CAACO,OAAO,CAAC;QAE9B,IAAI,IAAI,CAAC5B,gBAAgB,IAAI,KAAK,EAAE;UACnC,IAAI,CAAC6B,SAAS,EAAE;;QAGjB,IAAI,IAAI,CAAC7B,gBAAgB,IAAI,QAAQ,EAAE;UACtC,IAAI,CAAC/C,SAAS,CAACgD,IAAI,EAAE;;QAEtB9D,MAAA,CAAAsC,SAAA,CAAMiD,aAAa,CAAApF,IAAA,OAAC4C,KAAK,CAAC;;KAE3B,MACI;MACJ,IAAI,IAAI,CAACc,gBAAgB,IAAI,QAAQ,EAAE;QACtC,IAAI,CAAC/C,SAAS,CAACgD,IAAI,CAAC,CAAC,CAAC;OACtB,MACI;QACJ,IAAI,CAAC6B,MAAM,GAAGL,SAAS;QACvB,IAAI,CAACM,MAAM,GAAGN,SAAS;QACvB,IAAI,CAACO,mBAAmB,CAAC,aAAa,CAAC;;MAGxC;MACA,IAAI,IAAI,CAAChC,gBAAgB,IAAI,KAAK,EAAE;QACnC,IAAIiC,WAAW,GAAGtG,cAAc,EAAE;QAClCsG,WAAW,CAACC,cAAc,CAACtG,gBAAgB,CAACuG,OAAO,CAAC;;MAGrD,IAAI,CAACH,mBAAmB,CAAC,kBAAkB,CAAC;;IAE7C,IAAI,CAAC/C,SAAS,GAAGwC,SAAS;IAC1B,IAAI,CAACX,QAAQ,CAAC,uBAAuB,CAAC;EACvC,CAAC;EAED;;;;;EAKQ5E,QAAA,CAAAuC,SAAA,CAAAkD,QAAQ,GAAhB;IACC,IAAIS,QAAgB;IACpB,IAAI,IAAI,CAACvF,QAAQ,IAAI,OAAO,IAAI,IAAI,CAACA,QAAQ,IAAI,MAAM,EAAE;MACxDuF,QAAQ,GAAGvG,KAAK,CAACwG,qBAAqB,CAAC,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC;KAC9E,MACI,IAAI,IAAI,CAAC1F,QAAQ,IAAI,OAAO,IAAI,IAAI,CAACA,QAAQ,IAAI,MAAM,EAAE;MAC7DuF,QAAQ,GAAGvG,KAAK,CAAC2G,mBAAmB,CAAC,IAAI,CAACF,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC;KAC5E,MACI;MACJH,QAAQ,GAAGvG,KAAK,CAAC+E,WAAW,CAAC,IAAI,CAAC0B,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC;;IAErE,OAAOH,QAAQ,GAAGzG,cAAc,EAAE,CAAC8G,YAAY,CAAC,IAAI,CAACC,YAAY,EAAE,cAAc,CAAC;EACnF,CAAC;EAED;;;;;EAKUxG,QAAA,CAAAuC,SAAA,CAAAoC,gBAAgB,GAA1B;IAEC,IAAI8B,MAAM,GAAG9G,KAAK,CAAC2D,KAAK,CAAC,IAAI,CAACP,SAAS,CAACf,CAAC,GAAG,IAAI,CAACY,UAAU,EAAE,CAAC,CAAC;IAC/D,IAAI8D,MAAM,GAAG,CAAC,GAAG/G,KAAK,CAAC2D,KAAK,CAAC,IAAI,CAACP,SAAS,CAACjB,CAAC,GAAG,IAAI,CAACa,WAAW,EAAE,CAAC,CAAC;IAEpE,IAAIgE,QAAQ,GAAGhH,KAAK,CAAC2D,KAAK,CAAC,IAAI,CAACN,KAAK,CAAChB,CAAC,GAAG,IAAI,CAACY,UAAU,EAAE,CAAC,CAAC;IAC7D,IAAIgE,QAAQ,GAAG,CAAC,GAAGjH,KAAK,CAAC2D,KAAK,CAAC,IAAI,CAACN,KAAK,CAAClB,CAAC,GAAG,IAAI,CAACa,WAAW,EAAE,CAAC,CAAC;IAElE,IAAIkE,MAAM,GAAGJ,MAAM,GAAGE,QAAQ;IAC9B,IAAIG,MAAM,GAAGJ,MAAM,GAAGE,QAAQ;IAE9B,IAAI,CAAChB,MAAM,GAAG;MAAEmB,KAAK,EAAEF,MAAM;MAAEG,GAAG,EAAE,CAAC,GAAGH;IAAM,CAAE;IAChD,IAAI,CAAChB,MAAM,GAAG;MAAEkB,KAAK,EAAED,MAAM;MAAEE,GAAG,EAAE,CAAC,GAAGF;IAAM,CAAE;IAEhD,IAAI,IAAI,CAACnG,QAAQ,IAAI,MAAM,EAAE;MAC5B,IAAI,CAACkF,MAAM,CAACkB,KAAK,GAAG,CAAC;MACrB,IAAI,CAAClB,MAAM,CAACmB,GAAG,GAAG,CAAC;;IAEpB,IAAI,IAAI,CAACrG,QAAQ,IAAI,MAAM,EAAE;MAC5B,IAAI,CAACiF,MAAM,CAACmB,KAAK,GAAG,CAAC;MACrB,IAAI,CAACnB,MAAM,CAACoB,GAAG,GAAG,CAAC;;EAErB,CAAC;EAED;;;;;EAKUhH,QAAA,CAAAuC,SAAA,CAAAoD,SAAS,GAAnB;IACC,IAAI,IAAI,CAACjE,KAAK,EAAE;MACf,IAAI,CAACgE,OAAO,CAAC1D,CAAC,GAAG,IAAI,CAACN,KAAK,CAACuB,MAAM;;IAEnC,IAAI,IAAI,CAAClB,KAAK,EAAE;MACf,IAAI,CAAC2D,OAAO,CAAC5D,CAAC,GAAG,IAAI,CAACC,KAAK,CAACmB,MAAM;;IAGnC;IACAtD,MAAM,CAACqH,IAAI,CAAC,IAAI,CAAClG,SAAS,CAAC;IAE3B,IAAI0F,MAAM,GAAW9G,KAAK,CAAC2D,KAAK,CAAC,IAAI,CAACP,SAAS,CAACf,CAAC,GAAG,IAAI,CAACY,UAAU,EAAE,CAAC,CAAC;IACvE,IAAIsE,IAAI,GAAWvH,KAAK,CAAC2D,KAAK,CAAE,IAAI,CAACoC,OAAO,CAAC1D,CAAC,GAAI,IAAI,CAACY,UAAU,EAAE,CAAC,CAAC;IAErE,IAAI8D,MAAM,GAAW,CAAC,GAAG/G,KAAK,CAAC2D,KAAK,CAAC,IAAI,CAACP,SAAS,CAACjB,CAAC,GAAG,IAAI,CAACa,WAAW,EAAE,CAAC,CAAC;IAC5E,IAAIwE,IAAI,GAAW,CAAC,GAAGxH,KAAK,CAAC2D,KAAK,CAAE,IAAI,CAACoC,OAAO,CAAC5D,CAAC,GAAI,IAAI,CAACa,WAAW,EAAE,CAAC,CAAC;IAE1E,IAAI,CAACiD,MAAM,GAAG;MAAEmB,KAAK,EAAEpH,KAAK,CAACyD,GAAG,CAACqD,MAAM,EAAES,IAAI,CAAC;MAAEF,GAAG,EAAErH,KAAK,CAACsE,GAAG,CAACwC,MAAM,EAAES,IAAI;IAAC,CAAE;IAC9E,IAAI,CAACrB,MAAM,GAAG;MAAEkB,KAAK,EAAEpH,KAAK,CAACyD,GAAG,CAACsD,MAAM,EAAES,IAAI,CAAC;MAAEH,GAAG,EAAErH,KAAK,CAACsE,GAAG,CAACyC,MAAM,EAAES,IAAI;IAAC,CAAE;EAE/E,CAAC;EAwBDC,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,YAAQ;IAmBnB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,UAAU,CAAC;IACzC,CAAC;IA9CD;;;;;;;;;;;;;;;;;;;;;;SAsBA,SAAAC,IAAoBC,KAA6G;MAChI,IAAI,CAACC,gBAAgB,CAAC,UAAU,EAAED,KAAK,EAAE,IAAI,CAAC;MAE9C,IAAI,CAAC3E,cAAc,GAAG,KAAK;MAE3B,IAAI2E,KAAK,CAACE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;QAChC,IAAI,CAAC7D,gBAAgB,GAAG,MAAM;QAC9B,IAAI,CAAChB,cAAc,GAAG,IAAI;;MAE3B,IAAI2E,KAAK,CAACE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;QAClC,IAAI,CAAC7D,gBAAgB,GAAG,QAAQ;QAChC,IAAI,CAAChB,cAAc,GAAG,IAAI;;MAE3B,IAAI2E,KAAK,CAACE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;QAC/B,IAAI,CAAC7D,gBAAgB,GAAG,KAAK;QAC7B,IAAI,CAAChB,cAAc,GAAG,KAAK;;IAE7B,CAAC;;;;EASD;;;;;;;EAOU9C,QAAA,CAAAuC,SAAA,CAAAqF,qBAAqB,GAA/B,UAAgCC,KAAc;IAC7C,OAAO,CAAC,CAAC,IAAI,CAACrB,YAAY,CAACsB,gBAAgB,IAAI,CAACD,KAAK,KAAK,IAAI,CAAClH,QAAQ,IAAI,MAAM;EAClF,CAAC;EAWDyG,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,kBAAc;IAOzB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,CAAC;IAC/C,CAAC;IArBD;;;;;;;;;SASA,SAAAC,IAA0BC,KAAc;MACvC,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,EAAED,KAAK,CAAC;MAC9C,IAAI,CAACA,KAAK,EAAE;QACX,IAAI,CAACtF,UAAU,EAAE;;IAEnB,CAAC;;;;EAkBDiF,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,kBAAc;IAOzB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,CAAC;IAC/C,CAAC;IArBD;;;;;;;;;SASA,SAAAC,IAA0BC,KAAc;MACvC,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,EAAED,KAAK,CAAC;MAC9C,IAAI,CAACA,KAAK,EAAE;QACX,IAAI,CAACtF,UAAU,EAAE;;IAEnB,CAAC;;;;EAeDiF,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,iCAA6B;IAIxC;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,+BAA+B,CAAC;IAC9D,CAAC;IAfD;;;;;;SAMA,SAAAC,IAAyCC,KAAc;MACtD,IAAI,CAACC,gBAAgB,CAAC,+BAA+B,EAAED,KAAK,CAAC;IAC9D,CAAC;;;;EAoBDL,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,sBAAkB;IAI7B;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,oBAAoB,CAAC;IACnD,CAAC;IApBD;;;;;;;;;;;SAWA,SAAAC,IAA8BC,KAAa;MAC1C,IAAI,CAACC,gBAAgB,CAAC,oBAAoB,EAAED,KAAK,CAAC;IACnD,CAAC;;;;EAeDL,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,aAAS;IAIpB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,WAAW,CAAC;IAC1C,CAAC;IAfD;;;;;;SAMA,SAAAC,IAAqBC,KAAa;MACjC,IAAI,CAACC,gBAAgB,CAAC,WAAW,EAAED,KAAK,CAAC;IAC1C,CAAC;;;;EAsBDL,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,SAAK;IAkBhB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAAC/G,MAAM,CAAC+G,GAAG,EAAE;IACzB,CAAC;IApCD;;;;;;;;;;;;;SAaA,SAAAE,IAAiBO,IAAU;MAA3B,IAAA5H,KAAA;MACC,IAAI,IAAI,CAACI,MAAM,CAAC+G,GAAG,EAAE,IAAIS,IAAI,EAAE;QAC9B,IAAI,CAACxH,MAAM,CAACiH,GAAG,CAACO,IAAI,EAAE,IAAI7I,aAAa,CAAC,CACvC6I,IAAI,CAACC,OAAO,CAAC/F,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC+F,sBAAsB,EAAE,IAAI,EAAE,KAAK,CAAC,EAEnFF,IAAI,CAAC9F,MAAM,CAACC,EAAE,CAAC,oBAAoB,EAAE,UAACgG,KAAK;UAC1C/H,KAAI,CAAC4D,IAAI,CAAC,CAAC,CAAC;UACZ5D,KAAI,CAACgI,WAAW,GAAG,IAAI;QACxB,CAAC,EAAE5C,SAAS,EAAE,KAAK,CAAC,EACpBwC,IAAI,CAAC9F,MAAM,CAACC,EAAE,CAAC,kBAAkB,EAAE,UAACgG,KAAK;UACxC/H,KAAI,CAACgI,WAAW,GAAG,KAAK;UACxBhI,KAAI,CAAC4D,IAAI,CAAC,CAAC,CAAC;UACZ5D,KAAI,CAACyE,QAAQ,CAAC,uBAAuB,CAAC;QACvC,CAAC,EAAEW,SAAS,EAAE,KAAK,CAAC,CACpB,CAAC,CAAC;;IAEL,CAAC;;;;EAsBD6B,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,SAAK;IAkBhB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAAC9G,MAAM,CAAC8G,GAAG,EAAE;IACzB,CAAC;IApCD;;;;;;;;;;;;;SAaA,SAAAE,IAAiBO,IAAU;MAA3B,IAAA5H,KAAA;MACC,IAAI,IAAI,CAACK,MAAM,CAAC8G,GAAG,EAAE,IAAIS,IAAI,EAAE;QAC9B,IAAI,CAACvH,MAAM,CAACgH,GAAG,CAACO,IAAI,EAAE,IAAI7I,aAAa,CAAC,CACvC6I,IAAI,CAACC,OAAO,CAAC/F,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACkG,sBAAsB,EAAE,IAAI,EAAE,KAAK,CAAC,EAEnFL,IAAI,CAAC9F,MAAM,CAACC,EAAE,CAAC,oBAAoB,EAAE,UAACgG,KAAK;UAC1C/H,KAAI,CAAC4D,IAAI,CAAC,CAAC,CAAC;UACZ5D,KAAI,CAACkI,UAAU,GAAG,IAAI;QACvB,CAAC,EAAE9C,SAAS,EAAE,KAAK,CAAC,EACpBwC,IAAI,CAAC9F,MAAM,CAACC,EAAE,CAAC,kBAAkB,EAAE,UAACgG,KAAK;UACxC/H,KAAI,CAACkI,UAAU,GAAG,KAAK;UACvBlI,KAAI,CAAC4D,IAAI,CAAC,CAAC,CAAC;UACZ5D,KAAI,CAACyE,QAAQ,CAAC,uBAAuB,CAAC;QACvC,CAAC,EAAEW,SAAS,EAAE,KAAK,CAAC,CACpB,CAAC,CAAC;;IAEL,CAAC;;;;EASD;;;;;;EAMUvF,QAAA,CAAAuC,SAAA,CAAA0F,sBAAsB,GAAhC,UAAiCC,KAAuC;IACvE,IAAIF,OAAO,GAAY,IAAI,CAACnD,KAAK,CAACmD,OAAO;IACzC,IAAIhF,KAAK,GAAWpD,MAAM,CAAC0I,gBAAgB,CAAC;MAAEtG,CAAC,EAAEgG,OAAO,CAAC/E,MAAM;MAAEnB,CAAC,EAAEkG,OAAO,CAAC9E;IAAM,CAAE,EAAE,IAAI,CAAC;IAC3F,IAAIlB,CAAC,GAAWgB,KAAK,CAAChB,CAAC;IACvBgB,KAAK,CAAClB,CAAC,GAAG,CAAC;IAEX,IAAI,IAAI,CAACJ,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAACM,CAAC,GAAGA,CAAC;MAChB,IAAI,CAAC,IAAI,CAACkD,YAAY,CAAClC,KAAK,CAAC,EAAE;QAC9B,IAAI,CAACe,IAAI,EAAE;;;IAIb,IAAI,IAAI,CAACc,KAAK,IAAI,IAAI,CAAC0D,cAAc,EAAE;MACtC,IAAIC,UAAU,GAAW,IAAI,CAAC3D,KAAK,CAAC4D,qBAAqB;MACzD,IAAIC,QAAQ,GAAW,IAAI,CAAC7D,KAAK,CAAC8D,mBAAmB;MACrD,IAAIH,UAAU,IAAIE,QAAQ,EAAE;QAC3B,IAAI,CAAChH,KAAK,CAACM,CAAC,GAAGA,CAAC;QAChB,IAAI4G,KAAK,GAAWF,QAAQ,CAAC1G,CAAC,GAAGwG,UAAU,CAACxG,CAAC;QAC7C,IAAI,CAACN,KAAK,CAACc,IAAI,GAAGzC,KAAK,CAAC6D,SAAS,CAACgF,KAAK,EAAE,IAAI,CAACjG,WAAW,EAAE,CAACiG,KAAK,GAAG,CAAC,CAAC;;;EAGzE,CAAC;EAED;;;;;;EAMU5I,QAAA,CAAAuC,SAAA,CAAA6F,sBAAsB,GAAhC,UAAiCF,KAAuC;IACvE,IAAIF,OAAO,GAAY,IAAI,CAAClD,KAAK,CAACkD,OAAO;IACzC,IAAIhF,KAAK,GAAWpD,MAAM,CAAC0I,gBAAgB,CAAC;MAAEtG,CAAC,EAAEgG,OAAO,CAAC/E,MAAM;MAAEnB,CAAC,EAAEkG,OAAO,CAAC9E;IAAM,CAAE,EAAE,IAAI,CAAC;IAC3F,IAAIpB,CAAC,GAAWkB,KAAK,CAAClB,CAAC;IACvBkB,KAAK,CAAChB,CAAC,GAAG,CAAC;IAEX,IAAI,IAAI,CAACD,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAACD,CAAC,GAAGA,CAAC;MAEhB,IAAI,CAAC,IAAI,CAACoD,YAAY,CAAClC,KAAK,CAAC,EAAE;QAC9B,IAAI,CAACe,IAAI,EAAE;;;IAIb,IAAI,IAAI,CAACe,KAAK,IAAI,IAAI,CAAC+D,cAAc,EAAE;MACtC,IAAIL,UAAU,GAAW,IAAI,CAAC1D,KAAK,CAAC2D,qBAAqB;MACzD,IAAIC,QAAQ,GAAW,IAAI,CAAC5D,KAAK,CAAC6D,mBAAmB;MACrD,IAAIH,UAAU,IAAIE,QAAQ,EAAE;QAC3B,IAAI,CAAC3G,KAAK,CAACD,CAAC,GAAGA,CAAC;QAChB,IAAIgH,MAAM,GAAWJ,QAAQ,CAAC5G,CAAC,GAAG0G,UAAU,CAAC1G,CAAC;QAC9C,IAAI,CAACC,KAAK,CAACS,IAAI,GAAGzC,KAAK,CAAC6D,SAAS,CAAC,IAAI,CAAChB,UAAU,EAAEkG,MAAM,EAAE,CAAC,EAAE,CAACA,MAAM,GAAG,CAAC,CAAC;;;EAG7E,CAAC;EAOD1B,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,SAAK;IAYhB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACjH,MAAM,CAACiH,GAAG,EAAE;IACzB,CAAC;IAtBD;;;;;SAKA,SAAAE,IAAiB9F,KAAa;MAC7B,IAAIA,KAAK,EAAE;QACVA,KAAK,CAACqH,UAAU,CAAC,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC5I,MAAM,CAACmH,GAAG,CAAC9F,KAAK,EAAEA,KAAK,CAACO,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACW,eAAe,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7FnB,KAAK,CAACH,mBAAmB,GAAG,KAAK;QACjCG,KAAK,CAACuD,MAAM,GAAG,IAAI;OACnB,MACI;QACJ,IAAI,CAAC5E,MAAM,CAAC6I,KAAK,EAAE;;IAErB,CAAC;;;;EAcD9B,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,SAAK;IAYhB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAAChH,MAAM,CAACgH,GAAG,EAAE;IACzB,CAAC;IAtBD;;;;;SAKA,SAAAE,IAAiBzF,KAAa;MAC7B,IAAIA,KAAK,EAAE;QACVA,KAAK,CAACgH,UAAU,CAAC,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC3I,MAAM,CAACkH,GAAG,CAACzF,KAAK,EAAEA,KAAK,CAACE,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACW,eAAe,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7Fd,KAAK,CAACkD,MAAM,GAAG,IAAI;QACnBlD,KAAK,CAACR,mBAAmB,GAAG,KAAK;OACjC,MACI;QACJ,IAAI,CAACjB,MAAM,CAAC4I,KAAK,EAAE;;IAErB,CAAC;;;;EAcD9B,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,aAAS;IAQpB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAAC6B,UAAU;IACvB,CAAC;IAlBD;;;;;SAKA,SAAA3B,IAAqBzG,SAAiB;MACrC,IAAI,CAACoI,UAAU,GAAGpI,SAAS;MAC3B,IAAIA,SAAS,EAAE;QACdA,SAAS,CAACqI,OAAO,GAAG,IAAI,CAACJ,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;QAC1ClI,SAAS,CAACkE,MAAM,GAAG,IAAI;;IAEzB,CAAC;;;;EASD;;;;;;;;;EASOjF,QAAA,CAAAuC,SAAA,CAAA8G,aAAa,GAApB,UAAqBC,MAAiC;IAAtD,IAAAnJ,KAAA;IAEC,IAAImJ,MAAM,EAAE;MAEX;MACA,IAAIzJ,KAAK,CAAC0J,QAAQ,CAACD,MAAM,CAACzE,KAAK,CAAC,IAAIhF,KAAK,CAAC2J,QAAQ,CAACF,MAAM,CAACzE,KAAK,CAAC,EAAE;QACjE,IAAI,IAAI,CAAC4E,GAAG,CAACC,MAAM,CAACJ,MAAM,CAACzE,KAAK,CAAC,EAAE;UAClCyE,MAAM,CAACzE,KAAK,GAAG,IAAI,CAAC4E,GAAG,CAACE,MAAM,CAACL,MAAM,CAACzE,KAAK,CAAC;SAC5C,MACI;UACJ,IAAI,CAAC+E,gBAAgB,CAACnI,IAAI,CAAC,+BAA+B,GAAG6H,MAAM,CAACzE,KAAK,GAAG,sBAAsB,CAAC;UACnG,OAAOyE,MAAM,CAACzE,KAAK;;;MAGrB,IAAIhF,KAAK,CAAC0J,QAAQ,CAACD,MAAM,CAACxE,KAAK,CAAC,IAAIjF,KAAK,CAAC2J,QAAQ,CAACF,MAAM,CAACxE,KAAK,CAAC,EAAE;QACjE,IAAI,IAAI,CAAC2E,GAAG,CAACC,MAAM,CAACJ,MAAM,CAACxE,KAAK,CAAC,EAAE;UAClCwE,MAAM,CAACxE,KAAK,GAAG,IAAI,CAAC2E,GAAG,CAACE,MAAM,CAACL,MAAM,CAACxE,KAAK,CAAC;SAC5C,MACI;UACJ,IAAI,CAAC8E,gBAAgB,CAACnI,IAAI,CAAC,+BAA+B,GAAG6H,MAAM,CAACxE,KAAK,GAAG,sBAAsB,CAAC;UACnG,OAAOwE,MAAM,CAACxE,KAAK;;;MAIrB,IAAIjF,KAAK,CAAC0J,QAAQ,CAACD,MAAM,CAAClF,YAAY,CAAC,EAAE;QACxC,IAAIyF,QAAM,GAAGhK,KAAK,CAACiK,OAAO,CAACR,MAAM,CAAClF,YAAY,CAAC,GAAGkF,MAAM,CAAClF,YAAY,GAAG,CAACkF,MAAM,CAAClF,YAAY,CAAC;QAC7F,IAAI2F,WAAS,GAAG,KAAK;QACrBjK,MAAM,CAAC0E,IAAI,CAACqF,QAAM,EAAE,UAACG,IAAI,EAAEC,KAAK;UAC/B,IAAIpK,KAAK,CAAC2J,QAAQ,CAACQ,IAAI,CAAC,EAAE;YACzB,IAAI7J,KAAI,CAACsJ,GAAG,CAACC,MAAM,CAACM,IAAI,CAAC,EAAE;cAC1BH,QAAM,CAACI,KAAK,CAAC,GAAG9J,KAAI,CAACsJ,GAAG,CAACE,MAAM,CAACK,IAAI,CAAC;aACrC,MACI;cACJ7J,KAAI,CAACyJ,gBAAgB,CAACnI,IAAI,CAAC,iCAAiC,GAAGuI,IAAI,GAAG,uBAAuB,CAAC;cAC9FD,WAAS,GAAG,IAAI;;;QAGnB,CAAC,CAAC;QACF,IAAIA,WAAS,EAAE;UACd,OAAOT,MAAM,CAAClF,YAAY;SAC1B,MACI;UACJkF,MAAM,CAAClF,YAAY,GAAGyF,QAAM;;;;IAM/B5J,MAAA,CAAAsC,SAAA,CAAM8G,aAAa,CAAAjJ,IAAA,OAACkJ,MAAM,CAAC;EAE5B,CAAC;EASDlC,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,gBAAY;IAqBvB;;;SAGA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,cAAc,CAAC;IAC7C,CAAC;IAjCD;;;;;;;SAOA,SAAAC,IAAwB0C,MAA6B;MAArD,IAAA/J,KAAA;MACC,IAAI,IAAI,CAACuH,gBAAgB,CAAC,cAAc,EAAEwC,MAAM,CAAC,EAAE;QAElD,IAAIA,MAAM,YAAY7K,QAAQ,EAAE;UAC/B6K,MAAM,GAAG,CAACA,MAAM,CAAC;;QAElB,IAAI,IAAI,CAACzJ,gBAAgB,EAAE;UAC1BX,MAAM,CAAC0E,IAAI,CAAC,IAAI,CAAC/D,gBAAgB,EAAE,UAAC0J,QAAQ;YAC3CA,QAAQ,CAACC,OAAO,EAAE;UACnB,CAAC,CAAC;;QAEH,IAAI,CAAC3J,gBAAgB,GAAG,EAAE;QAE1B,IAAIyJ,MAAM,EAAE;UACXpK,MAAM,CAAC0E,IAAI,CAAC0F,MAAM,EAAE,UAACzF,CAAC;YACrBtE,KAAI,CAACM,gBAAgB,CAACgB,IAAI,CAACgD,CAAC,CAACxC,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAE;cAAQ/B,KAAI,CAACkK,UAAU,CAAC5F,CAAC,CAAC;YAAC,CAAC,EAAEc,SAAS,EAAE,KAAK,CAAC,CAAC;UAC1G,CAAC,CAAC;;;IAGL,CAAC;;;;EAkBD6B,MAAA,CAAAC,cAAA,CAAWrH,QAAA,CAAAuC,SAAA,aAAS;IARpB;;;;;;;;SAQA,SAAA+E,IAAA;MACC,OAAO,IAAI,CAACC,gBAAgB,CAAC,WAAW,CAAC;IAC1C,CAAC;IAED;;;SAGA,SAAAC,IAAqBC,KAAc;MAClC,IAAI,CAACC,gBAAgB,CAAC,WAAW,EAAED,KAAK,CAAC;IAC1C,CAAC;;;;EAED;;;;;EAKOzH,QAAA,CAAAuC,SAAA,CAAA8H,UAAU,GAAjB,UAAkBH,MAAgB;IACjC,IAAI,CAAC,IAAI,CAACnH,SAAS,EAAE;MACpB,IAAIf,CAAC,GAAGkI,MAAM,CAACI,WAAW,EAAE,GAAGJ,MAAM,CAACrF,KAAK,CAAC5B,MAAM;MAClD,IAAInB,CAAC,GAAGoI,MAAM,CAACK,WAAW,EAAE,GAAGL,MAAM,CAACpF,KAAK,CAAC5B,MAAM;MAElD,IAAI2B,KAAK,GAAGqF,MAAM,CAACrF,KAAK;MACxB,IAAIC,KAAK,GAAGoF,MAAM,CAACpF,KAAK;MAExB,IAAID,KAAK,EAAE;QACV,IAAIA,KAAK,CAAC2F,QAAQ,CAACC,QAAQ,EAAE;UAC5B3I,CAAC,IAAI,IAAI,CAAC4B,WAAW;;;MAIvB,IAAI,CAACV,KAAK,GAAG;QAAEhB,CAAC,EAAEA,CAAC;QAAEF,CAAC,EAAEA;MAAC,CAAE;MAC3B,IAAI,CAAC4I,YAAY,EAAE;MAEnB,IAAIC,EAAE,GAAG3I,CAAC;MACV,IAAI4I,EAAE,GAAG9I,CAAC;MAEVE,CAAC,IAAI,IAAI,CAAC2B,UAAU;MAEpB,IAAImB,KAAK,EAAE;QACV,IAAIA,KAAK,CAAC0F,QAAQ,CAACC,QAAQ,EAAE;UAC5BzI,CAAC,IAAI,IAAI,CAAC2B,UAAU;;;MAItB,IAAIqE,OAAO,GAAGkC,MAAM,CAAClC,OAAO;MAC5B,IAAI6C,QAAQ,GAAG7C,OAAO,CAAC8C,iBAAiB;MACxC,IAAIC,MAAM,GAAG/C,OAAO,CAACgD,eAAe;MAEpC,IAAInG,KAAK,YAAY1F,SAAS,IAAI,EAAE0F,KAAK,YAAYzF,QAAQ,CAAC,IAAI0F,KAAK,YAAY3F,SAAS,IAAI,EAAE2F,KAAK,YAAY1F,QAAQ,CAAC,EAAE;QAC7H8K,MAAM,CAACpF,KAAK,CAACmG,qBAAqB,CAAC,IAAI,CAACC,SAAS,CAAC;QAClDhB,MAAM,CAACrF,KAAK,CAACoG,qBAAqB,CAAC,IAAI,CAACE,SAAS,CAAC;OAClD,MACI;QACJ,IAAIjB,MAAM,CAACkB,QAAQ,IAAIlB,MAAM,CAACrF,KAAK,EAAE;UACpCqF,MAAM,CAACpF,KAAK,CAACmG,qBAAqB,CAAC,IAAI,CAACC,SAAS,CAAC;;QAGnD,IAAIhB,MAAM,CAACkB,QAAQ,IAAIlB,MAAM,CAACpF,KAAK,EAAE;UACpCoF,MAAM,CAACrF,KAAK,CAACoG,qBAAqB,CAAC,IAAI,CAACE,SAAS,CAAC;;;MAIrD;MACA;MAEC,IAAI,CAACpJ,KAAK,CAACC,CAAC,GAAGA,CAAC;MAChB,IAAI,CAACN,KAAK,CAACI,CAAC,GAAGA,CAAC;MAEhB,IAAI,CAAC,IAAI,CAAC+C,KAAK,EAAE;QAChB,IAAI,CAACnD,KAAK,CAAC2J,OAAO,CAAC,CAAC;UAAEC,QAAQ,EAAE,GAAG;UAAEC,EAAE,EAAEZ;QAAE,CAAE,CAAC,EAAEE,QAAQ,EAAEE,MAAM,CAAC;;MAElE,IAAI,CAAC,IAAI,CAACjG,KAAK,EAAE;QAChB,IAAI,CAAC/C,KAAK,CAACsJ,OAAO,CAAC,CAAC;UAAEC,QAAQ,EAAE,GAAG;UAAEC,EAAE,EAAEX;QAAE,CAAE,CAAC,EAAEC,QAAQ,EAAEE,MAAM,CAAC;;;EAGpE,CAAC;EAED;;;EAGO/K,QAAA,CAAAuC,SAAA,CAAA6H,OAAO,GAAd;IACC,IAAI,CAACrG,IAAI,CAAC,CAAC,CAAC;IACZ9D,MAAA,CAAAsC,SAAA,CAAM6H,OAAO,CAAAhK,IAAA,MAAE;EAChB,CAAC;EACF,OAAAJ,QAAC;AAAD,CAAC,CAh/B6BjB,MAAM;;AAk/BpC;;;;;;AAMAO,QAAQ,CAACkM,iBAAiB,CAAC,UAAU,CAAC,GAAGxL,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}