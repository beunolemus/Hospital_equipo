{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n/**\r\n * Percent chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { PercentSeries } from \"../series/PercentSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PercentChartDataItem = /** @class */function (_super) {\n  __extends(PercentChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PercentChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PercentChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PercentChartDataItem;\n}(SerialChartDataItem);\nexport { PercentChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\nvar PercentChart = /** @class */function (_super) {\n  __extends(PercentChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PercentChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"PercentChart\";\n    _this.align = \"none\";\n    _this.valign = \"none\";\n    // so that the chart is always drawn, even the legend wants all the space\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PercentChart.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n    this.feedLegend();\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  PercentChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          $iter.each(series.dataItems.iterator(), function (dataItem) {\n            if (!dataItem.hiddenInLegend) {\n              legendData_1.push(dataItem);\n              if (!dataItem.legendSettings) {\n                dataItem.legendSettings = series.legendSettings;\n              }\n            }\n          });\n        }\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"category\";\n    }\n  };\n  /**\r\n   * Creates a new [[PercentSeries]].\r\n   *\r\n   * @return New series\r\n   */\n  PercentChart.prototype.createSeries = function () {\n    return new PercentSeries();\n  };\n  /**\r\n   * @ignore\r\n   */\n  PercentChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n    if (legend) {\n      legend.labels.template.text = \"{category}\";\n      legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\n      legend.itemContainers.template.events.on(\"over\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n        if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\n          var slice = percentSeriesDataItem.slice;\n          slice.dispatchImmediately(\"over\");\n          slice.isHover = true;\n          slice.interactions.isRealHover = true;\n        }\n      });\n      legend.itemContainers.template.events.on(\"out\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n        var slice = percentSeriesDataItem.slice;\n        slice.dispatchImmediately(\"out\");\n        slice.isHover = false;\n      });\n    }\n  };\n  return PercentChart;\n}(SerialChart);\nexport { PercentChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;","map":{"version":3,"names":["SerialChart","SerialChartDataItem","PercentSeries","registry","$iter","PercentChartDataItem","_super","__extends","_this","call","className","applyTheme","PercentChart","align","valign","chartContainer","minHeight","minWidth","prototype","validateData","feedLegend","legend","legendData_1","each","series","iterator","hiddenInLegend","dataItems","dataItem","push","legendSettings","data","dataFields","name","createSeries","setLegend","labels","template","text","valueLabels","itemContainers","events","on","event","percentSeriesDataItem","target","dataContext","visible","isHiding","slice","dispatchImmediately","isHover","interactions","isRealHover","registeredClasses"],"sources":["../../../../../src/.internal/charts/types/PercentChart.ts"],"sourcesContent":["/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { Legend } from \"../Legend\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\t\t\t\t\t\t\tif (!dataItem.legendSettings) {\r\n\t\t\t\t\t\t\t\tdataItem.legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\r\n\t\t\t\t\tslice.dispatchImmediately(\"over\");\r\n\t\t\t\t\tslice.isHover = true;\r\n\t\t\t\t\tslice.interactions.isRealHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\t\t\t\tslice.dispatchImmediately(\"out\");\r\n\t\t\t\tslice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}